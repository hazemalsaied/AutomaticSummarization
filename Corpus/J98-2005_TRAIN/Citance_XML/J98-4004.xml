<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">The kinds of tree representations used in a treebank corpus can have a dramatic effect on perfor­ mance of a parser based on the PCFG estimated from that corpus, causing the estimated likelihood of a tree to differ substantiall yfrom itsfrequency in the training corpus.</S>
		<S sid ="2" ssid = "2">This pa per points out that the Penn II treebank representations are of the kind predicted to have such an effect, and describes a simple node relabeling transformation that improves a treebank PCFG-based parser&apos;s average precision and recall by around 8%, or approximatel y half of the performance difference between a simple PCFG model and the best broad-coverage parsers available today.</S>
		<S sid ="3" ssid = "3">This performance variation comes about because any PCFG, and hence the corpus of treesfrom which the PCFG is induced, embodies independence assumptions about the distribution of words and phrases.</S>
		<S sid ="4" ssid = "4">The particular independence assumptions implicit in a tree representation can be studied theoretically and investigated empirically by means of a tree transformation/ detransformation process.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="5" ssid = "5">Probabalistic context-free grammars (PCFGs) provide simple statistical models of nat­ ural languages.</S>
			<S sid ="6" ssid = "6">The relative frequency estimator provides a straightforward way of inducing these grammars from treebank corpora, and a broad-coverage parsing system can be obtained by using a parser to find a maximum-likelihood parse tree for the input string with respect to such a treebank grammar.</S>
			<S sid ="7" ssid = "7">PCFG parsing systems often perform as well as other simple broad-coverage parsing system for predicting tree structure from part-of-speech (POS) tag sequences (Charniak 1996).</S>
			<S sid ="8" ssid = "8">While PCFG models do not perform as well as models that are sensitive to a wider range of dependencies (Collins 1996), their simplicity makes them straightforward to analyze both theoretically and empirically.</S>
			<S sid ="9" ssid = "9">Moreover, since more sophisticated systems can be viewed as refinements of the basic PCFG model (Charniak 1997), it seems reasonable to first attempt to better understand the properties of PCFG models themselves.</S>
			<S sid ="10" ssid = "10">It is well known that natural language exhibits dependencies that context-free grammars (CFGs) cannot describe (Culy 1985; Shieber 1985).</S>
			<S sid ="11" ssid = "11">But the statistical in­ dependence assumptions embodied in a particular PCFG description of a particular natural language construction are in general much stronger than the requirement that the construction be generated by a CFG.</S>
			<S sid ="12" ssid = "12">We show below that the PCFG extension of what seems to be an adequate CFG description of PP attachment constructions per­ forms no better than PCFG models estimated from non-CFG accounts of the same constructions.</S>
			<S sid ="13" ssid = "13">More specifically, this paper studies the effect of varying the tree structure repre­ sentation of PP modification from both a theoretical and an empirical point of view.</S>
			<S sid ="14" ssid = "14">It compares PCFG models induced from treebanks using several different tree repre * Department of Cognitive and Linguistic Sciences, Box 1978, Providence, RI 02912 © 1998 Association for Computational Linguistics sentations, including the representation used in the Penn II treebank corpora (Marcus, Santorini, and Marcinkiewicz 1993) and the &quot;Chomsky adjunction&quot; representation now standardly assumed in generative linguistics.</S>
			<S sid ="15" ssid = "15">One of the weaknesses of a PCFG model is that it is insensitive to nonlocal re­ lationships between nodes.</S>
			<S sid ="16" ssid = "16">If these relationships are significant then a PCFG will be a poor language model.</S>
			<S sid ="17" ssid = "17">Indeed, the sense in which the set of trees generated by a CFG is &quot;context free&quot; is precisely that the label on a node completely characterizes the relationships between the subtree dominated by the node and the nodes that properly dominate this subtree.</S>
			<S sid ="18" ssid = "18">Roughly speaking, the more nodes in the trees of the training corpus, the stronger the independence assumptions in the PCFG language model induced from those trees.</S>
			<S sid ="19" ssid = "19">For example, a PCFG induced from a corpus of completely flat trees (i.e., consisting of the root node immediately dominating a string of terminals) generates precisely the strings of training corpus with likelihoods equal to their relative frequencies in that corpus.</S>
			<S sid ="20" ssid = "20">Thus the location and labeling on the nonroot nonterminal nodes determine how a PCFG induced from a treebank generalizes from that training data.</S>
			<S sid ="21" ssid = "21">Generally, one might expect that the fewer the nodes in the training corpus trees, the weaker the independence assumptions in the induced language model.</S>
			<S sid ="22" ssid = "22">For this reason, a &quot;flat&quot; tree representation of PP modification is investigated here as well.</S>
			<S sid ="23" ssid = "23">A second method of relaxing the independence assumptions implicit in a PCFG is to encode more information in each node&apos;s label.</S>
			<S sid ="24" ssid = "24">Here the intuition is that the label on a node is a &quot;communication channel&quot; that conveys information between the subtree dominated by the node and the part of the tree not dominated by this node, so all other things being equal, appending to the node&apos;s label additional information about the context in which the node appears should make the independence assumptions implicit in the PCFG model weaker.</S>
			<S sid ="25" ssid = "25">The effect of adding a particularly simple kind of contextual information-the category of the node&apos;s parent-is also studied in this paper.</S>
			<S sid ="26" ssid = "26">Whether either of these two PCFG models outperforms a PCFG induced from the original treebank is a separate question.</S>
			<S sid ="27" ssid = "27">We face a classical &quot;bias versus variance&quot; dilemma here (Geman, Bienenstock, and Doursat 1992): as the independence assump­ tions implicit in the PCFG model are weakened, the number of parameters that must be estimated (i.e., the number of productions) increases.</S>
			<S sid ="28" ssid = "28">Thus while moving to a class of models with weaker independence assumptions permits us to more accurately de­ scribe a wider class of distributions (i.e., it reduces the bias implicit in the estimator), in general our estimate of these parameters will be less accurate simply because there are more of them to estimate from the same data (i.e., the variance in the estimator increases).</S>
			<S sid ="29" ssid = "29">This paper studies the effects of these differing tree representations of PP modifi­ cation theoretically by considering their effect on very simple corpora, and empirically by means of a tree transformation/ detransformation methodology introduced below.</S>
			<S sid ="30" ssid = "30">The corpus used as the source for the empirical study is version II of the Wall Street Journal (WSJ) corpus constructed at the University of Pennsylvania, modified as de­ scribed in Charniak (1996), in that: • root nodes (labeled ROOT) were inserted, • the terminal or lexical items were deleted (i.e., the terminal items in the trees were POS tags), • node labels consisted solely of syntactic category information (e.g., grammatical function and coindexation information was removed), • the POS tag of auxiliary verbs was replaced with AUX, • empty nodes (i.e., nodes dominating the empty string) were deleted, and • any resulting unary branching nodes dominating a single child with the same node label (i.e., which are expanded by a production X ---....</S>
			<S sid ="31" ssid = "31">X) were deleted.</S>
	</SECTION>
	<SECTION title="PCFG  Models  of  Tree Structures. " number = "2">
			<S sid ="32" ssid = "1">The theory of PCFGs is described elsewhere (e.g., Charniak [1993]), so it is only sum­ marized here.</S>
			<S sid ="33" ssid = "2">A PCFG is a CFG in which each production A ---.... a in the grammar&apos;s set of productions P is associated with an emission probability P( A ---.... a) that satisfies a normalization constraint a:A-,aEP P( A ---....</S>
			<S sid ="34" ssid = "3">0:) = 1 and a consistency or tightness constraint not discussed here, that PCFGs estimated from tree banks using the relative frequency estimator always satisfy (Chi and Geman 1998).</S>
			<S sid ="35" ssid = "4">A PCFG defines a probability distribution over the (finite) parse trees generated by the grammar, where the probability of a tree T is given by P(T ) = 11 P( A ---.... af r ( A-+a ) A-&gt;a EP where Cr (A ---.... a) is the number of times the production A ---.... a is used in the derivation T. The PCFG that assigns maximum likelihood to the sequence i of trees in a treebank corpus is given by the relative frequency estimator.</S>
			<S sid ="36" ssid = "5">f&gt;.;c ( A ---....</S>
			<S sid ="37" ssid = "6">0:) = Cr (A ---.... a) &apos;I:a&apos;E(NuT)• Cr (A ---.... a&apos; ) Here Cr (A ---.... a) is the number of times the production A ---.... a is used in derivations of the trees in i. This estimation procedure can be used in a broad-coverage parsing procedure as follows: A PCFG G is estimated from a treebank corpus r of training data.</S>
			<S sid ="38" ssid = "7">In the work presented here the actual lexical items (words) are ignored, and the terminals of the trees are taken to be the part-of-speech (POS) tags assigned to the lexical items.</S>
			<S sid ="39" ssid = "8">Given a sequence of POS tags to be analyzed, a dynamic programming method based on the CKY algorithm (Aho and Ullman 1972) is used to search for a maximum-likelihood parse using this PCFG.</S>
	</SECTION>
	<SECTION title="Tree Representations  of Linguistic Constructions. " number = "3">
			<S sid ="40" ssid = "1">For something so apparently fundamental to syntactic research, there is considerable disagreement among linguists as to just what the right tree structure analysis of var­ ious linguistic constructions ought to be.</S>
			<S sid ="41" ssid = "2">Figure 1 shows some of the variation in PP modification structures postulated in generative syntactic approaches over the past 30 years.</S>
			<S sid ="42" ssid = "3">The flat attachment structure was popular in the early days of transformational grammar, and is used to represent VPs in the WSJ corpus.</S>
			<S sid ="43" ssid = "4">In this representation both VP Verb NP PP PP I I ate dinner on the table with a fork Flat representation-----VP VP PP ...----..... with a fork VP VP PP PP VI eIP on the table with a f ark Vyb Nr on the table ate dinner Adjunction representation ate dinner Two level representation Figure 1 Different tree representations of PP modification.</S>
			<S sid ="44" ssid = "5">arguments and adjuncts are sisters to the lexical head, and so are not directly distin­ guished in the tree structure.</S>
			<S sid ="45" ssid = "6">The adjunction representation was introduced by Chomsky (it is often called &quot;Chomsky adjunction&quot;); in that representation arguments are sisters to the lexical head, while adjuncts are adjoined as sisters to a phrasal node: either a maximal pro­ jection (as shown in Figure 1) or a &quot;1-bar&quot; projection in the &quot;X-bar&quot; theory of grammar and its descendants.</S>
			<S sid ="46" ssid = "7">The third representation depicted in Figure 1 is a mixed representation in which phrases with adjuncts have exactly two levels of phrasal projection.</S>
			<S sid ="47" ssid = "8">The lower level contains the lexical head, and all adjuncts are attached as sisters to a maximal projection at the higher level.</S>
			<S sid ="48" ssid = "9">To a first approximation, this is the representation used for NPs with PP modifiers or complements in the WSJ corpus used in this study.1 If the standard linguistic intuition that the number of PP modifiers permitted in natural language is unbounded is correct, then only the Chomsky adjunction repre­ sentation trees can be generated by a CFG, as the other two representations depicted in Figure 1require a different production for each possible number of PP modifiers.</S>
			<S sid ="49" ssid = "10">For example, the rule schema VP , V NP PP*, which generates the flat attachment structure, abbreviates an infinite number of CF productions.</S>
			<S sid ="50" ssid = "11">In addition, if a treebank using the two-level representation contains at least one node with a single PP modifier, then the PCFG induced from it will generate Chomsky adjunction representations of multiple PP modification, in addition to the two-level representations used in the treebank.</S>
			<S sid ="51" ssid = "12">(Note that this is not a criticism of the use of this representation in a treebank, but of modeling such a representation with a PCFG).</S>
			<S sid ="52" ssid = "13">This raises the question: how should a parse tree be interpreted that does not fit the representational scheme used to construct the treebank training data?</S>
			<S sid ="53" ssid = "14">1The Penn treebank annotation conventions are described in detail in Bies et al.</S>
			<S sid ="54" ssid = "15">(1995).</S>
			<S sid ="55" ssid = "16">The two-level representation arises from the conventions that &quot;postmodifiers are Chomsky-adjoined to the phrase they modify&quot; (11.2.1.1) and that &quot;consecutive unrelated adjuncts are non-recursively attached to the NP they modify&quot; (11.2.1.3.a) (parenthetical material identifies relevant subsections in Bies et al. [1995]).</S>
			<S sid ="56" ssid = "17">Arguments are not systematically distinguished from adjunct PPs, and &quot;only clausal complements of NP are placed inside [the innermost] NP&quot; as a sister of the head noun.</S>
			<S sid ="57" ssid = "18">However, because certain constructions are encoded recursively, such as appositives, emphatic reflexives, phrasal titles, etc., it is possible for NPs with more than two levels of structure to appear.</S>
			<S sid ="58" ssid = "19">As noted above, the WSJ corpus represents PP modification to NPs using the two­ level representation.</S>
			<S sid ="59" ssid = "20">The PCFG estimated from sections 221 of this corpus contains the following two productions: P(NP , NP PP) P(NP , NP PP PP) 0.112 0.006 These productions generate the two-level representations of one and two PP adjunc­ tions to NP, as explained above.</S>
			<S sid ="60" ssid = "21">However, the second of these productions will never be used in a maximum-likelihood parse, as the parse of sequence NP PP PP involving two applications of the first rule has a higher estimated likelihood.</S>
			<S sid ="61" ssid = "22">In fact, all of the productions of the form NP , NP ppn where n &gt; 1in the PCFG induced from sections 221 of the WSJ corpus are subsumed by the NP ---, NP PP production in this way.</S>
			<S sid ="62" ssid = "23">Thus PP adjunctions to NP in the maximum-likelihood parses using this PCFG always appear as Chomsky adjunctions, even though the original treebank uses a two-level representation!</S>
			<S sid ="63" ssid = "24">A large number of productions in the PCFG induced from sections 221 of the WSJ corpus are subsumed by higher-likelihood combinations of shorter, higher-prob­ ability productions.</S>
			<S sid ="64" ssid = "25">Of the 14,962 productions in the PCFG, 1,327 productions, or just under 9%, are subsumed by combinations of two or more productions.</S>
			<S sid ="65" ssid = "26">2 Since the subsumed productions are never used to construct a maximum-likelihood parse, they can be ignored if only maximum-likelihood parses are required.</S>
			<S sid ="66" ssid = "27">Moreover, since these subsumed productions tend to be longer than the productions that subsume them, removing them from the grammar reduces the average parse time of the exhaustive PCFG parser used here by more than 9%.</S>
			<S sid ="67" ssid = "28">Finally, note that the overgeneration of the PCFG model of the two-level adjunc­ tion structures is due to an independence assumption implicit in the PCFG model; specifically, that the upper and lower NPs in the two-level structure have the same expansions, and that these expansions have the same distributions.</S>
			<S sid ="68" ssid = "29">This assumption is clearly incorrect for the two-level tree representations.</S>
			<S sid ="69" ssid = "30">If we systematically relabel one of these NPs with a fresh label, then a PCFG induced from the resulting transformed treebank no longer has this property.</S>
			<S sid ="70" ssid = "31">The &quot;parent annotation&quot; transform discussed below, which appends the category of a parent node onto the label of all of its nonter­ minal children as sketched in Figure 2, has just this effect.</S>
			<S sid ="71" ssid = "32">Charniak and Carroll (1994) describe this transformation as adding &quot;pseudo context-sensitivity&quot; to the language model because the distribution of expansions of a node depends on nonlocal context, viz,, the category of its parent.3 This nonlocal information is sufficient to distinguish the upper and lower NPs in the structures considered here.</S>
			<S sid ="72" ssid = "33">Indeed, even though the PCFG estimated from the trees obtained by applying the &quot;parent annotation&quot; transformation to sections 221 of the WSJ corpus contains 22,773 productions (i.e., 7,811 more than the PCFG estimated from the untransformed corpus), only 965 of them, or just over 4%, are subsumed by two or more other productions.</S>
			<S sid ="73" ssid = "34">2 These were found by parsing the right-hand side f} of each production A --&gt; f} with the treebank.</S>
			<S sid ="74" ssid = "35">grammar: if a higher-likelihood derivation A --&gt;+ f} can be found then the production is subsumed.</S>
			<S sid ="75" ssid = "36">As a CL reviewer points out, Krotov et al.</S>
			<S sid ="76" ssid = "37">(1997) investigate rule redundancy in CFGs estimated from treebanks.</S>
			<S sid ="77" ssid = "38">They discussed, but did not investigate, rule subsumption in treebank PCFGs.</S>
			<S sid ="78" ssid = "39">3 The parser described by Magerman and Marcus (1991) also made use of this &quot;parent&quot; information..</S>
			<S sid ="79" ssid = "40">(a) VP A V NP NP PP A A Det N P NP A Det N (b) vp·s V N P &apos; V P N P &apos; N P P P &apos; N P A Det N P NP&apos;PP A Det N Figure 2 Trees before and after &quot;parent annotation.&quot;</S>
			<S sid ="80" ssid = "41">Note that while the PCFG induced from tree (a) can generate Chomsky adjunction structures because it contains the production NP-+NP PP, the PCFG induced from tree (b) can only generate two-level NPs.</S>
	</SECTION>
	<SECTION title="A Theoretical  Investigation  of  Alternative  Tree Structures" number = "4">
			<S sid ="81" ssid = "1">We can gain some theoretical insight into the effect that different tree representations have on PCFG language models by considering several artifical corpora whose esti­ mated PCFGs are simple enough to study analytically.</S>
			<S sid ="82" ssid = "2">PP attachment was chosen for investigation here because the alternative structures are simple and clear, but presum­ ably the same points could be made for any construction that has several alternative tree representations.</S>
			<S sid ="83" ssid = "3">Correctly resolving PP attachment ambiguities requires informa­ tion, such as lexical information (Hindle and Rooth 1993), that is simply not available to the PCFG models considered here.</S>
			<S sid ="84" ssid = "4">Still, one might hope that a PCFG model might be able to accurately reflect general statistical trends concerning attachment preferences in the training data, even if it lacks the information to correctly resolve individual cases.</S>
			<S sid ="85" ssid = "5">But as the analysis in this section makes clear, even this is not always obtained.</S>
			<S sid ="86" ssid = "6">For example, suppose our corpora only contain two trees, both of which have yields V Det N P Det N, are always analyzed as a VP with a direct object NP and a PP, and differ only as to whether the PP modifies the NP or the VP.</S>
			<S sid ="87" ssid = "7">The corpora differ as to how these modifications are represented as trees.</S>
			<S sid ="88" ssid = "8">The dependencies in these corpora (specifically, the fact that the PP is either attached to the NP or to the VP) violate the independence assumptions implicit in a PCFG model, so one should not expect a PCFG model to exactly reproduce any of these corpora.</S>
			<S sid ="89" ssid = "9">As a CL reviewer points out, the results presented here depend on the assumption that there is exactly one PP.</S>
			<S sid ="90" ssid = "10">Nevertheless, the analysis of these corpora highlights two important points: • the choice of tree representation can have a noticable effect on the performance of a PCFG language model, and • the accuracy of a PCFG model can depend not just on the trees being modeled, but on their frequency.</S>
			<S sid ="91" ssid = "11">4.1 The Penn II Representations.</S>
			<S sid ="92" ssid = "12">Suppose we train a PCFG on a corpus 7&apos;1 consisting only of two different tree structures: the NP attachment structure labeled (A1) and the VP attachment tree labeled (B1) depicted in Figure 3.</S>
			<S sid ="93" ssid = "13">These trees are called the &quot;Penn II&quot; tree representations here because these are the representations used to encode PP modification in version II of the WSJ corpus constructed at the University of Pennsylvania.</S>
			<S sid ="94" ssid = "14">Suppose that (A1) VP V NP NP PP A Det N P NP Det N (B1) VP V NP PP A Det N P NP Det N Figure 3 The training corpus i&apos;i.</S>
			<S sid ="95" ssid = "15">This corpus, which uses Penn II tree representations, consists of the trees (A1) with relative frequency f and the trees (B1) with relative frequency 1-f.</S>
			<S sid ="96" ssid = "16">The PCFG :i\ is estimated from this corpus.</S>
			<S sid ="97" ssid = "17">occurs in the corpus with relative frequency f and (B1) occurs with relative frequency 1-f.</S>
			<S sid ="98" ssid = "18">In fact, in the WSJ corpus, structure (A1) occurs 7,033 times in sections 221 and 279 times in section 22, while structure (B1) occurs 7,717 times in sections 221 and 299 times in section 22.</S>
			<S sid ="99" ssid = "19">Thus f 0.48 in both the F221 subcorpora and the F22 corpus.</S>
			<S sid ="100" ssid = "20">Returning to the theoretical analysis, the relative frequency counts C1 and the nonunit production probability estimates :i\ for the PCFG induced from this two-tree corpus are as follows: Of course, in a real treebank the counts of all these productions would also include their occurrences in other constructions, so the theoretical analysis presented here is but a crude idealization.</S>
			<S sid ="101" ssid = "21">Empirical studies using actual corpus data are presented in Section 5.</S>
			<S sid ="102" ssid = "22">Thus the estimated likelihoods usingi\ of the tree structures (A1) and (B1) are: 4/2 (2 + f )3 4 (1 -f ) (2 +j )Z . Clearly P1 (A1) &lt; f and P1(B1) &lt; (1 -f ) except at f = 0 and f = 1, so in general the estimated frequencies using P1 differ from the frequencies of (A1) and (B1) in the training corpus.</S>
			<S sid ="103" ssid = "23">This is not too surprising, as the PCFG P1 assigns nonzero probability to trees not in the training corpus (e.g., to trees with more than one PP).</S>
			<S sid ="104" ssid = "24">Inany case, in the parsing applications mentioned earlier the absolute magnitude of the probability of a tree is not of direct interest; rather we are concerned with its probability relative to the probabilities of other, alternative tree structures for the same yield.</S>
			<S sid ="105" ssid = "25">Thus it is arguably more reasonable to ignore the &quot;spurious&quot; tree structures 1 0.8 0.6 0.4 0.2 0 0 0.2 0.4 0.6 0.8 1 f Figure 4 The estimated relative frequency J of NP attachment.</S>
			<S sid ="106" ssid = "26">This graph shows J as a function of the relative frequency f of NP attachment in the training data for various models discussed in the text.</S>
			<S sid ="107" ssid = "27">generated by f\ but not present in the training corpus, and compare the estimated relative frequencies of (A1) and (B1) under 1\ to their frequencies in the training data.</S>
			<S sid ="108" ssid = "28">Ideally the estimated relative frequency Ji of (A1) ]i 1\ (T = A1 : T E {A1,B1}) l\ (A1) I\ (A1) + I\ (B1) _f_ 2 -f will be close to its actual frequency f in the training corpus.</S>
			<S sid ="109" ssid = "29">The relationship between f and Ji is plotted in Figure 4.</S>
			<S sid ="110" ssid = "30">As inspection of Figure 4 makes clear, the value of ]1 can diverge substantially from f.For example, at f = 0.48 (the estimate obtained from the WSJ corpus presented above) ]1 = 0.15.</S>
			<S sid ="111" ssid = "31">Thus a PCFG language model induced from the simple two-tree corpus above can underestimate the relative frequency of NP attachment by a factor of more than 3.</S>
			<S sid ="112" ssid = "32">4.2 Chomsky Adjunction Representations.</S>
			<S sid ="113" ssid = "33">Now suppose that the corpus contains the following two trees (A2) and (B2) of Fig­ ure 5, which are the Chomsky adjunction representations of NP attached and VP attached PP&apos;s, respectively, with relative frequencies f and 1-f as before.</S>
			<S sid ="114" ssid = "34">Note that unlike the Penn II representations, the Chomsky adjunction representation represents NP and VP modification by PPs symmetrically.</S>
			<S sid ="115" ssid = "35">VP A V NP NP PP A A Det N P NP A Det N (B2 ) VP VP PP A A V NP P NP A A Det N Det N Figure 5 The training corpus 72.</S>
			<S sid ="116" ssid = "36">This two-tree corpus, which uses Chomsky adjunction tree representations, consists of the trees (A2 ) with relative frequency f and the trees (82) with relative frequency 1-f.</S>
			<S sid ="117" ssid = "37">The PCFG P2 is estimated from this corpus.</S>
			<S sid ="118" ssid = "38">The counts C2 and the nonunit production probability estimates P2 for the PCFG induced from this two-tree corpus are as follows: R C2(R) P2(R) VP --+ V NP 1 1/(2 -f) VP --+ VP PP 1-f (1 -f )/ ( 2 -J) NP --+ Det N NP --+ NP PP 2 f 2/(2 +J) J/(2 +J) The estimated likelihoods using P2 of the tree structures (A2) and (B2) are: P2(A2) 4 f (4 -/2)(2 +!)2 4 (1 -f ) (4J2)2 As in the previous subsection, P2 (A2) &lt;J and P2(B2) &lt; (1 -f ) because the PCFG assigns nonzero probability to trees not in the training corpus.</S>
			<S sid ="119" ssid = "39">Again, we calculate the estimated relative frequencies of (A2 ) and (B2) under Pz.</S>
			<S sid ="120" ssid = "40">]2 P2(r = Az : T E {A2,B2}) f22f = 2/2 -J - 2 The relationship between f and}z is also plotted in Figure 4.</S>
			<S sid ="121" ssid = "41">The value of]2 can diverge fromf, although not as widely as]1.</S>
			<S sid ="122" ssid = "42">For example, atf = 0.48]2 = 0.36.</S>
			<S sid ="123" ssid = "43">Thus the precise tree structure representations used to train a PCFG can have a marked effect on the probability distribution that it generates.</S>
			<S sid ="124" ssid = "44">4.3 Flattened Tree Representations.</S>
			<S sid ="125" ssid = "45">The previous subsection showed that inserting additional nodes into the tree structure can result in a PCFG language model that better models the distribution of trees in the training corpus.</S>
			<S sid ="126" ssid = "46">This subsection investigates the effect of removing the lower NP node in the WSJ NP modification structure, again resulting in a pair of more symmetric tree VP A V NP (B3 ) VP V NP PP Det N PP A P NP Det N Det N A P NP Det N Figure 6 The training corpus r3• The NP modification tree representation used in the Penn II WSJ corpus is &quot;flattened&quot; to make it similar to the VP modification representation.</S>
			<S sid ="127" ssid = "47">The PCFG P3 is estimated from this corpus.</S>
			<S sid ="128" ssid = "48">structures, as shown in Figure 6.</S>
			<S sid ="129" ssid = "49">As explained in Section 1, flattening the tree structures in general corresponds to weakening the independence assumptions in the induced PCFG models, so one might expect this to improve the induced language model.</S>
			<S sid ="130" ssid = "50">The counts C3 and the nonunit production probability estimates 1\ for the PCFG induced from this two-tree corpus are as follows: The estimated likelihoods using 1\ of the tree structures (A3) and (83 ) are: 2 (1-f /2) (1 -f) (1-f /2)2 As before P3 (A3) &lt;f and P3 (83) &lt; (1-f ), again because the PCFG assigns nonzero probability to trees not in the training corpus.</S>
			<S sid ="131" ssid = "51">The estimated relative frequency 13 of (A3) relative to (83) under 1\ is: 13 P3(T = A3 : T E {A3,83}) f2 23f + 2/2 The relationship between f and }3 is also plotted in Figure 4.</S>
			<S sid ="132" ssid = "52">The value of j3 di­ verges from f , as before: at f = 0.48]3 = 0.23.</S>
			<S sid ="133" ssid = "53">As Figure 4 shows, the estimated relative frequency 13 using the flattened tree representations is always closer to f than the es­ timated relative frequency ]1 using the Penn II representations, but is only closer to f than the estimated relative frequency]2 using the Chomsky adjunction representations for f greater than approximately 0.7.</S>
			<S sid ="134" ssid = "54">VP&apos;S /&quot;---.</S>
			<S sid ="135" ssid = "55">V NP&apos;VP NP&apos;NP PP&apos;NP Det N P NP&apos;PP A Det N (B4 ) VP&apos;S r _ V NP&apos;VP PP&apos;VP A Det N P · NP&apos;PP A Det N Figure 7 The training corpus 1\.This corpus, which uses Penn II treebank tree representtions in which each preterminal node&apos;s parent&apos;s category is appended onto its own label, consists of the trees (A4) with relative frequency f and the trees (B4) with relative frequency 1-f . The PCFGi\ is estimated from this corpus.</S>
			<S sid ="136" ssid = "56">4.4 Penn II Representations with Parent Annotation.</S>
			<S sid ="137" ssid = "57">As mentioned in Section l, another way of relaxing the independence assumptions implicit in a PCFG model is to systematically encode more information in node labels about their context.</S>
			<S sid ="138" ssid = "58">This subsection explores a particularly simple kind of contextual encoding: the label of the parent of each nonroot nonpreterminal node is appended to that node&apos;s label.</S>
			<S sid ="139" ssid = "59">The labels of the root node and the terminal and preterminal nodes are left unchanged.</S>
			<S sid ="140" ssid = "60">For example, assuming that the Penn II format trees (A1) and (B1) of Section 4.1 are immediately dominated by a node labeled S, this relabeling applied to those trees produces the trees () and (B4 ) depicted in Figure 7.</S>
			<S sid ="141" ssid = "61">We can perform the same theoretical analysis on this two-tree corpus that we applied to the previous corpora to investigate the effect of this relabeling on the PCFG modeling of PP attachment structures.</S>
			<S sid ="142" ssid = "62">The counts C4 and the nonunit production probability estimates P4 for the PCFG induced from this two-tree corpus are as follows: The estimated likelihoods using f&gt;4 of the tree structures () and (B4) are: P4(A4) = J2 f&gt;4(B4) (1 -!)2 As in the previous subsection P4 (A4 ) &lt;J and P4(B4) &lt; (l -f ).</S>
			<S sid ="143" ssid = "63">Again, we calculate the estimated relative frequencies of (A4) and (B4) under P4.</S>
			<S sid ="144" ssid = "64">14 f&gt;4 (T = A4 : T E {A4, B4}) J2 J2 + (1 -J)2 The relationship between f and 14 is plotted in Figure 4.</S>
			<S sid ="145" ssid = "65">The value of 14 can diverge from f , just like the other estimates.</S>
			<S sid ="146" ssid = "66">For example, at f = 0.4814 = 0.46, which is closer to f than any of the other relative frequency estimates presented earlier.</S>
			<S sid ="147" ssid = "67">(However, for f less than approximately 0.38, the relative frequency estimate using the Chomsky adjunction representations ]2 is closer to f than}4).</S>
			<S sid ="148" ssid = "68">Thus as expected, increasing the context information in the form of an enriched node-labeling scheme can improve the performance of a PCFG language model.</S>
	</SECTION>
	<SECTION title="Empirical  Investigation  of Different Tree Representations. " number = "5">
			<S sid ="149" ssid = "1">The previous section presented theoretical evidence that varying the tree representa­ tions used to estimate a PCFG language model can have a noticeable impact on that model&apos;s performance.</S>
			<S sid ="150" ssid = "2">However, as anyone working with statistical language models knows, the actual performance of a language model on real language data can often differ dramatically from one&apos;s expectations, even when it has an apparently impeccable theoretical basis.</S>
			<S sid ="151" ssid = "3">For example, on the basis of the theoretical models presented in the last section (and, undoubtedly, a background in theoretical linguistics) I expected that PCFG models induced from Chomksy adjunction tree representations would perform better than models induced from the Penn II representations.</S>
			<S sid ="152" ssid = "4">However, as shown in this section, this is not the case, but some of the other tree representations investigated here induce PCFGs that do perform noticeably better than the Penn II representations.</S>
			<S sid ="153" ssid = "5">It is fairly straightforward to mechanically transform the Penn II tree representa­ tions in the WSJ corpus into something close to the alternative tree representations described above, although the diversity of local trees in the WSJ corpus makes this task more difficult.</S>
			<S sid ="154" ssid = "6">For example, what is the Chomsky adjunction representation of a VP with no apparent verbal head?</S>
			<S sid ="155" ssid = "7">In addition, the Chomsky adjunction representa­ tion requires argument PPs to be attached as sisters of the lexical head, while adjunct PPs are attached as sisters of a nonlexical projection.</S>
			<S sid ="156" ssid = "8">Argument PPs are not systemat­ ically distinguished from adjunct PPs in the Penn II tree representations, and reliably determining whether a particular PP is an argument or an adjunct is extremely dif­ ficult, even for trained linguists.</S>
			<S sid ="157" ssid = "9">Nevertheless, the tree transformations investigated below should give at least an initial idea as to the influence of different kinds of tree representation on the induced PCFG language models.</S>
			<S sid ="158" ssid = "10">5.1 The Tree Transformations.</S>
			<S sid ="159" ssid = "11">The tree transformations investigated in this section are listed below.</S>
			<S sid ="160" ssid = "12">Each is given a short name, which is used to identify it in the rest of the paper.</S>
			<S sid ="161" ssid = "13">Designing the tree transformations is complicated by the fact that there are in general many different tree transformations that correctly transform the simple cases discussed in Section 4, but behave differently on more complex constructions that appear in the WSJ corpus.</S>
			<S sid ="162" ssid = "14">The actual transformations investigated here have the advantage of simplicity, but many other different transformations would correctly transform the trees discussed in Sections 3 and 4 and be just as linguistically plausible as the transforms below, yet . would presumably induce PCFGs with very different properties.</S>
			<S sid ="163" ssid = "15">Id is an identity transformation, i.e., it does not modify the trees at all.</S>
			<S sid ="164" ssid = "16">This condition studies the behavior of the Penn II tree representation used in the WSJ corpus.</S>
			<S sid ="165" ssid = "17">NPVP produces trees that represent PP modification of both NPs and VPs using Chomsky adjunction.</S>
			<S sid ="166" ssid = "18">The NPVP transform is the result of exhaustively NP NP NP NP =} , NP, PPr.</S>
			<S sid ="167" ssid = "19">NP&apos; PP NP a PP 6 NP a PP &apos; 6 6 VP VP VP VP=} =} r. /3 PP &apos; Q 6 6 rVP&apos;PP VP&apos; PP 6 Figure 8 Producing Chomsky adjunction tree representations.</S>
			<S sid ="168" ssid = "20">The four tree transforms depicted here are exhaustively reapplied to produce the Chomsky adjunction tree representations from Penn II tree representations in the NPVP transformation.</S>
			<S sid ="169" ssid = "21">In the N&apos;-V&apos; transformation the boxed NP and VP nodes are relabeled with N&apos; and V&apos; respectively.</S>
			<S sid ="170" ssid = "22">In these schema a is a sequence of trees of length 1 or greater and f3 is a sequence of trees of length 2 or greater.</S>
			<S sid ="171" ssid = "23">applying all four of the tree transforms depicted in Figure 8.</S>
			<S sid ="172" ssid = "24">The first and fourth transforms turn NP and VP nodes whose rightmost child is a PP into Chomsky adjunction structures, and the second and third transforms adjoin final PPs with a following comma punctuation into Chomsky ad­ junction structures.</S>
			<S sid ="173" ssid = "25">The constraints that a &gt; 1and (3 &gt; 2 ensures that these transforms will only apply a finite number of time to any given subtree.</S>
			<S sid ="174" ssid = "26">N&apos;-V&apos; produces trees that represent PP modification of NPs and VPs with a Chom­ sky adjunction representation that uses an intermediate level of X&apos; struc­ ture.</S>
			<S sid ="175" ssid = "27">This is the result of repeatedly applying the four transformations de­ picted in Figure 8 as in the NPVP transform, with the modification that the new nonmaximal nodes are labeled N&apos; or V&apos; as appropriate (rather than NP or VP).</S>
			<S sid ="176" ssid = "28">Flatten produces trees in which NPs have a flatter structure than the two-level representation of NPs used in the Penn II treebank.</S>
			<S sid ="177" ssid = "29">Only subtrees con­ sisting of a parent node labeled NP whose first child is also labeled NP are affected by this transformation.</S>
			<S sid ="178" ssid = "30">The effect of this transformation is to excise all the children nodes labeled NP from the tree, and to attach their children as direct descendants of the parent node, as depicted in the schema below.</S>
			<S sid ="179" ssid = "31">Parent appends to each nonroot nonterminal node&apos;s label its parent&apos;s category.</S>
			<S sid ="180" ssid = "32">The effect of this transformation is to produce trees of the kind discussed in Section 4.4.</S>
			<S sid ="181" ssid = "33">5.2 Evaluation of Parse Trees.</S>
			<S sid ="182" ssid = "34">It is straightforward to estimate PCFGs using the relative frequency estimator from the sequences of trees produced by applying these transforms to the WSJ corpus.</S>
			<S sid ="183" ssid = "35">We turn now to the question of evaluating the different PCFGs so obtained.</S>
			<S sid ="184" ssid = "36">None of the PCFGs induced from the various tree representations discussed here reliably identifies the correct tree representations on sentences from held-out data.</S>
			<S sid ="185" ssid = "37">It is standard to evaluate broad-coverage parsers using less-stringent criteria that measure how similiar the trees produced by the parser are to the &quot;correct&quot; analysis trees in a portion of the treebank held out for testing purposes.</S>
			<S sid ="186" ssid = "38">This study uses the 1,578 sentences in section 22 of the WSJ corpus of length 40 or less for this purpose.</S>
			<S sid ="187" ssid = "39">The labeled precision and recall figures are obtained by regarding the sequence of trees T produced by a parser as a multiset or bag E(f ) of edges, i.e., triples (N,Z, r) where N is a nonterminal label and l and r are left and right string positions in yield of the entire corpus.</S>
			<S sid ="188" ssid = "40">(Root nodes and preterminal nodes are not included in these edge sets, as they are given as input to the parser).</S>
			<S sid ="189" ssid = "41">Relative to a test sequence of trees f &apos; (here section 22 of the WSJ corpus) the labeled precision and recall of a sequence of trees T with the same yield as f &apos; are calculated as follows, where the n operation denotes multiset intersection.</S>
			<S sid ="190" ssid = "42">Precision( f ) Recall(f ) I E(f ) n E(f&apos;) I IE(f ) j I E(f ) n E(f &apos;)I I E(f &apos;)I Thus, precision is the fraction of edges in the tree sequence to be evaluated that also appear in the test tree sequence, and recall is the fraction of edges in the test tree sequence that also appear in tree sequence to be evaluated.</S>
			<S sid ="191" ssid = "43">It is straightforward to use the PCFG estimation techniques described in Section 2 to estimate PCFGs from the result of applying these transformations to sections 221 of the Penn II WSJ corpus.</S>
			<S sid ="192" ssid = "44">The resulting PCFGs can be used with a parser to obtain maximum-likelihood parse trees for the POS tag yields of the trees of the held­ out test corpus (section 22 of the WSJ corpus).</S>
			<S sid ="193" ssid = "45">While the resulting parse trees can be compared to the trees in the test corpus using the precision and recall measures described above, the results would not be meaningful as the parse trees reflect a different tree representation to that used in the test corpus, and thus are not directly comparable with the test corpus trees.</S>
			<S sid ="194" ssid = "46">For example, the node labels used in the PCFG induced from trees produced by applying the parent transform are pairs of categories from the original Penn II WSJ tree bank, and so the labeled precision and recall measures obtained by comparing the parse trees obtained using this PCFG with the trees from the tree bank would be close to zero.</S>
			<S sid ="195" ssid = "47">One might try to overcome this by applying the same transformation to the test trees as was used to obtain the training trees for the PCFG, but then the resulting precision and recall measures would not be comparable across transformations.</S>
			<S sid ="196" ssid = "48">For example, as two different Penn II format trees may map to the same flattened tree, the flatten transformation is in general not invertible.</S>
			<S sid ="197" ssid = "49">Thus a parsing system that produces perfect flat tree representations provides less information than one that produces per­ fect Penn II tree representations, and one might expect that all else being equal, a WSJ 221 trees Transform Transformed trees Count local trees Yield PCFG n Parse WDSJ 22 tcees c:::) WSJ 22 st,ings c:::) Parnes Pmision/Recall \ Detrnnsfo,med pacses Evaluation Figure 9 The tree transformation/detransformation process.</S>
			<S sid ="198" ssid = "50">parsing system using flat representations will score higher (or at least differently) in terms of precision and recall than an equivalent one producing Penn II representations.</S>
			<S sid ="199" ssid = "51">The approach developed here overcomes this problem by applying an additional tree transformation step that converts the parse trees produced using the PCFG back to the Penn II tree representations, and compares these trees to the held-out test trees using the labeled precision and recall trees.</S>
			<S sid ="200" ssid = "52">This transformation/ detransformation pro­ cess is depicted in Figure 9.</S>
			<S sid ="201" ssid = "53">It has the virtue that all precision and recall measures involve trees using the Penn II tree representations, but it does involve an additional detransformation step.</S>
			<S sid ="202" ssid = "54">It is straightforward to define detransformers for all of the tree transformations described in this section except for the flattening transform.</S>
			<S sid ="203" ssid = "55">The difficulty in this case is that several different Penn II format trees may map onto the same flattened tree, as mentioned above.</S>
			<S sid ="204" ssid = "56">The detransformer for the flattening transform was obtained by recording for each distinct local tree in the flattened tree representation of the training corpus the various tree fragments in the Penn II format training corpus it could have been derived from.</S>
			<S sid ="205" ssid = "57">The detransformation of a flattened tree is effected by replacing each local tree in the parse tree with its most frequently occuring Penn II format fragment.</S>
			<S sid ="206" ssid = "58">This detransformation step is in principle an additional source of error, in that a parser could produce flawless parse trees in its particular tree representation, but the transformation to the corresponding Penn II tree representations might itself introduce errors.</S>
			<S sid ="207" ssid = "59">For example, it might be that several different Penn II tree representations can correspond to a. single parse tree, as is the case with a parser producing flattened tree representations.</S>
			<S sid ="208" ssid = "60">To determine if detransformation can be done reliably, for each tree transformation, labeled precision and recall measures were calculated comparing the result of applying the transformation and the corresponding detransformation to the Table 1 The results of an empirical study of the effect of tree structure on PCFG models.</S>
			<S sid ="209" ssid = "61">Each column corresponds to a sequence of trees, either consisting of section 22 of the WSJ corpus or transforms of the maximum-likelihood parses of the yields of the section 22 subcorpus with respect to different PCFGs, as explained in the text.</S>
			<S sid ="210" ssid = "62">The first row reports the number of productions in these PCFGs, and the next two rows give the labeled precision and recall of these sequences of trees.</S>
			<S sid ="211" ssid = "63">The last four rows report the number of times particular kinds of subtrees appear in these sequences of trees, as explained in the text.</S>
			<S sid ="212" ssid = "64">22 22 Id. Id NPVP N&apos;-V&apos; Flatten Parent Number of rules 2,269 14,962 14,297 14,697 22,652 22,773 Precision 1 0.772 0.735 0.730 0.735 0.745 0.800 Recall 1 0.728 0.697 0.705 0.701 0.723 0.792 NP attachments 279 0 67 330 69 154 217 VP attachments 299 424 384 0 503 392 351 NP* attachments 339 3 67 399 69 161 223 VP* attachments 412 668 662 150 643 509 462 test corpus trees with the original trees of the test corpus.</S>
			<S sid ="213" ssid = "65">In all cases except for the flat­ tening transform these precision and recall measures were always greater than 99.5%, indicating that the transformation/ detransformation process is quite reliable.</S>
			<S sid ="214" ssid = "66">For the flattening transform the measures were greater than 97.5%, suggesting that while the error introduced by this process is noticable, the transformation/ detransformation pro­ cess does not introduce a very large error on its own.</S>
			<S sid ="215" ssid = "67">5.3 Results.</S>
			<S sid ="216" ssid = "68">Table 1presents an analysis of the sequences of trees produced via this detransforma­ tion process applied to the maximum-likelihood-parse trees.</S>
			<S sid ="217" ssid = "69">The columns of this table correspond to sequences of parse trees for section 22 of the WSJ corpus.</S>
			<S sid ="218" ssid = "70">The column labeled &quot;22&quot; describes the trees given in section 22 of the WSJ corpus, and the column labeled &quot;22 Id&quot; describes the maximum-likelihood-parse trees of section 22 of the WSJ corpus using the PCFG induced from those very trees.</S>
			<S sid ="219" ssid = "71">This is thus an example of training on the test data, and is often assumed to provide an upper bound on the per­ formance of a learning algorithm.</S>
			<S sid ="220" ssid = "72">The remaining columns describe the sequences of trees produced using the transformation/detransformation process described above.</S>
			<S sid ="221" ssid = "73">The first three rows of the table show the number of productions in each PCFG (which is the number of distinct local trees in the corresponding transformed training corpus), and the labeled precision and recall measures for the detransformed parse trees.</S>
			<S sid ="222" ssid = "74">Randomization tests for paired sample data were performed to assess the signifi­ cance of the difference between the labeled precision and recall scores for the output of the Id PCFG and the other PCFGs (Cohen 1995).</S>
			<S sid ="223" ssid = "75">The labeled precision and recall scores for the Flatten and Parent transforms differed significantly from each other and also from the Id transform at the 0.01 level, while neither the NPVP nor the N&apos;-V&apos; transform differed significantly from each other or the Id transform at the 0.1 level.</S>
			<S sid ="224" ssid = "76">The remaining rows of Table 1 show the number of times certain tree schema appear in these (detransformed) tree sequences.</S>
			<S sid ="225" ssid = "77">The rows labeled NP attachments and VP attachments provide the number of times the following tree schema, which· represent a single PP attachment, match the tree sequence.4 In these schema, V can be instantiated by any of the verbal preterminal tags used in the Penn II corpus.</S>
			<S sid ="226" ssid = "78">VP v NP</S>
	</SECTION>
	<SECTION title="NPPP. " number = "6">
			<S sid ="227" ssid = "1">6 6 V_P, V NP PP 6 6 6 The rows labeled NP* attachments and VP* attachments provide the number of times that the following more relaxed schema match the tree sequence.</S>
			<S sid ="228" ssid = "2">Here o: can be instantiated by any sequence of trees, and V can be instantiated by the same range of preterminal tags as above.</S>
			<S sid ="229" ssid = "3">--V-P-- 6 N 6 6 0 5.4 Discussion.</S>
			<S sid ="230" ssid = "4">As expected, the PCFGs induced from the output of the Flatten transform and Parent transform significantly improve precision and recall over the original treebank PCFG (i.e., the PCFG induced from the output of the Id transform).</S>
			<S sid ="231" ssid = "5">The PCFG induced from the output of the Parent transform performed significantly better than any other PCFG investigated here.</S>
			<S sid ="232" ssid = "6">As discussed above, both the Parent and the Flatten transforms in­ duce PCFGs that are sensitive to what would be non-CF dependencies in the original treebank trees, which perhaps accounts for their superior performance.</S>
			<S sid ="233" ssid = "7">Both the Flatten and Parent transforms induced PCFGs that have substantially more productions than the original treebank grammar, perhaps reflecting the fact that they encode more con­ textual information than the original treebank grammar, albeit in different ways.</S>
			<S sid ="234" ssid = "8">Their superior performance suggests that the reduction in bias obtained by the weakening of independence assumptions that these transformations induce more than outweighs any associated increase in variance.</S>
			<S sid ="235" ssid = "9">The various adjunction transformations only had minimal effect on labeled preci­ sion and recall.</S>
			<S sid ="236" ssid = "10">Perhaps this is because PP attachment ambiguities, despite their im­ portant role in linguistic and parsing theory, are just one source of ambiguity among many in real language, and the effect of the alternative representations is only minor.</S>
			<S sid ="237" ssid = "11">Indeed, moving to the purportedly linguistically more realistic Chomsky adjunc­ tion representations did not improve performance on these measures.</S>
			<S sid ="238" ssid = "12">On reflection, perhaps this should not be surprising.</S>
			<S sid ="239" ssid = "13">The Chomsky adjunction representations are motivated within the theoretical framework of Transformational Grammar, which ex­ plicitly argues for nonlocal, indeed, non-context-free, dependencies.</S>
			<S sid ="240" ssid = "14">Thus its poor per 4 The Penn II markup scheme permits a pseudo-attachment notation for indicating ambiguous.</S>
			<S sid ="241" ssid = "15">attachment.</S>
			<S sid ="242" ssid = "16">However, this is only used relatively infrequently-the pseudo-attachment markup only appears 27 times in the entire Penn II treebank-and was ignored here.</S>
			<S sid ="243" ssid = "17">Pseudo-attachment structures count as VP attachment structures here.</S>
			<S sid ="244" ssid = "18">formance when used as input to a statistical model that is insensitive to such de­ pendencies is perhaps to be expected.</S>
			<S sid ="245" ssid = "19">Indeed, it might be the case that inserting the additional adjunction nodes inserted by the NPVP and N&apos;-V&apos; transformations above have the effect of converting a local dependency (which can be described by a PCFG) into a nonlocal dependency (which cannot).</S>
			<S sid ="246" ssid = "20">Another initially surprising property of the tree sequences produced by the PCFGs is that they do not reflect at all well the frequency of the different kinds of PP attach­ ment found in the Penn II corpus.</S>
			<S sid ="247" ssid = "21">This is in fact to be expected, since the sequences consist of maximum-likelihood parses.</S>
			<S sid ="248" ssid = "22">To see this, consider any of the examples analyzed in Section 4.</S>
			<S sid ="249" ssid = "23">In all of these cases, the corpora contained two tree structures, and the induced PCFG associates each with an estimated likelihood.</S>
			<S sid ="250" ssid = "24">If these likelihoods differ, then a maximum-likelihood parser will always return the same maximum-likelihood tree structure each time it is presented with its yield, and will never return the tree structure with lower likelihood, even though the PCFG assigns it a nonzero likelihood.</S>
			<S sid ="251" ssid = "25">Thus the surprising fact is that these PCFG parsers ever produce a nonzero number of NP attachments and VP attachments in the same tree sequence.</S>
			<S sid ="252" ssid = "26">This is possible because the node label V in the attachment schema above abbreviates several different preterminal labels (i.e., the set of all verbal tags).</S>
			<S sid ="253" ssid = "27">Further investigation shows that once the V label in NP attachment and VP attachment schemas is instantiated with a particular verbal tag, only either the relevant NP attachment schema or the VP attachment schema appears in the tree sequence.</S>
			<S sid ="254" ssid = "28">For instance, in the Id tree sequence (i.e., produced by the standard tree bank grammar) the 67 NP attachments all occurred with the V label instantiated to the verbal tag AUX.5 It is worth noting that the 8% improvement in average precision and recall ob­ tained by the parent annotation transform is approximately half of the performance difference between a parser using a PCFG induced directly from the tree bank (i.e., using the Id transform above) and the best currently available broad-coverage parsing systems, which exploit lexical as well as purely syntactic information (Charniak 1997).</S>
			<S sid ="255" ssid = "29">Inorder to better understand just why the parent annotation transform performs so much better than the other transforms, transformation/detransformation experiments were performed in which the parent annotation transform was performed selectively either on all nodes with a given category label, or all nodes with a given category label and parent category label.</S>
			<S sid ="256" ssid = "30">Figure 10 depicts the effect of selective application of the parent annotation transform on the change of the average of precision and recall with respect to the Id transform.</S>
			<S sid ="257" ssid = "31">It is clear that distinguishing the context of NP and S nodes is responsible for an important part of the improvement in performance.</S>
			<S sid ="258" ssid = "32">Merely dis­ tinguishing root from nonroot S nodes-a distinction made in early transformational grammar but ignored in more recent work-improves average precision and recall by approximately 3%.</S>
			<S sid ="259" ssid = "33">Thus it is possible that the performance gains achieved by the parent annotation transform have little to do with PP attachment.</S>
			<S sid ="260" ssid = "34">6.</S>
			<S sid ="261" ssid = "35">Conclusion.</S>
			<S sid ="262" ssid = "36">This paper has presented theoretical and empirical evidence that the choice of tree representation can make a significant difference to the performance of a PCFG-based parsing system.</S>
			<S sid ="263" ssid = "37">What makes a tree representation a good choice for PCFG modeling seems to be quite different to what makes it a good choice for a representation of a lin­ guistic theory.</S>
			<S sid ="264" ssid = "38">In conventional linguistic theories the choice of rules, and hence trees, 5 This tag was introduced by Chamiak (1996) to distinguish auxiliary verbs from main verbs..</S>
			<S sid ="265" ssid = "39">u il) -0 .:: ro 0.09 0.08 0.07 0.06 .:: 0.05 &quot;ui ·o i.l.).</S>
			<S sid ="266" ssid = "40">Cl..</S>
			<S sid ="267" ssid = "41">0 il) 0.02 ... il) 0.01 &lt;] 00.01 0 1000 200 0 300 0 400 0 500 0 600 0 700 0 800 0 N u m b e r o f a d d i t i o n a l r u l e s Figure 10 The effects of selective application of the Parent transform.</S>
			<S sid ="268" ssid = "42">Each point corresponds to a PCFG induced after selective application of the Parent transform.</S>
			<S sid ="269" ssid = "43">The point labeled All corresponds to the PCFG induced after the Parent transform to all nonroot nonterminal nodes, as before.</S>
			<S sid ="270" ssid = "44">Points labeled with a single category A correspond to PCFGs induced after applying the Parent transform to just those nodes labeled A, while points labeled with a pair of categories K B correspond to PCFGs induced applying the Parent transform to nodes labeled A with parents labeled B.</S>
			<S sid ="271" ssid = "45">(Some labels are elided to make the remaining labels legible).</S>
			<S sid ="272" ssid = "46">The x-axis shows the difference in number of productions in the PCFG after selective parent transform and the untransformed treebank PCFG, and the y-axis shows the difference in the average of the precision and recall scores.</S>
			<S sid ="273" ssid = "47">is usually influenced by considerations of parsimony; thus the Chomsky adjunction representation of PP modification may be preferred because it requires only a sin­ gle context-free rule, rather than a rule schema abbreviating a potentially unbounded number of rules that would be required in flat tree representations of adjunction.</S>
			<S sid ="274" ssid = "48">But in a PCFG model the additional nodes required by the Chomsky adjunction represen­ tation represent independence assumptions that seem not to be justified.</S>
			<S sid ="275" ssid = "49">In general, in selecting a tree structure one faces a bias/variance trade-off, in that tree structures with fewer nodes and/or richer node labels reduce bias, but possibly at the expense of an increase in variance.</S>
			<S sid ="276" ssid = "50">A tree transformation/detransformation methodology for empirically evaluating the effect of different tree representations on parsing systems was developed in this paper.</S>
			<S sid ="277" ssid = "51">The results presented earlier show that the tree represen­ tations that incorporated weaker independence assumptions performed signficantly better in the empirical studies than the more linguistically motivated Chomsky ad­ junction structures.</S>
			<S sid ="278" ssid = "52">Of course, there is nothing particularly special about the particular tree trans­ formations studied in this paper: other transforms could-and should-be studied in exactly the same manner.</S>
			<S sid ="279" ssid = "53">For example, I am currently using this methodology to study the interaction between tree structure and a &quot;slash category&quot; node label­ ing in tree representations with empty categories (Gazdar et al. 1985).</S>
			<S sid ="280" ssid = "54">While the work presented here focussed on PCFG parsing models, it seems that the general transformation/detransformation approach can be applied to a wider range of prob lems.</S>
			<S sid ="281" ssid = "55">For example, it would be interesting to know to what extent the performance of more sophisticated parsing systems, such as those described by Collins (1996) and Chamiak (1997), depends on the particular tree representations they are trained on.</S>
	</SECTION>
	<SECTION title="Acknowledgments">
			<S sid ="282" ssid = "56">I would like to thank Dick Oehrle and Chris Manning, Eugene Charniak and my other colleagues at Brown, and the CL reviewers for their excellent advice in this research.</S>
			<S sid ="283" ssid = "57">This material is based on work supported by the National Science Foundation under Grants No.</S>
			<S sid ="284" ssid = "58">SBR9720368 and SBR9812169.</S>
	</SECTION>
</PAPER>
