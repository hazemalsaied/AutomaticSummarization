<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">In previous work, supertag disambiguation has been presented as a robust, partial parsing technique.</S>
		<S sid ="2" ssid = "2">In this paper we present two approaches: contextual models, which exploit a variety of features in order to improve supertag performance, and class-based models, which assign sets of supertags to words in order to substantially improve accuracy with only a slight increase in ambiguity.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="3" ssid = "3">Many natural language applications are beginning to exploit some underlying structure of the language.</S>
			<S sid ="4" ssid = "4">Roukos (1996) and Jurafsky et al.</S>
			<S sid ="5" ssid = "5">(1995) use structure-based language models in the context of speech applications.</S>
			<S sid ="6" ssid = "6">Grishman (1995) and Hobbs et al.</S>
			<S sid ="7" ssid = "7">(1995) use phrasal information in information extraction.</S>
			<S sid ="8" ssid = "8">Alshawi (1996) uses dependency information in a machine translation system.</S>
			<S sid ="9" ssid = "9">The need to impose structure leads to the need to have robust parsers.</S>
			<S sid ="10" ssid = "10">There have been two main robust parsing paradigms: Finite State Grammar-based approaches (such as Abney (1990), Grishman (1995), and Hobbs et al.</S>
			<S sid ="11" ssid = "11">(1997)) and Statistical Parsing (such as Charniak (1996), Magerman (1995), and Collins (1996)).</S>
			<S sid ="12" ssid = "12">Srinivas (1997a) has presented a different approach called supertagging that integrates linguistically motivated lexical descriptions with the robustness of statistical techniques.</S>
			<S sid ="13" ssid = "13">The idea underlying the approach is that the computation of linguistic structure can be localized if lexical items are associated with rich descriptions (Supertags) that impose complex constraints in a local context.</S>
			<S sid ="14" ssid = "14">Supertag disambiguation is resolved &quot;Supported by NSF grants ~SBR9710411 and ~GER9354869 K. VijayShanker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 vijay~cis.udel.edu by using statistical distributions of supertag co-occurrences collected from a corpus of parses.</S>
			<S sid ="15" ssid = "15">It results in a representation that is effectively a parse (almost parse).</S>
			<S sid ="16" ssid = "16">Supertagging has been found useful for a number of applications.</S>
			<S sid ="17" ssid = "17">For instance, it can be used to speed up conventional chart parsers because it reduces the ambiguity which a parser must face, as described in Srinivas (1997a).</S>
			<S sid ="18" ssid = "18">Chandrasekhar and Srinivas (1997) has shown that supertagging may be employed in information retrieval.</S>
			<S sid ="19" ssid = "19">Furthermore, given a sentence aligned parallel corpus of two languages and almost parse information for the sentences of one of the languages, one can rapidly develop a grammar for the other language using supertagging, as suggested by Bangalore (1998).</S>
			<S sid ="20" ssid = "20">In contrast to the aforementioned work in supertag disambiguation, where the objective was to provide a-direct comparison between trigram models for part-of-speech tagging and supertagging, in this paper our goal is to improve the performance of supertagging using local techniques which avoid full parsing.</S>
			<S sid ="21" ssid = "21">These supertag disambiguation models can be grouped into contextual models and class based models.</S>
			<S sid ="22" ssid = "22">Contextual models use different features in frameworks that exploit the information those features provide in order to achieve higher accuracies in supertagging.</S>
			<S sid ="23" ssid = "23">For class based models, supertags are first grouped into clusters and words are tagged with clusters of supertags.</S>
			<S sid ="24" ssid = "24">We develop several automated clustering techniques.</S>
			<S sid ="25" ssid = "25">We then demonstrate that with a slight increase in supertag ambiguity that supertagging accuracy can be substantially improved.</S>
			<S sid ="26" ssid = "26">The layout of the paper is as follows.</S>
			<S sid ="27" ssid = "27">In Section 2, we briefly review the task of supertagging and the results from previous work.</S>
			<S sid ="28" ssid = "28">In Section 3, we explore contextual models.</S>
			<S sid ="29" ssid = "29">In Section 4, we outline various class based approaches.</S>
			<S sid ="30" ssid = "30">Ideas for future work are presented in Section 5.</S>
			<S sid ="31" ssid = "31">Lastly, we present our conclusions in Section 6.</S>
	</SECTION>
	<SECTION title="Supertagging. " number = "2">
			<S sid ="32" ssid = "1">Supertags, the primary elements of the LTAG formalism, attempt to localize dependencies, including long distance dependencies.</S>
			<S sid ="33" ssid = "2">This is accomplished by grouping syntactically or semantically dependent elements to be within the same structure.</S>
			<S sid ="34" ssid = "3">Thus, as seen in Figure 1, supertags contain more information than standard part-of- speech tags, and there are many more supertags per word than part-of-speech tags.</S>
			<S sid ="35" ssid = "4">In fact, supertag disambiguation may be characterized as providing an almost parse, as shown in the bottom part of Figure 1.</S>
			<S sid ="36" ssid = "5">Local statistical information, in the form of a trigram model based on the distribution of supertags in an LTAG parsed corpus, can be used to choose the most appropriate supertag for any given word.</S>
			<S sid ="37" ssid = "6">Joshi and Srinivas (1994) define supertagging as the process of assigning the best supertag to each word.</S>
			<S sid ="38" ssid = "7">Srinivas (1997b) and Srinivas (1997a) have tested the performance of a trigram model, typically used for part-of-speech tagging on supertagging, on restricted domains such as ATIS and less restricted domains such as Wall Street Journal (WSJ).</S>
			<S sid ="39" ssid = "8">In this work, we explore a variety of local techniques in order to improve the performance of supertagging.</S>
			<S sid ="40" ssid = "9">All of the models presented here perform smoothing using a Good-Turing discounting technique with Katz&apos;s backoff model.</S>
			<S sid ="41" ssid = "10">With exceptions where noted, our models were trained on one million words of Wall Street Journal data and tested on 48K words.</S>
			<S sid ="42" ssid = "11">The data and evaluation procedure are similar to that used in Srinivas (1997b).</S>
			<S sid ="43" ssid = "12">The data was derived by mapping structural information from the Penn Treebank WSJ corpus into supertags from the XTAG grammar (The XTAG-Group (1995)) using heuristics (Srinivas (1997a)).</S>
			<S sid ="44" ssid = "13">Using this data, the trigram model for supertagging achieves an accuracy of 91.37%, meaning that 91.37% of the words in the test corpus were assigned the correct supertag.1</S>
	</SECTION>
	<SECTION title="Contextual Models. " number = "3">
			<S sid ="45" ssid = "1">As noted in Srinivas (1997b), a trigram model often fails to capture the cooccurrence dependencies 1The supertagging accuracy of 92.2% reported in Srinivas (1997b) was based on a different supertag tagset; specifically, the supertag corpus was reannotated with detailed supertags for punctuation and with a different analysis for subordinating conjunctions.</S>
			<S sid ="46" ssid = "2">between a head and its dependents--dependents which might not appear within a trigram&apos;s window size.</S>
			<S sid ="47" ssid = "3">For example, in the sentence &quot;Many Indians ]eared their country might split again&quot; the presence of might influences the choice of the supertag for ]eared, an influence that is not accounted for by the trigram model.</S>
			<S sid ="48" ssid = "4">As described below, we show that the introduction of features which take into account aspects of head-dependency relationships improves the accuracy of supertagging.</S>
			<S sid ="49" ssid = "5">3.1 One Pass Head Trigram Model.</S>
			<S sid ="50" ssid = "6">In a head model, the prediction of the current supertag is conditioned not on the immediately preceding two supertags, but on the supertags for the two previous head words.</S>
			<S sid ="51" ssid = "7">This model may thus be considered to be using a context of variable length.</S>
			<S sid ="52" ssid = "8">2 The sentence &quot;Many Indians feared their country might split again&quot; shows a head model&apos;s strengths over the trigram model.</S>
			<S sid ="53" ssid = "9">There are at least two frequently assigned supertags for the word ]eared: a more frequent one corresponding to a subcategorization of NP object (as ~n of Figure 1) and a less frequent one to a S complement.</S>
			<S sid ="54" ssid = "10">The supertag for the word might, highly probable to be modeled as an auxiliary verb in this case, provides strong evidence for the latter.</S>
			<S sid ="55" ssid = "11">Notice that might and ]eared appear within a head model&apos;s two head window, but not within the tri- gram model&apos;s two word window.</S>
			<S sid ="56" ssid = "12">We may therefore expect that a head model would make a more accurate prediction.</S>
			<S sid ="57" ssid = "13">Srinivas (1997b) presents a two pass head tri- gram model.</S>
			<S sid ="58" ssid = "14">In the first pass, it tags words as either head words or non-head words.</S>
			<S sid ="59" ssid = "15">Training data for this pass is obtained using a head percolation table (Magerman (1995)) on bracketed Penn Treebank sentences.</S>
			<S sid ="60" ssid = "16">After training, head tagging is performed according to Equation 1, where 15 is the estimated probability and H(i) is a characteristic function which is true iff word i is a head word.</S>
			<S sid ="61" ssid = "17">n H ~ argmaxH H~(wilH(i))~(H(i)lH(i-1)H(i-2)) i=1 (1) The second pass then takes the words with this head information and supertags them according to Equation 2, where tH(io) is the supertag of the ePart of speech tagging models have not used heads in this manner to achieve variable length contexts.</S>
			<S sid ="62" ssid = "18">Variable length n-gram models, one of which is described in Niesler and Woodland (1996), have been used instead.</S>
			<S sid ="63" ssid = "19">NPA SA SA NP* SA NP S NP VP NP NP VP V AP NP V J NP J N~ price T NP includes E ~ iA ancillary N companies ou2 0 3 o~4 cc 5 S S NP S NP S NP VP ~ NP VP NP N ~ V NP NP VP NP N D I the NP* N N* I pa~lmse h NI price \B0t6 ~ V NP ine/deslu c~7 D NP* Itwo h A N* Iancillary 134 E NI companies cc8 S NP S S NT VP /,~ NP N ~ VP ~ v Ap NP VP N N N* V NP ~ A V NP I purcha~ I price I includes / ancillary I companies \95 a9 1310 all a12 ct13 i i i &quot; s NP N NP NP VP NP N NP D NP* N N* N V NP D NP* A N ~ N I I I I I I I the purchase price includes two ancillary companies h h c\A22 C~ll ~3 ~4 a5 the purchase price includes two ancillary companies Figure 1: A selection of the supertags associated with each word of the sentence: the purchase price includes two ancillary companies jth head from word i. n T ,~ argmaxT ll g(wilti)~(tiItH(i,_HtH(i--2)) i=l (2) This model achieves an accuracy of 87%, lower than the trigram model&apos;s accuracy.</S>
			<S sid ="64" ssid = "20">Our current approach differs significantly.</S>
			<S sid ="65" ssid = "21">Instead of having heads be defined through the use of the head percolation table on the Penn Tree- bank, we define headedness in terms of the supertags themselves.</S>
			<S sid ="66" ssid = "22">The set of supertags can naturally be partitioned into head and non-head supertags.</S>
			<S sid ="67" ssid = "23">Head supertags correspond to those that represent a predicate and its arguments, such as a3 and a7.</S>
			<S sid ="68" ssid = "24">Conversely, non-head supertags correspond to those supertags that represent modifiers or adjuncts, such as ~1 and ~2.</S>
			<S sid ="69" ssid = "25">Now, the tree that is assigned to a word during supertagging determines whether or not it is to be a head word.</S>
			<S sid ="70" ssid = "26">Thus, a simple adaptation of the Viterbi algorithm suffices to compute Equation 2 in a single pass, yielding a one pass head trigram model.</S>
			<S sid ="71" ssid = "27">Using the same training and test data, the one pass head model achieved 90.75% accuracy, constituting a 28.8% reduction in error over the two pass head trigram model.</S>
			<S sid ="72" ssid = "28">This improvement may come from a reduction in error propagation or the richer context that is being used to predict heads.</S>
			<S sid ="73" ssid = "29">3.2 Mixed Head and Trigram Models.</S>
			<S sid ="74" ssid = "30">The head mod.el skips words that it does not consider to be head words and hence may lose valuable information.</S>
			<S sid ="75" ssid = "31">The lack of immediate local context hurts the head model in many cases, such as selection between head noun and noun modifier, and is a reason for its lower performance relative to the trigram model.</S>
			<S sid ="76" ssid = "32">Consider the phrase &quot;..., or $ 2.48 a share.&quot;</S>
			<S sid ="77" ssid = "33">The word 2.48 may either be associated with a determiner phrase supertag (~1) or a noun phrase supertag (ag).</S>
			<S sid ="78" ssid = "34">Notice that 2.48 is immediately preceded by $ which is extremely likely to be supertagged as a determiner phrase 031).</S>
			<S sid ="79" ssid = "35">This is strong evidence that 2.48 should be supertagged as a9.</S>
			<S sid ="80" ssid = "36">A pure head model cannot consider this particular fact, however, because 131 is not a head supertag.</S>
			<S sid ="81" ssid = "37">Thus, local context and long distance head dependency relationships are both important for accurate supertagging.</S>
			<S sid ="82" ssid = "38">A 5-gram mixed model that includes both the trigram and the head trigram context is one approach to this problem.</S>
			<S sid ="83" ssid = "39">This model achieves a performance of 91.50%, an improvement over both Table 1: In the 3-gram mixed model, previous conditioning context and the current supertag deter- ministically establish the next conditioning context.</S>
			<S sid ="84" ssid = "40">H, LM, and RM denote the entities head, left modifier, and right modifier, respectively.</S>
			<S sid ="85" ssid = "41">Previous Current Next Context Supertag Context tH(i _2) tH(i _~) tH(i,o) tH(i, -* ) tH(i,o) tH(i,_2) tH(i _~) tLM(~,o) tH(i _,) tLM(i,o) tH(i,_2) tH(i,_~) tH(i _~) tLM(~ _~) tRM(I,o) tH(i,o) tH(i _2) tH(i _1) tH(i,_,) tH(i,o) tH(i,_l) tLM(i _l) tLM(i,o) tH(.,_ t) tLM(I,o) tH(i.-l} tLM(i,-1) tRMii.o) tH(i._ ~~ tRM(i,o) the trigram model and the head trigram model.</S>
			<S sid ="86" ssid = "42">We hypothesize that the improvement is limited because of a large increase in the number of parameters to be estimated.</S>
			<S sid ="87" ssid = "43">As an alternative, we explore a 3-gram mixed model that incorporates nearly all of the relevant information.</S>
			<S sid ="88" ssid = "44">This mixed model may be described as follows.</S>
			<S sid ="89" ssid = "45">Recall that we partition the set of all supertags into heads and modifiers.</S>
			<S sid ="90" ssid = "46">Modifiers have been defined so as to share the characteristic that each one either modifies exactly one item to the right or one item to the left.</S>
			<S sid ="91" ssid = "47">Consequently, we further divide modifiers into left modifiers (134) and right modifiers.</S>
			<S sid ="92" ssid = "48">Now, instead of fixing the conditioning context to be either the two previous tags (as in the trigram model) or the two previous head tags (as in the head trigram model) we allow it to vary according to the identity of the current tag and the previous conditioning context, as shown in Table 1.</S>
			<S sid ="93" ssid = "49">Intuitively, the mixed model is like the trigram model except that a modifier tag is discarded from the conditioning context when it has found an object of modification.</S>
			<S sid ="94" ssid = "50">The mixed model achieves an accuracy of 91.79%, a significant improvement over both the head tri-gram model&apos;s and the trigram model&apos;s accuracies, p &lt; 0.05.</S>
			<S sid ="95" ssid = "51">Furthermore, this mixed model is computationally more efficient as well as more accurate than the 5-gram model.</S>
			<S sid ="96" ssid = "52">3.3 Head Word Models.</S>
			<S sid ="97" ssid = "53">Rather than head supertags, head words often seem to be more predictive of dependency relations.</S>
			<S sid ="98" ssid = "54">Based upon this reflection, we have implemented models where head words have been used as features.</S>
			<S sid ="99" ssid = "55">The head word model predicts the current supertag based on two previous head words (backing off to their supertags) as shown in Equa- Table 2: Single classifier contextual models that have been explored along with the contexts they consider and their accuracies Model Context Accuracy Trigram ti- 1 ti-2 91.37 Head Trigram tH(i,-1)tH(i,-2) 90.75 5-gram ti-lti-2 Mix tH(i,--1)tH(i,-2) 91.50 3-gram Mix tcntzt(i,-1)tcntzt(i,-2) 91.79 Head Word W(i,--1)W(i,-2) 88.16 Mix ti- 1 ti-2 Word WH(i,-1)WH(i,-2) 89.46 tion 3.</S>
			<S sid ="100" ssid = "56">T ~ argmaxT rXP(wilti)p(ti]WH(i,_l)WH(i,_2)) i=l (3) The mixed trigram and head word model takes into account local (supertag) context and long distance (head word) context.</S>
			<S sid ="101" ssid = "57">Both of these models appear to suffer from severe sparse data problems.</S>
			<S sid ="102" ssid = "58">It is not surprising, then, that the head word model achieves an accuracy of only 88.16%, and the mixed trigram and head word model achieves an accuracy of 89.46%.</S>
			<S sid ="103" ssid = "59">We were only able to train the latter model with 250K of training data because of memory problems that were caused by computing the large parameter space of that model.</S>
			<S sid ="104" ssid = "60">The salient characteristics of models that have been discussed in this subsection are summarized in Table 2.</S>
			<S sid ="105" ssid = "61">3.4 Classifier Combination.</S>
			<S sid ="106" ssid = "62">While the features that our new models have considered are useful, an n-gram model that considers all of them would run into severe sparse data problems.</S>
			<S sid ="107" ssid = "63">This difficulty may be surmounted through the use of more elaborate backoff techniques.</S>
			<S sid ="108" ssid = "64">On the other hand, we could consider using decision trees at choice points in order to decide which features are most relevant at each point.</S>
			<S sid ="109" ssid = "65">However, we have currently experimented with classifier combination as a means of ameliorating the sparse data problem while making use of the feature combinations that we have introduced.</S>
			<S sid ="110" ssid = "66">In this approach, a selection of the discussed models is treated as a different classifier and is trained on the same data.</S>
			<S sid ="111" ssid = "67">Subsequently, each clas- sifter supertags the test corpus separately.</S>
			<S sid ="112" ssid = "68">Finally, Trigram Head Trigram Head Word 3-gram Mix Mix Word Trigram 91.37 91.87&quot; 91.65 91.96 91.55 Head Trigram 90.75 90.96 91.95 91.35&quot; Head Word 88.16 91.88 90.51&quot; 3-gram Mix 91.79 91.87 Mix Word 89.46 Table 3: Accuracies of Single Classifiers and Pairwise Combination of Classifiers.</S>
			<S sid ="113" ssid = "69">their predictions are combined using various voting strategies.</S>
			<S sid ="114" ssid = "70">The same 1000K word test corpus is used in models of classifier combination as is used in previous models.</S>
			<S sid ="115" ssid = "71">We created three distinct partitions of this 1000K word corpus, each partition consisting of a 900K word training corpus and a 100K word tune corpus.</S>
			<S sid ="116" ssid = "72">In this manner, we ended up with a total of 300K word tuning data.</S>
			<S sid ="117" ssid = "73">We consider three voting strategies suggested by van Halteren et al.</S>
			<S sid ="118" ssid = "74">(1998): equal vote, where each classifier&apos;s vote is weighted equally, overall accuracy, where the weight depends on the overall accuracy of a classifier, and pair&apos;wise voting.</S>
			<S sid ="119" ssid = "75">Pairwise voting works as follows.</S>
			<S sid ="120" ssid = "76">First, for each pair of classifiers a and b, the empirical probability ~(tcorrectltctassilier_atclassiyier_b) is computed from tuning data, where tclassiyier-a and tct~ssiy~e~-b are classifier a&apos;s and classifier b&apos;s supertag assignment for a particular word respectively, and t .... ect is the correct supertag.</S>
			<S sid ="121" ssid = "77">Subsequently, on the test data, each classifier pair votes, weighted by overall accuracy, for the supertag with the highest empirical probability as determined in the previous step, given each individual classifier&apos;s guess.</S>
			<S sid ="122" ssid = "78">The results from these voting strategies are positive.</S>
			<S sid ="123" ssid = "79">Equal vote yields an accuracy of 91.89%.</S>
			<S sid ="124" ssid = "80">Overall accuracy vote has an accuracy of 91:93%.</S>
			<S sid ="125" ssid = "81">Pairwise voting yields an accuracy of 92.19%, the highest supertagging accuracy that has been achieved, a 9.5% reduction in error over the tri- gram model.</S>
			<S sid ="126" ssid = "82">The table of accuracy of combinations of pairs of classifiers is shown in Table 3.</S>
			<S sid ="127" ssid = "83">3 The efficacy of pairwise combination (which has significantly fewer parameters to estimate) in ameliorating the sparse data problem can be seen clearly.</S>
			<S sid ="128" ssid = "84">For example, the accuracy of pairwise combination of head classifier and trigram classifier exceeds that of the 5-gram mixed model.</S>
			<S sid ="129" ssid = "85">It is also 3Entries marked with an asterisk (&quot;*&quot;) correspond to cases where the pairwise combination of classifiers was significantly better than either of their component classifiers, p &lt; 0.05.</S>
			<S sid ="130" ssid = "86">marginally, but not significantly, higher than the 3-gram mixed model.</S>
			<S sid ="131" ssid = "87">It is also notable that the pairwise combination of the head word classifier and the mix word classifier yields a significant improvement over either classifier, p &lt; 0.05, considering the disparity between the accuracies of its component classifiers.</S>
			<S sid ="132" ssid = "88">3.5 Further Evaluation.</S>
			<S sid ="133" ssid = "89">We also compare various models&apos; performance on base-NP detection and PP attachment disambiguation.</S>
			<S sid ="134" ssid = "90">The results will underscore the adroitness of the classifier combination model in using both local and long distance features.</S>
			<S sid ="135" ssid = "91">They will also show that, depending on the ultimate application, one model may be more appropriate than another model.</S>
			<S sid ="136" ssid = "92">A base-NP is a non-recursive NP structure whose detection is useful in many applications, such as information extraction.</S>
			<S sid ="137" ssid = "93">We extend our supertagging models to perform this task in a fashion similar to that described in Srinivas (1997b).</S>
			<S sid ="138" ssid = "94">Selected models have been trained on 200K words.</S>
			<S sid ="139" ssid = "95">Subsequently, after a model has supertagged the test corpus, a procedure detects base-NPs by scanning for appropriate sequences of supertags.</S>
			<S sid ="140" ssid = "96">Results for base-NP detection are shown in Table 4.</S>
			<S sid ="141" ssid = "97">Note that the mixed model performs nearly as well as the trigram model.</S>
			<S sid ="142" ssid = "98">Note also that the head trigram model is outperformed by the other models.</S>
			<S sid ="143" ssid = "99">We suspect that unlike the trigram model, the head model does not perform the accurate modeling of local context which is important for base- NP detection.</S>
			<S sid ="144" ssid = "100">In contrast, information about long distance dependencies are more important for the the PP attachment task.</S>
			<S sid ="145" ssid = "101">In this task, a model must decide whether a PP attaches at the NP or the VP level.</S>
			<S sid ="146" ssid = "102">This corresponds to a choice between two PP supertags: one associated with NP attachment, and another associated with VP attachment.</S>
			<S sid ="147" ssid = "103">The trigram model, head trigram model, 3-gram mixed model, and classifier combination model perform at accuracies of 78.53%, 79.56%, 80.16%, and 82.10%, respectively, on the PP at-Table 4: Some contextual models&apos; results on base- NP chunking Recall Precision Trigram 93.75 93.00 3-gram Mix 93.65 92.63 Head Trigram 91.17 89.72 Classifier Combination 94.00 93.17 tachment task.</S>
			<S sid ="148" ssid = "104">As may be expected, the trigram model performs the worst on this task, presumably because it is restricted to considering purely local information.</S>
	</SECTION>
	<SECTION title="Class Based Models. " number = "4">
			<S sid ="149" ssid = "1">Contextual models tag each word with the single most appropriate supertag.</S>
			<S sid ="150" ssid = "2">In many applications, however, it is sufficient to reduce ambiguity to a small number of supertags per word.</S>
			<S sid ="151" ssid = "3">For example, using traditional TAG parsing methods, such are described in Schabes (1990), it is inefficient to parse with a large LTAG grammar for English such as XTAG (The XTAG-Group (1995)).</S>
			<S sid ="152" ssid = "4">In these circumstances, a single word may be associated with hundreds of supertags.</S>
			<S sid ="153" ssid = "5">Reducing ambiguity to some small number k, say k &lt; 5 supertags per word 4 would accelerate parsing considerably.</S>
			<S sid ="154" ssid = "6">5 As an alternative, once such a reduction in ambiguity has been achieved, partial parsing or other techniques could be employed to identify the best single supertag.</S>
			<S sid ="155" ssid = "7">These are the aims of class based models, which assign a small set of supertags to each word.</S>
			<S sid ="156" ssid = "8">It is related to work by Brown et al.</S>
			<S sid ="157" ssid = "9">(1992) where mutual information is used to cluster words into classes for language modeling.</S>
			<S sid ="158" ssid = "10">In our work with class based models, we have considered only trigram based approaches so far.</S>
			<S sid ="159" ssid = "11">4.1 Context Class Model.</S>
			<S sid ="160" ssid = "12">One reason why the trigram model of supertagging is limited in its accuracy is because it considers only a small contextual window around the word to be supertagged when making its tagging decision.</S>
			<S sid ="161" ssid = "13">Instead of using this limited context to pinpoint the exact supertag, we postulate that it may be used to predict certain 4For example, the n-best model, described below, achieves 98.4% accuracy with on average 4.8 supertags per word.</S>
			<S sid ="162" ssid = "14">5An alternate approach to TAG parsing that effectively shares the computation associated with each lexicalized elementary tree (supertag) is described in Evans and Weir (1998).</S>
			<S sid ="163" ssid = "15">It would be worth comparing both approaches.</S>
			<S sid ="164" ssid = "16">structural characteristics of the correct supertag with much higher accuracy.</S>
			<S sid ="165" ssid = "17">In the context class model, supertags that share the same characteristics are grouped into classes and these classes, rather than individual supertags, are predicted by a trigram model.</S>
			<S sid ="166" ssid = "18">This is reminiscent of Samuelsson and Reich (1999) where some part of speech tags have been compounded so that each word is deterministically in one class.</S>
			<S sid ="167" ssid = "19">The grouping procedure may be described as follows.</S>
			<S sid ="168" ssid = "20">Recall that each supertag corresponds to a lexicalized tree t E G, where G is a particular LTAG.</S>
			<S sid ="169" ssid = "21">Using standard FIRST and FOLLOW techniques, we may associate t with FOLLOW and PRECEDE sets, FOLLOW(t) being the set of supertags that can immediately follow t and PRECEDE(t) being those supertags that can immediately precede t. For example, an NP tree such as 81 would be in the FOLLOW set of a supertag of a verb that subcategorizes for an NP complement.</S>
			<S sid ="170" ssid = "22">We partition the set of all supertags into classes such that all of the supertags in a particular class are associated with lexicalized trees with the same PRECEDE and FOLLOW sets.</S>
			<S sid ="171" ssid = "23">For instance, the supertags tx and t2 corresponding respectively to the NP and S subcategorizations of a verb ]eared would be associated with the same class.</S>
			<S sid ="172" ssid = "24">(Note that a head NP tree would be a member of both FOLLOW(t1) and FOLLOW(t2).)</S>
			<S sid ="173" ssid = "25">The context class model predicts sets of supertags for words as follows.</S>
			<S sid ="174" ssid = "26">First, the trigram model supertags each word wi with supertag ti that belongs to class Ci.6 Furthermore, using the training corpus, we obtain set D~ which contains all supertags t such that ~(wilt) &gt; 0.</S>
			<S sid ="175" ssid = "27">The word wi is relabeled with the set of supertags C~ N Di.</S>
			<S sid ="176" ssid = "28">The context class model trades off an increased ambiguity of 1.65 supertags per word on average, for a higher 92.51% accuracy.</S>
			<S sid ="177" ssid = "29">For the purpose of comparison, we may compare this model against a baseline model that partitions the set of all supertags into classes so that all of the supertags in one class share the same preterminal symbol, i.e., they are anchored by words which share the same part of speech.</S>
			<S sid ="178" ssid = "30">With classes defined in this manner, call C~ the set of supertags that belong to the class which is associated with word w~ in the test corpus.</S>
			<S sid ="179" ssid = "31">We may then associate with word w~ the set of supertags C~ gl Di, where Di is defined as above.</S>
			<S sid ="180" ssid = "32">This baseline procedure yields an aver- 6For class models, we have also experimented with a variant Where the classes are assigned to words through the model c ~ aTgmaxcl-I~=,~(w, IC~)~(C, IC~_lC,_2).</S>
			<S sid ="181" ssid = "33">In general, we have found this procedure to give slightly worse results.</S>
			<S sid ="182" ssid = "34">age ambiguity of 5.64 supertags per word with an 980&quot; accuracy of 97.96%.</S>
			<S sid ="183" ssid = "35">4.2 Confusion Class Model.</S>
			<S sid ="184" ssid = "36">The confusion class model partitions supertags into classes according to an alternate procedure.</S>
			<S sid ="185" ssid = "37">Here, classes are derived from a confusion matrix analysis of errors which the trigram model makes while supertagging.</S>
			<S sid ="186" ssid = "38">First, the trigram model supertags a tune set.</S>
			<S sid ="187" ssid = "39">A confusion matrix is constructed, recording the number of times supertag t~ was confused for supertag tj, or vice versa, in the tune set.</S>
			<S sid ="188" ssid = "40">Based on the top k pairs of supertags that are most confused, we construct classes of supertags that are confused with one another.</S>
			<S sid ="189" ssid = "41">For example, let tl and t2 be two PP supertags which modify an NP and VP respectively.</S>
			<S sid ="190" ssid = "42">The most common kind of mistake that the trigram model made on the tune data was to mistag tl as t2, and vice versa.</S>
			<S sid ="191" ssid = "43">Hence, tl and t2 are clustered by our method into the same confusion class.</S>
			<S sid ="192" ssid = "44">The second most common mistake was to confuse supertags that represent verb modifier PPs and those that represent verb argument PPs, while the third most common mistake was to confuse supertags that represent head nouns and noun modifiers.</S>
			<S sid ="193" ssid = "45">These, too, would form their own classes.</S>
			<S sid ="194" ssid = "46">The confusion class model predicts sets of supertags for words in a manner similar to the context class model.</S>
			<S sid ="195" ssid = "47">Unlike the context class model, however, in this model we have to choose k, the number of pairs of supertags which are extracted from the confusion matrix over which confusion classes are formed.</S>
			<S sid ="196" ssid = "48">In our experiments, we have found that with k = 10, k = 20, and k = 40, the resulting models attain 94.61% accuracy and 1.86 tags per word, 95.76% accurate and 2.23 tags per word, and 97.03% accurate and 3.38 tags per word, respectively/ Results of these, as well as other models discussed below, are plotted in Figure 2.</S>
			<S sid ="197" ssid = "49">The n-best model is a modification of the trigram model in which the n most probable supertags per word are chosen.</S>
			<S sid ="198" ssid = "50">The classifier union result is obtained by assigning a word wi a set of supertags til,.+.</S>
			<S sid ="199" ssid = "51">,tik where to tij is the jth classifier&apos;s supertag assignment for word wl, the classifiers being the models discussed in Section 3.</S>
			<S sid ="200" ssid = "52">It achieves an accuracy of 95.21% with 1.26 supertags per word.</S>
			<S sid ="201" ssid = "53">J 0 Context.</S>
			<S sid ="202" ssid = "54">99 0&quot; CMss 96.0 &quot; Confusion Class 950 &quot; Classffmr &lt; Union 94.0 &quot; / -~(&quot; N-Best 93.0&quot; 920&quot; S 910&quot; I &quot;P 3 Ambiguity (Tags Per Word) Figure 2: Ambiguity versus Accuracy for Various Class Models</S>
	</SECTION>
	<SECTION title="Future Work. " number = "5">
			<S sid ="203" ssid = "1">We are considering extending our work in several directions.</S>
			<S sid ="204" ssid = "2">Srinivas (1997b) discussed a lightweight dependency analyzer which assigns dependencies assuming that each word has been assigned a unique supertag.</S>
			<S sid ="205" ssid = "3">We are extending this algorithm to work with class based models which narrows down the number of supertags per word with much higher accuracy.</S>
			<S sid ="206" ssid = "4">Aside from the n-gram modeling that was a focus of this paper, we would also like to explore using other kinds of models, such as maximum entropy.</S>
	</SECTION>
	<SECTION title="Conclusions. " number = "6"></SECTION>
</PAPER>
