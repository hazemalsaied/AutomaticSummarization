<PAPER>
	<ABSTRACT></ABSTRACT>
	<SECTION title="Segmentation as Tagging. " number = "1">
			<S sid ="1" ssid = "1">Unlike English text in which sentences are se­quences of words delimited by white spaces, in Chi­nese text, sentences are represented as strings of Chinese characters or hanzi without similar natural delimiters.</S>
			<S sid ="2" ssid = "2">Therefore, the .rst step in a Chinese lan­guage processing task is to identify the sequence of words in a sentence and mark boundaries in appro­priate places.</S>
			<S sid ="3" ssid = "3">This may sound simple enough but in reality identifying words in Chinese is a nontrivial problem that has drawn a large body of research in the Chinese language processing community (Fan and Tsai, 1988; Gan et al., 1996; Sproat et al., 1996; Wu, 2003; Xue, 2003).</S>
			<S sid ="4" ssid = "4">The key to accurate automatic word identi.cation in Chinese lies in the successful resolution of ambi­guities and a proper way to handle out-of-vocabulary words.</S>
			<S sid ="5" ssid = "5">The ambiguities in Chinese word segmenta­tion is due to the fact that a hanzi can occur in differ­ent word-internal positions (Xue, 2003).</S>
			<S sid ="6" ssid = "6">Given the proper context, generally provided by the sentence in which it occurs, the position of a hanzi can be de­termined.</S>
			<S sid ="7" ssid = "7">In this paper, we model the Chinese word segmentation as a hanzi tagging problem and use a machine-learning algorithm to determine the appro­priate position for a hanzi.</S>
			<S sid ="8" ssid = "8">There are several reasons why we may expect this approach to work.</S>
			<S sid ="9" ssid = "9">First, Chinese words generally have fewer than four char­acters.</S>
			<S sid ="10" ssid = "10">As a result, the number of positions is small.</S>
			<S sid ="11" ssid = "11">Second, although each hanzi can in principle occur in all possible positions, not all hanzi behave this way.</S>
			<S sid ="12" ssid = "12">A substantial number of hanzi are distributed in a constrained manner.</S>
			<S sid ="13" ssid = "13">For example, , the plu­ral marker, almost always occurs in the word-.nal position.</S>
			<S sid ="14" ssid = "14">Finally, although Chinese words cannot be exhaustively listed and new words are bound to oc­cur in naturally occurring text, the same is not true for hanzi.</S>
			<S sid ="15" ssid = "15">The number of hanzi stays fairly constant and we do not generally expect to see new hanzi.</S>
			<S sid ="16" ssid = "16">We represent the positions of a hanzi with four different tags (Table 1): LM for a hanzi that oc­curs on the left periphery of a word, followed by other hanzi, MM for a hanzi that occurs in the mid­dle of a word, MR for a hanzi that occurs on the right periphery of word, preceded by other hanzi, and LR for hanzi that is a word by itself.</S>
			<S sid ="17" ssid = "17">We call this LMR tagging.</S>
			<S sid ="18" ssid = "18">With this approach, word seg­mentation is a process where each hanzi is assigned an LMR tag and sequences of hanzi are then con­verted into sequences of words based on the LMR tags.</S>
			<S sid ="19" ssid = "19">The use of four tags is linguistically intuitive in that LM tags morphemes that are pre.xes or stems in the absence of pre.xes, MR tags morphemes that are suf.xes or stems in the absence of suf.xes, MM tags stems with af.xes and LR tags stems without af.xes.</S>
			<S sid ="20" ssid = "20">Representing the distributions of hanzi with LMR tags also makes it easy to use machine learn­ing algorithms which has been successfully applied to other tagging problems, such as POS-tagging and IOB tagging used in text chunking.</S>
			<S sid ="21" ssid = "21">Right Boundary (R) Not Right Boundary (M) Left Boundary (L) LR LM Not Left Boundary (M) MR MM Table 1: LMR Tagging</S>
	</SECTION>
	<SECTION title="Tagging Algorithms. " number = "2">
			<S sid ="22" ssid = "1">Our algorithm consists of two parts.</S>
			<S sid ="23" ssid = "2">We .rst imple­ment two Maximum Entropy taggers, one of which scans the input from left to right and the other scans the input from right to left.</S>
			<S sid ="24" ssid = "3">Then we implement a Transformation Based Algorithm to combine the re­sults of the two taggers.</S>
			<S sid ="25" ssid = "4">2.1 The Maximum Entropy Tagger.</S>
			<S sid ="26" ssid = "5">The Maximum Entropy Markov Model (MEMM) has been successfully used in some tagging prob­lems.</S>
			<S sid ="27" ssid = "6">MEMM models are capable of utilizing a large set of features that generative models cannot use.</S>
			<S sid ="28" ssid = "7">On the other hand, MEMM approaches scan the input incrementally as generative models do.</S>
			<S sid ="29" ssid = "8">The Maximum Entropy Markov Model used in POS-tagging is described in detail in (Ratnaparkhi, 1996) and the LMR tagger here uses the same prob­ability model.</S>
			<S sid ="30" ssid = "9">The probability model is de.ned over TbllHT , where is the set of possible contexts or H ”histories” and is the set of possible tags.</S>
			<S sid ="31" ssid = "10">The model’s joint probability of a history hand a tag tis de.ned as k/I I t ehht ) = 17µ/(1) /I I( a where 1is a normalization constant, { µg a( oIoIo aki} are the model parameters and {nf( oIoIo ,fk }are known as features, where f/ehstt))E!{s}.</S>
			<S sid ="32" ssid = "11">Each fea­ture f/has a corresponding parameter /, that ef­ a fectively serves as a ”weight” of this feature.</S>
			<S sid ="33" ssid = "12">In the training process, given a sequence of characters { ( t I }and their LMR tags { t( oIoIo t }as train­ing data, the purpose is to determine the parameters oIoIo { µg ( aki}that maximize the likelihood of the at training data using: e( ii k/ /t t ; ) = t) = (2) iI I( PehiI I(17µ/I I( a The success of the model in tagging depends to a large extent on the selection of suitable features.</S>
			<S sid ="34" ssid = "13">Given ehht ), a feature must encode information that helps to predict t. The features we used in our ex­periments are instantiations of the feature templates in (1).</S>
			<S sid ="35" ssid = "14">Feature templates (b) to (e) represent charac­ter features while (f) represents tag features.</S>
			<S sid ="36" ssid = "15">In the TeToIoIo following list, C TeToIoIoC Tare characters and HHT are LMR tags.</S>
			<S sid ="37" ssid = "16">(1) Feature templates (a) Default feature (b) The current character (C C) (c) The previous (next) two characters (C TeC, C T(, C(, C C) (d) The previous (next) character and the current character (CT(CC, CCC(), (the previous two characters (C TeC C T), and the next two characters (C(C C) (e) The previous and the next character (C T(C()HT( (f) The tag of the previous character ( ), and the tag of the character two before the current H character ( TeC) 2.2 Transformation-Based Learning.</S>
			<S sid ="38" ssid = "17">One potential problem with the MEMM is that it can only scan the input in one direction, from left to right or from right to left.</S>
			<S sid ="39" ssid = "18">It is noted in (Lafferty et al., 2001) that non-generative .nite-state models, MEMM models included, share a weakness which they call the Label Bias Problem (LBP): a transition leaving a given state compete only against all other transitions in the model.</S>
			<S sid ="40" ssid = "19">They proposed Conditional Random Fields (CRFs) as a solution to address this problem.</S>
			<S sid ="41" ssid = "20">A partial solution to the LBP is to compute the probability of transitions in both directions.</S>
			<S sid ="42" ssid = "21">This way we can use two MEMM taggers, one of which scans the input from left to right and the other scans the input from right to left.</S>
			<S sid ="43" ssid = "22">This strategy has been successfully used in (Shen and Joshi, 2003).</S>
			<S sid ="44" ssid = "23">In that paper, pairwise voting (van Halteren et al., 1998) has been used to combine the results of two supertaggers that scan the input in the opposite directions.</S>
			<S sid ="45" ssid = "24">The pairwise voting is not suitable in this appli­cation because we must make sure that the LMR tags assigned to consecutive words are compatible.</S>
			<S sid ="46" ssid = "25">For example, an LM tag cannot immediately follow an MM.</S>
			<S sid ="47" ssid = "26">Pairwise voting does not use any contex­tual information, so it cannot prevent incompatible tags from occurring.</S>
			<S sid ="48" ssid = "27">Therefore, in our experiments described here, we use the Transformation-Based Learning (Brill, 1995) to combine the results of two MEMM taggers.</S>
			<S sid ="49" ssid = "28">The feature set used in the TBL al­gorithm is similar to those used in the NP Chunking task in (Ngai and Florian, 2001).</S>
	</SECTION>
	<SECTION title="Experiments. " number = "3">
			<S sid ="50" ssid = "1">We conducted closed track experiments on three data sources: the Academia Sinica (AS) corpus, the Beijing University (PKU) corpus and the Hong Kong City University (CityU) corpus.</S>
			<S sid ="51" ssid = "2">We .rst split the training data from each of the three sources into cn i two portions.</S>
			<S sid ="52" ssid = "3">of the of.cial training data is i used to train the MEMM taggers, and the otheris held out as the development test data (the devel­opment set).</S>
			<S sid ="53" ssid = "4">The development set is used to esti­mate the optimal number of iterations in the MEMM training.</S>
			<S sid ="54" ssid = "5">Figure (1), (2) and (3) show the curves of F-scores on the development set with respect to the number of iterations in MEMM training.</S>
			<S sid ="55" ssid = "6">iteration Figure 1: Learning curves on the development dataset of the Academia Sinica corpus.</S>
			<S sid ="56" ssid = "7">X-axis stands for the number of iteration in training.</S>
			<S sid ="57" ssid = "8">Y-axis stands for the F-score.</S>
			<S sid ="58" ssid = "9">Experiments show that the MEMM models iteration Figure 2: Learning curves on the development dataset of the HK City Univ. corpus.</S>
			<S sid ="59" ssid = "10">Figure 3: Learning curves on the development dataset of the Beijing Univ. corpus.</S>
			<S sid ="60" ssid = "11">achieve the best results after 500 and 400 rounds (it­erations) of training on the AS data and the PKU data respectively.</S>
			<S sid ="61" ssid = "12">However, the results on the CityU data is not very clear.</S>
			<S sid ="62" ssid = "13">From Round 100 through 200, the F-score on the development set almost stays un­changed.</S>
			<S sid ="63" ssid = "14">We think this is because the CityU data is from three different sources, which differ in the optimal number of iterations.</S>
			<S sid ="64" ssid = "15">We decided to train the MEMM taggers for 160 iterations the HK City University data.</S>
			<S sid ="65" ssid = "16">We implemented two MEMM taggers, one scans the input from left to right and one from right to left.</S>
			<S sid ="66" ssid = "17">We then used these two MEMM taggers to tag both the training and the development data.</S>
			<S sid ="67" ssid = "18">We use the LMR tagging output to train a Transformation-Based learner, using fast TBL (Ngai and Florian, 2001).</S>
			<S sid ="68" ssid = "19">The middle in Table 2 shows the F-score on the development set achieved by the MEMM tag­ger that scans the input from left to right and the last column is the results after the Transformation-Based Learner is applied.</S>
			<S sid ="69" ssid = "20">The results show that us­ing Transformation-Based learning only give rise to slight improvements.</S>
			<S sid ="70" ssid = "21">It seems that the bidirectional approach does not help much for the LMR tagging.</S>
			<S sid ="71" ssid = "22">Therefore, we only submitted the results of our left-to-right MEMM tagger, retrained on the entire train­ing sets, as our of.cial results.</S>
			<S sid ="72" ssid = "23">F-score MEMM MEMM+TBL AS 0.9595 0.9603 HK 0.9143 N/A PK 0.9391 0.9398 Table 2: F-score on development data The results on the of.cial test data is similar to what we have got on our development set, except that the F-score on the Beijing Univ. corpus is over 2 lower in absolute accuracy than what we ex­pected.</S>
			<S sid ="73" ssid = "24">The reason is that in the training data of Beijing University corpus, all the numbers are en­coded in GBK, while in the test data many numbers are encoded in ASCII, which are unknown to our tagger.</S>
			<S sid ="74" ssid = "25">With this problem .xed, the results of the of.cial test data are compatible with the results on our development set.</S>
			<S sid ="75" ssid = "26">However, we have withdrawn our segmentation results on the Beijing University corpus.</S>
			<S sid ="76" ssid = "27">corpus R P F R ohohv R 1,v AS 0.961 0.958 0.959 0.729 0.966 HK 0.917 0.915 0.916 0.670 0.936 Table 3: Of.cial Bakeoff Outcome</S>
	</SECTION>
	<SECTION title="Conclusions and Future Work. " number = "4">
			<S sid ="77" ssid = "1">Our closed track experiments on the .rst Sighan Bakeoff data show that the LMR algorithm pro­duces promising results.</S>
			<S sid ="78" ssid = "2">Our system ranks the sec­ond when tested on the Academia Sinica corpus and third on the Hong Kong City University corpus.</S>
			<S sid ="79" ssid = "3">In the future, we will try to incorporate a large word list into our tagger to test its performance on open track experiments.</S>
			<S sid ="80" ssid = "4">Its high accuracy on R ohohvmakes it a good candidate as a general purpose segmenter.</S>
	</SECTION>
</PAPER>
