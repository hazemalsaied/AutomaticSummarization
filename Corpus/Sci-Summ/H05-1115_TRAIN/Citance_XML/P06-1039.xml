<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">We present BAYESUM (for “Bayesian summarization”), a model for sentence extraction in query-focused summarization.</S>
		<S sid ="2" ssid = "2">BAYESUM leverages the common case in which multiple documents are relevant to a single query.</S>
		<S sid ="3" ssid = "3">Using these documents as reinforcement for query terms, BAYESUM is not afflicted by the paucity of information in short queries.</S>
		<S sid ="4" ssid = "4">We show that approximate inference in BAYESUM is possible on large data sets and results in a state- of-the-art summarization system.</S>
		<S sid ="5" ssid = "5">Furthermore, we show how BAYESUM can be understood as a justified query expansion technique in the language modeling for IR framework.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="6" ssid = "6">We describe BAYESUM, an algorithm for performing query-focused summarization in the common case that there are many relevant documents for a given query.</S>
			<S sid ="7" ssid = "7">Given a query and a collection of relevant documents, our algorithm functions by asking itself the following question: what is it about these relevant documents that differentiates them from the non-relevant documents?</S>
			<S sid ="8" ssid = "8">BAYESUM can be seen as providing a statistical formulation of this exact question.</S>
			<S sid ="9" ssid = "9">The key requirement of BAYESUM is that multiple relevant documents are known for the query in question.</S>
			<S sid ="10" ssid = "10">This is not a severe limitation.</S>
			<S sid ="11" ssid = "11">In two well-studied problems, it is the defacto standard.</S>
			<S sid ="12" ssid = "12">In standard multidocument summarization (with or without a query), we have access to known relevant documents for some user need.</S>
			<S sid ="13" ssid = "13">Similarly, in the case of a web-search application, an underlying IR engine will retrieve multiple (presumably) relevant documents for a given query.</S>
			<S sid ="14" ssid = "14">For both of these tasks, BAYESUM performs well, even when the underlying retrieval model is noisy.</S>
			<S sid ="15" ssid = "15">The idea of leveraging known relevant documents is known as query expansion in the information retrieval community, where it has been shown to be successful in ad hoc retrieval tasks.</S>
			<S sid ="16" ssid = "16">Viewed from the perspective of IR, our work can be interpreted in two ways.</S>
			<S sid ="17" ssid = "17">First, it can be seen as an application of query expansion to the summarization task (or, in IR terminology, passage retrieval); see (Liu and Croft, 2002; Murdock and Croft, 2005).</S>
			<S sid ="18" ssid = "18">Second, and more importantly, it can be seen as a method for query expansion in a non-ad hoc manner.</S>
			<S sid ="19" ssid = "19">That is, BAYESUM is a statistically justified query expansion method in the language modeling for IR framework (Ponte and Croft, 1998).</S>
	</SECTION>
	<SECTION title="Bayesian Query-. " number = "2">
			<S sid ="20" ssid = "1">Focused Summarization In this section, we describe our Bayesian query- focused summarization model (BAYESUM).</S>
			<S sid ="21" ssid = "2">This task is very similar to the standard ad-hoc IR task, with the important distinction that we are comparing query models against sentence models, rather than against document models.</S>
			<S sid ="22" ssid = "3">The shortness of sentences means that one must do a good job of creating the query models.</S>
			<S sid ="23" ssid = "4">To maintain generality, so that our model is applicable to any problem for which multiple relevant documents are known for a query, we formulate our model in terms of relevance judgments.</S>
			<S sid ="24" ssid = "5">For a collection of D documents and Q queries, we assume we have a D × Q binary matrix r, where rdq = 1 if an only if document d is relevant to query q. In multidocument summarization, rdq will be 1 exactly when d is in the document set corresponding to query q; in search-engine sum 305 Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 305–312, Sydney, July 2006.</S>
			<S sid ="25" ssid = "6">Qc 2006 Association for Computational Linguistics marization, it will be 1 exactly when d is returned by the search engine for query q. 2.1 Language Modeling for IR.</S>
			<S sid ="26" ssid = "7">BAYESUM is built on the concept of language models for information retrieval.</S>
			<S sid ="27" ssid = "8">The idea behind the language modeling techniques used in IR is to represent either queries or documents (or both) as probability distributions, and then use standard probabilistic techniques for comparing them.</S>
			<S sid ="28" ssid = "9">These probability distributions are almost always “bag of words” distributions that assign a proba bility to words from a fixed vocabulary V . One approach is to build a probability distribution for a given document, pd(·), and to look at the probability of a query under that distribution: pd(q).</S>
			<S sid ="29" ssid = "10">Documents are ranked according to how likely they make the query (Ponte and Croft, 1998).</S>
			<S sid ="30" ssid = "11">Other researchers have built probability distributions over queries pq (·) and ranked doc uments according to how likely they look under the query model: pq (d) (Lafferty and Zhai, 2001).</S>
			<S sid ="31" ssid = "12">A third approach builds a probability distribution pq (·) for the query, a probability distribution pd(·) for the document and then measures the similarity between these two distributions using KL divergence (Lavrenko et al., 2002): pq (w) query, because it provides background information about the document (but is not relevant to a known query) or simply because it contains useless, general English filler.</S>
			<S sid ="32" ssid = "13">Similarly, we model each word as appearing for one of those purposes.</S>
			<S sid ="33" ssid = "14">More specifically, our model assumes that each word can be assigned a discrete, exact source, such as “this word is relevant to query q1” or “this word is general English.” At the sentence level, however, sentences are assigned degrees: “this sentence is 60% about query q1, 30% background document information, and 10% general English.” To model this, we define a general English language model, pG(·) to capture the English filler.</S>
			<S sid ="34" ssid = "15">Furthermore, for each document dk , we define a background document language model, pdk (·); similarly, for each query qj , we define a query-specific language model pqj (·).</S>
			<S sid ="35" ssid = "16">Every word in a document dk is modeled as being generated from a mixture of pG, pdk and {pqj : query qj is relevant to document dk }.</S>
			<S sid ="36" ssid = "17">Supposing there are J total queries and K total documents, we say that the nth word from the sth sentence in document d, wdsn, has a corresponding hidden variable, zdsn that specifies exactly which of these distributions is used to generate that one word.</S>
			<S sid ="37" ssid = "18">In particular, zdsn is a vector of length 1 + J + K, where exactly one element is 1 and the rest are 0.</S>
			<S sid ="38" ssid = "19">KL (pq || pd) = , pq (w) log w∈V pd(w) (1) At the sentence level, we introduce a second layer of hidden variables.</S>
			<S sid ="39" ssid = "20">For the sth sentence in The KL divergence between two probability distributions is zero when they are identical and otherwise strictly positive.</S>
			<S sid ="40" ssid = "21">It implicitly assumes that both distributions pq and pd have the same support: they assign nonzero probability to ex actly the same subset of V ; in order to account for this, the distributions pq and pd are smoothed against a background general English model.</S>
			<S sid ="41" ssid = "22">This final mode—the KL model—is the one on which BAYESUM is based.</S>
			<S sid ="42" ssid = "23">2.2 Bayesian Statistical Model.</S>
			<S sid ="43" ssid = "24">In the language of information retrieval, the query focused sentence extraction task boils down to estimating a good query model, pq (·).</S>
			<S sid ="44" ssid = "25">Once we have such a model, we could estimate sentence models for each sentence in a relevant document, and rank the sentences according to Eq (1).</S>
			<S sid ="45" ssid = "26">The BAYESUM system is based on the following model: we hypothesize that a sentence appears in a document because it is relevant to some document d, we let πds be a vector also of length 1 + J + K that represents our degree of belief that this sentence came from any of the models.</S>
			<S sid ="46" ssid = "27">The πdss lie in the J + K dimensional simplex ∆J +K = {θ = (θ1, . . .</S>
			<S sid ="47" ssid = "28">, θJ +K+1) : (∀i) θi ≥0, &gt;, θi = 1}.</S>
			<S sid ="48" ssid = "29">The interpretation of the π vari ables is that if the “general English” component of π is 0.9, then 90% of the words in this sentence will be general English.</S>
			<S sid ="49" ssid = "30">The π and z variables are constrained so that a sentence cannot be generated by a document language model other than its own document and cannot be generated by a query language model for a query to which it is not relevant.</S>
			<S sid ="50" ssid = "31">Since the πs are unknown, and it is unlikely that there is a “true” correct value, we place a corpus- level prior on them.</S>
			<S sid ="51" ssid = "32">Since π is a multinomial distribution over its corresponding zs, it is natural to use a Dirichlet distribution as a prior over π.</S>
			<S sid ="52" ssid = "33">A Dirichlet distribution is parameterized by a vector α of equal length to the corresponding multinomial parameter, again with the positivity restric tion, but no longer required to sum to one.</S>
			<S sid ="53" ssid = "34">It has continuous density over a variable θ1, . . .</S>
			<S sid ="54" ssid = "35">, θI given by: Dir(θ | α) = Γ( i αi) i Γ(αi) ni θ αi−1 i . The.</S>
			<S sid ="55" ssid = "36">first term is a normalization term that ensures that ∆I dθ Dir(θ | α) = 1.</S>
			<S sid ="56" ssid = "37">2.3 Generative Story.</S>
			<S sid ="57" ssid = "38">The generative story for our model defines a distribution over a corpus of queries, {qj }1:J , and documents, {dk }1:K , as follows: 1.</S>
			<S sid ="58" ssid = "39">For each query j = 1 . . .</S>
			<S sid ="59" ssid = "40">J : Generate each.</S>
			<S sid ="60" ssid = "41">word qjn in qj by pqj (qjn) 2.</S>
			<S sid ="61" ssid = "42">For each document k = 1 . . .</S>
			<S sid ="62" ssid = "43">K and each.</S>
			<S sid ="63" ssid = "44">sentence s in document k: (a) Select the current sentence degree πks by Dir(πks | α)rk (πks) Figure 1: Graphical model for the Bayesian Query-Focused Summarization Model.</S>
			<S sid ="64" ssid = "45">(b) For each word wksn in sentence s:• Select the word source zksn accord p (q1:J , r, d1:K ) = r n n pqj (qjn) l × (2) ing to Mult(z | πks) j n • Generate the word wksn by r n n  p (wksn) if zksn = 0 k s ∆ dπks p (πks | α, r) pdk (wksn) if zksn = k + 1  pqj (wksn) if zksn = j + K + 1 We used r to denote relevance judgments: rk (π) = 0 if any document component of π except the one corresponding to k is nonzero, or if any query component of π except those queries to which document k is deemed relevant is nonzero (this prevents a document using the “wrong” document or query components).</S>
			<S sid ="65" ssid = "46">We have further assumed that the z vector is laid out so that z0 cor responds to general English, zk+1 corresponds to document dk for 0 ≤ j &lt; J and that zj+K+1 cor l n , p (zksn | πks) p (wksn | zksn) n zksn This expression computes the probability of the data by integrating out the unknown variables.</S>
			<S sid ="66" ssid = "47">In the case of the π variables, this is accomplished by integrating over ∆, the multinomial simplex, according to the prior distribution given by α.</S>
			<S sid ="67" ssid = "48">In the case of the z variables, this is accomplished by summing over all possible (discrete) values.</S>
			<S sid ="68" ssid = "49">The final word probability is conditioned on the z value by selecting the appropriate distribution from pG, responds to query qj for 0 ≤ k &lt; K. pD and pQ . Computing this expression and.</S>
			<S sid ="69" ssid = "50">finding 2.4 Graphical Model.</S>
			<S sid ="70" ssid = "51">The graphical model corresponding to this generative story is in Figure 1.</S>
			<S sid ="71" ssid = "52">This model depicts the four known parameters in square boxes (α, pQ, pD and pG) with the three observed random variables in shaded circles (the queries q, the relevance judgments r and the words w) and two unobserved random variables in empty circles (the word-level indicator variables z and the sentence level degrees π).</S>
			<S sid ="72" ssid = "53">The rounded plates denote replication: there are J queries and K documents, containing S sentences in a given document and N words in a given sentence.</S>
			<S sid ="73" ssid = "54">The joint probability over the observed random variables is given in Eq (2): optimal model parameters is intractable due to the coupling of the variables under the integral.</S>
	</SECTION>
	<SECTION title="Statistical Inference in BAYESUM. " number = "3">
			<S sid ="74" ssid = "1">Bayesian inference problems often give rise to intractable integrals, and a large variety of techniques have been proposed to deal with this.</S>
			<S sid ="75" ssid = "2">The most popular are Markov Chain Monte Carlo (MCMC), the Laplace (or saddle point) approximation and the variational approximation.</S>
			<S sid ="76" ssid = "3">A third, less common, but very effective technique, especially for dealing with mixture models, is expectation propagation (Minka, 2001).</S>
			<S sid ="77" ssid = "4">In this paper, we will focus on expectation propagation; experiments not reported here have shown variational EM to perform comparably but take roughly 50% longer to converge.</S>
			<S sid ="78" ssid = "5">Expectation propagation (EP) is an inference technique introduced by Minka (2001) as a generalization of both belief propagation and assumed density filtering.</S>
			<S sid ="79" ssid = "6">In his thesis, Minka showed that EP is very effective in mixture modeling problems, and later demonstrated its superiority to variational techniques in the Generative Aspect Model (Minka and Lafferty, 2003).</S>
			<S sid ="80" ssid = "7">The key idea is to compute an integral of a product of terms by iteratively applying a sequence of “deletion/inclusion” steps.</S>
			<S sid ="81" ssid = "8">Given an integral of the typically broken down into four fields of increasing length: the title (34 words), the summary (1 sentence), the narrative (24 sentences) and the concepts (a list of keywords).</S>
			<S sid ="82" ssid = "9">Obviously, one would expect that the longer the query, the better a model would be able to do, and this is borne out experimentally (Section 4.5).</S>
			<S sid ="83" ssid = "10">Of the TREC data, we have trained our model on 350 queries (queries numbered 51 350 and 401450) and all corresponding relevant documents.</S>
			<S sid ="84" ssid = "11">This amounts to roughly 43k documents, 2.1m sentences and 65.8m words.</S>
			<S sid ="85" ssid = "12">The mean number of relevant documents per query is 137 form: ( dπ p(π) nn tn(π), EP approximat es and the median is 81 (the most prolific query has each term tn by a simpler term t˜n, giving Eq (3).</S>
			<S sid ="86" ssid = "13">dπ q(π) q(π) = p(π) n t˜n(π) (3) 968 relevant documents).</S>
			<S sid ="87" ssid = "14">On the other hand, each document is relevant to, on average, 1.11 queries (the median is 5.5 and the most generally relevant document is relevant to 20 different queries).</S>
			<S sid ="88" ssid = "15">In all ∆ ncases, we apply stemming using the Porter stem In each deletion/inclusion step, one of the approximate terms is deleted from q(·), leaving q−n(·) = q(·)/t˜n(·).</S>
			<S sid ="89" ssid = "16">A new approximation for tn(·) is computed so that tn(·)q−n(·) has the same integral, mean and variance as t˜n(·)q−n(·).</S>
			<S sid ="90" ssid = "17">This mer; for all other models, we remove stop words.</S>
			<S sid ="91" ssid = "18">In order to evaluate our model, we had seven human judges manually perform the query- focused sentence extraction task.</S>
			<S sid ="92" ssid = "19">The judges were supplied with the full TREC query and a single new approximation, t˜n(·) is then included back document relevant to that query, and were asked tointo the full expression for q(·) and the process re peats.</S>
			<S sid ="93" ssid = "20">This algorithm always has a fixed point and there are methods for ensuring that the approximation remains in a location where the integral is well-defined.</S>
			<S sid ="94" ssid = "21">Unlike variational EM, the approximation given by EP is global, and often leads to much more reliable estimates of the true integral.</S>
			<S sid ="95" ssid = "22">In the case of our model, we follow Minka and Lafferty (2003), who adapts latent Dirichlet allocation of Blei et al.</S>
			<S sid ="96" ssid = "23">(2003) to EP.</S>
			<S sid ="97" ssid = "24">Due to space constraints, we omit the inference algorithms and instead direct the interested reader to the description given by Minka and Lafferty (2003).</S>
	</SECTION>
	<SECTION title="Search-Engine Experiments. " number = "4">
			<S sid ="98" ssid = "1">The first experiments we run are for query-focused single document summarization, where relevant documents are returned from a search engine, and a short summary is desired of each document.</S>
			<S sid ="99" ssid = "2">4.1 Data.</S>
			<S sid ="100" ssid = "3">The data we use to train and test BAYESUM is drawn from the Text REtrieval Conference (TREC) competitions.</S>
			<S sid ="101" ssid = "4">This data set consists of queries, documents and relevance judgments, exactly as required by our model.</S>
			<S sid ="102" ssid = "5">The queries are select up to four sentences from the document that best met the needs given by the query.</S>
			<S sid ="103" ssid = "6">Each judge annotated 25 queries with some overlap to allow for an evaluation of inter-annotator agreement, yielding annotations for a total of 166 unique query/document pairs.</S>
			<S sid ="104" ssid = "7">On the doubly annotated data, we computed the inter annotator agreement using the kappa measure.</S>
			<S sid ="105" ssid = "8">The kappa value found was 0.58, which is low, but not abysmal (also, keep in mind that this is computed over only 25 of the 166 examples).</S>
			<S sid ="106" ssid = "9">4.2 Evaluation Criteria.</S>
			<S sid ="107" ssid = "10">Since there are differing numbers of sentences selected per document by the human judges, one cannot compute precision and recall; instead, we opt for other standard IR performance measures.</S>
			<S sid ="108" ssid = "11">We consider three related criteria: mean average precision (MAP), mean reciprocal rank (MRR) and precision at 2 (P@2).</S>
			<S sid ="109" ssid = "12">MAP is computed by calculating precision at every sentence as ordered by the system up until all relevant sentences are selected and averaged.</S>
			<S sid ="110" ssid = "13">MRR is the reciprocal of the rank of the first relevant sentence.</S>
			<S sid ="111" ssid = "14">P@2 is the precision computed at the first point that two relevant sentences have been selected (in the rare case that humans selected only one sentence, we use P@1).</S>
			<S sid ="112" ssid = "15">4.3 Baseline Models.</S>
			<S sid ="113" ssid = "16">As baselines, we consider four strawman models and two state-of-the-art information retrieval models.</S>
			<S sid ="114" ssid = "17">The first strawman, RANDOM ranks sentences randomly.</S>
			<S sid ="115" ssid = "18">The second strawman, POSITION, ranks sentences according to their absolute position (in the context of non-query-focused summarization, this is an incredibly powerful baseline).</S>
			<S sid ="116" ssid = "19">The third and fourth models are based on the vector space interpretation of IR.</S>
			<S sid ="117" ssid = "20">The third model, JACCARD, uses standard Jaccard distance score (intersection over union) between each sentence and the query to rank sentences.</S>
			<S sid ="118" ssid = "21">The fourth, COSINE, uses TFIDF weighted cosine similarity.</S>
			<S sid ="119" ssid = "22">The two state-of-the-art IR models used as comparative systems are based on the language modeling framework described in Section 2.1.</S>
			<S sid ="120" ssid = "23">These systems compute a language model for each query and for each sentence in a document.</S>
			<S sid ="121" ssid = "24">Sentences are then ranked according to the KL divergence between the query model and the sentence model, smoothed against a general model estimated from the entire collection, as described in the case of document retrieval by Lavrenko et al.</S>
			<S sid ="122" ssid = "25">(2002).</S>
			<S sid ="123" ssid = "26">This is the first system we compare against, called KL.</S>
			<S sid ="124" ssid = "27">The second true system, KL+REL is based on augmenting the KL system with blind relevance feedback (query expansion).</S>
			<S sid ="125" ssid = "28">Specifically, we first run each query against the document set returned by the relevance judgments and retrieve the top n sentences.</S>
			<S sid ="126" ssid = "29">We then expand the query by interpolating the original query model with a query model estimated on these sentences.</S>
			<S sid ="127" ssid = "30">This serves as a method of query expansion.</S>
			<S sid ="128" ssid = "31">We ran experiments ranging n in {5, 10, 25, 50, 100} and the interpo lation parameter λ in {0.2, 0.4, 0.6, 0.8} and used oracle selection (on MRR) to choose the values that performed best (the results are thus overly optimistic).</S>
			<S sid ="129" ssid = "32">These values were n = 25 and λ = 0.4.</S>
			<S sid ="130" ssid = "33">Of all the systems compared, only BAYESUM and the KL+REL model use the relevance judgments; however, they both have access to exactly the same information.</S>
			<S sid ="131" ssid = "34">The other models only run on the subset of the data used for evaluation (the corpus language model for the KL system and the IDF values for the COSINE model are computed on the full data set).</S>
			<S sid ="132" ssid = "35">EP ran for 2.5 hours.</S>
			<S sid ="133" ssid = "36">Table 1: Empirical results for the baseline models as well as BAYESUM, when all query fields are used.</S>
			<S sid ="134" ssid = "37">4.4 Performance on all Query Fields.</S>
			<S sid ="135" ssid = "38">Our first evaluation compares results when all query fields are used (title, summary, description and concepts1).</S>
			<S sid ="136" ssid = "39">These results are shown in Table 1.</S>
			<S sid ="137" ssid = "40">As we can see from these results, the JAC- CARD system alone is not sufficient to beat the position-based baseline.</S>
			<S sid ="138" ssid = "41">The COSINE does beat the position baseline by a bit of a margin (5 points better in MAP, 9 points in MRR and 4 points in P@2), and is in turn beaten by the KL system (which is 7 points, 14 points and 4 points better in MAP, MRR and P@2, respectively).</S>
			<S sid ="139" ssid = "42">Blind relevance feedback (parameters of which were chosen by an oracle to maximize the P@2 metric) actually hurts MAP and MRR performance by 0.3 and 1.2, respectively, and increases P@2 by 1.5.</S>
			<S sid ="140" ssid = "43">Over the best performing baseline system (either KL or KL+REL), BAYESUM wins by a margin of 7.5 points in MAP, 6.7 for MRR and 4.4 for P@2.</S>
			<S sid ="141" ssid = "44">4.5 Varying Query Fields.</S>
			<S sid ="142" ssid = "45">Our next experimental comparison has to do with reducing the amount of information given in the query.</S>
			<S sid ="143" ssid = "46">In Table 2, we show the performance of the KL, KLREL and BAYESUM systems, as we use different query fields.</S>
			<S sid ="144" ssid = "47">There are several things to notice in these results.</S>
			<S sid ="145" ssid = "48">First, the standard KL model without blind relevance feedback performs worse than the position-based model when only the 34 word title is available.</S>
			<S sid ="146" ssid = "49">Second, BAYESUM using only the title outperform the KL model with relevance feedback using all fields.</S>
			<S sid ="147" ssid = "50">In fact, one can apply BAYESUM without using any of the query fields; in this case, only the relevance judgments are available to make sense 1A reviewer pointed out that concepts were later removed from TREC because they were “too good.” Section 4.5 considers the case without the concepts fi eld.</S>
			<S sid ="148" ssid = "51">44 42 40 38 36 34 32 30 Table 2: Empirical results for the position-based model, the KL-based models and BAYESUM, with different inputs.</S>
			<S sid ="149" ssid = "52">of what the query might be.</S>
			<S sid ="150" ssid = "53">Even in this circumstance, BAYESUM achieves a MAP of 39.4, an MRR of 64.7 and a P@2 of 30.4, still better across the board than KLREL with all query fields.</S>
			<S sid ="151" ssid = "54">While initially this seems counterintuitive, it is actually not so unreasonable: there is significantly more information available in several hundred positive relevance judgments than in a few sentences.</S>
			<S sid ="152" ssid = "55">However, the simple blind relevance feedback mechanism so popular in IR is unable to adequately model this.</S>
			<S sid ="153" ssid = "56">With the exception of the KL model without relevance feedback, adding the description on top of the title does not seem to make any difference for any of the models (and, in fact, occasionally hurts according to some metrics).</S>
			<S sid ="154" ssid = "57">Adding the summary improves performance in most cases, but not significantly.</S>
			<S sid ="155" ssid = "58">Adding concepts tends to improve results slightly more substantially than any other.</S>
			<S sid ="156" ssid = "59">4.6 Noisy Relevance Judgments.</S>
			<S sid ="157" ssid = "60">Our model hinges on the assumption that, for a given query, we have access to a collection of known relevant documents.</S>
			<S sid ="158" ssid = "61">In most real-world cases, this assumption is violated.</S>
			<S sid ="159" ssid = "62">Even in multi- document summarization as run in the DUC competitions, the assumption of access to a collection of documents all relevant to a user need is unrealistic.</S>
			<S sid ="160" ssid = "63">In the real world, we will have to deal with document collections that “accidentally” contain irrelevant documents.</S>
			<S sid ="161" ssid = "64">The experiments in this section show that BAYESUM is comparatively robust.</S>
			<S sid ="162" ssid = "65">For this experiment, we use the IR engine that performed best in the TREC 1 evaluation: In- query (Callan et al., 1992).</S>
			<S sid ="163" ssid = "66">We used the offi 28 0.4 0.5 0.6 0.7 0.8 0.9 1 R−precision of IR Engine Figure 2: Performance with noisy relevance judgments.</S>
			<S sid ="164" ssid = "67">The X axis is the R-precision of the IR engine and the Y-axis is the summarization performance in MAP.</S>
			<S sid ="165" ssid = "68">Solid lines are BAYESUM, dotted lines are KLRel.</S>
			<S sid ="166" ssid = "69">Blue/stars indicate title only, red/circles indicated title+description+summary and black/pluses indicate all fields.</S>
			<S sid ="167" ssid = "70">cial TREC results of Inquery on the subset of the TREC corpus we consider.</S>
			<S sid ="168" ssid = "71">The Inquery R- precision on this task is 0.39 using title only, and 0.51 using all fields.</S>
			<S sid ="169" ssid = "72">In order to obtain curves as the IR engine improves, we have linearly interpolated the Inquery rankings with the true relevance judgments.</S>
			<S sid ="170" ssid = "73">By tweaking the interpolation parameter, we obtain an IR engine with improving performance, but with a reasonable bias.</S>
			<S sid ="171" ssid = "74">We have run both BAYESUM and KLRel on the relevance judgments obtained by this method for six values of the interpolation parameter.</S>
			<S sid ="172" ssid = "75">The results are shown in Figure 2.</S>
			<S sid ="173" ssid = "76">As we can observe from the figure, the solid lines (BAYESUM) are always above the dotted lines (KLRel).</S>
			<S sid ="174" ssid = "77">Considering the KLRel results alone, we can see that for a non perfect IR engine, it makes little difference what query fields we use for the summarization task: they all obtain roughly equal scores.</S>
			<S sid ="175" ssid = "78">This is because the performance in KLRel is dominated by the performance of the IR engine.</S>
			<S sid ="176" ssid = "79">Looking only at the BAYESUM results, we can see a much stronger, and perhaps surprising difference.</S>
			<S sid ="177" ssid = "80">For an imperfect IR system, it is better to use only the title than to use the title, description and summary for the summarization component.</S>
			<S sid ="178" ssid = "81">We believe this is because the title is more on topic than the other fields, which contain terms like “A relevant document should describe . . .</S>
			<S sid ="179" ssid = "82">.” Never theless, BAYESUM has a more upward trend than KLRel, which indicates that improved IR will result in improved summarization for BAYESUM but not for KLRel.</S>
	</SECTION>
	<SECTION title="Multidocument Experiments. " number = "5">
			<S sid ="180" ssid = "1">We present two results using BAYESUM in the multidocument summarization settings, based on the official results from the Multilingual Summarization Evaluation (MSE) and Document Understanding Conference (DUC) competitions in 2005.</S>
			<S sid ="181" ssid = "2">5.1 Performance at MSE 2005.</S>
			<S sid ="182" ssid = "3">We participated in the Multilingual Summarization Evaluation (MSE) workshop with a system based on BAYESUM.</S>
			<S sid ="183" ssid = "4">The task for this competition was generic (no query) multidocument sum- marization.</S>
			<S sid ="184" ssid = "5">Fortunately, not having a query is not a hindrance to our model.</S>
			<S sid ="185" ssid = "6">To account for the redundancy present in document collections, we applied a greedy selection technique that selects sentences central to the document cluster but far from previously selected sentences (Daume´ III and Marcu, 2005a).</S>
			<S sid ="186" ssid = "7">In MSE, our system performed very well.</S>
			<S sid ="187" ssid = "8">According to the human “pyramid” evaluation, our system came first with a score of 0.529; the next best score was 0.489.</S>
			<S sid ="188" ssid = "9">In the automatic “Basic Element” evaluation, our system scored 0.0704 (with a 95% confidence interval of [0.0429, 0.1057]), which was the third best score on a site basis (out of 10 sites), and was not statistically significantly different from the best system, which scored 0.0981.</S>
			<S sid ="189" ssid = "10">5.2 Performance at DUC 2005.</S>
			<S sid ="190" ssid = "11">We also participated in the Document Understanding Conference (DUC) competition.</S>
			<S sid ="191" ssid = "12">The chosen task for DUC was query-focused multidocument summarization.</S>
			<S sid ="192" ssid = "13">We entered a nearly identical system to DUC as to MSE, with an additional rule- based sentence compression component (Daume´ III and Marcu, 2005b).</S>
			<S sid ="193" ssid = "14">Human evaluators considered both responsiveness (how well did the summary answer the query) and linguistic quality.</S>
			<S sid ="194" ssid = "15">Our system achieved the highest responsiveness score in the competition.</S>
			<S sid ="195" ssid = "16">We scored more poorly on the linguistic quality evaluation, which (only 5 out of about 30 systems performed worse); this is likely due to the sentence compression we performed on top of BAYESUM.</S>
			<S sid ="196" ssid = "17">On the automatic Rouge-based evaluations, our system performed between third and sixth (depending on the Rouge parameters), but was never statistically significantly worse than the best performing systems.</S>
	</SECTION>
	<SECTION title="Discussion and Future Work. " number = "6">
			<S sid ="197" ssid = "1">In this paper we have described a model for automatically generating a query-focused summary, when one has access to multiple relevance judgments.</S>
			<S sid ="198" ssid = "2">Our Bayesian Query Focused Summarization model (BAYESUM) consistently outperforms contending, state of the art information retrieval models, even when it is forced to work with significantly less information (either in the complexity of the query terms or the quality of relevance judgments documents).</S>
			<S sid ="199" ssid = "3">When we applied our system as a stand-alone summarization model in the 2005 MSE and DUC tasks, we achieved among the highest scores in the evaluation metrics.</S>
			<S sid ="200" ssid = "4">The primary weakness of the model is that it currently only operates in a purely extractive setting.</S>
			<S sid ="201" ssid = "5">One question that arises is: why does BAYESUM so strongly outperform KLRel, given that BAYESUM can be seen as Bayesian formalism for relevance feedback (query expansion)?</S>
			<S sid ="202" ssid = "6">Both models have access to exactly the same information: the queries and the true relevance judgments.</S>
			<S sid ="203" ssid = "7">This is especially interesting due to the fact that the two relevance feedback parameters for KLRel were chosen optimally in our experiments, yet BAYESUM consistently won out.</S>
			<S sid ="204" ssid = "8">One explanation for this performance win is that BAYESUM provides a separate weight for each word, for each query.</S>
			<S sid ="205" ssid = "9">This gives it significantly more flexibility.</S>
			<S sid ="206" ssid = "10">Doing something similar with ad-hoc query expansion techniques is difficult due to the enormous number of parameters; see, for instance, (Buckley and Salton, 1995).</S>
			<S sid ="207" ssid = "11">One significant advantage of working in the Bayesian statistical framework is that it gives us a straightforward way to integrate other sources of knowledge into our model in a coherent manner.</S>
			<S sid ="208" ssid = "12">One could consider, for instance, to extend this model to the multi-document setting, where one would need to explicitly model redundancy across documents.</S>
			<S sid ="209" ssid = "13">Alternatively, one could include user models to account for novelty or user preferences along the lines of Zhang et al.</S>
			<S sid ="210" ssid = "14">(2002).</S>
			<S sid ="211" ssid = "15">Our model is similar in spirit to the random- walk summarization model (Otterbacher et al., 2005).</S>
			<S sid ="212" ssid = "16">However, our model has several advantages over this technique.</S>
			<S sid ="213" ssid = "17">First, our model has no tunable parameters: the random-walk method has many (graph connectivity, various thresholds, choice of similarity metrics, etc.).</S>
			<S sid ="214" ssid = "18">Moreover, since our model is properly Bayesian, it is straightforward to extend it to model other aspects of the problem, or to related problems.</S>
			<S sid ="215" ssid = "19">Doing so in a non ad-hoc manner in the random-walk model would be nearly impossible.</S>
			<S sid ="216" ssid = "20">Another interesting avenue of future work is to relax the bag-of-words assumption.</S>
			<S sid ="217" ssid = "21">Recent work has shown, in related models, how this can be done for moving from bag-of-words models to bag-of- ngram models (Wallach, 2006); more interesting than moving to ngrams would be to move to dependency parse trees, which could likely be accounted for in a similar fashion.</S>
			<S sid ="218" ssid = "22">One could also potentially relax the assumption that the relevance judgments are known, and attempt to integrate them out as well, essentially simultaneously performing IR and summarization.</S>
			<S sid ="219" ssid = "23">Acknowledgments.</S>
			<S sid ="220" ssid = "24">We thank Dave Blei and Tom Minka for discussions related to topic models, and to the anonymous reviewers, whose comments have been of great benefi t. This work was partially supported by the National Science Foundation, Grant IIS0326276.</S>
	</SECTION>
</PAPER>
