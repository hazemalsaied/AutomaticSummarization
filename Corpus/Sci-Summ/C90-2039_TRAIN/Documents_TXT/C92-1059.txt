A TREATMENT OF NEGATIVE DESCRIPTIONS OF
TYPED FEATURE STRUCTURES
KIYOSHI KOGURE
NTT Basic Research Laboratories
9-11, Midori-cho 3-chome, Musashino-shi, Tokyo, 180 Japan
kogure©atom.ntt.jp
Abstract
A formal treatment of typed feature structures
(TFSs) is developed to augment TFSs, so that neg-
ative descriptions of them can be treated. Negative
descriptions of TFSs can make linguistic descriptions
compact and thus easy to understand. Negative de-
scriptions can be classified into three primitive nega-
tive descriptions: (1) negations of type symbols, (2)
negations of feature existences, and (3) negations of
feature-address value agreements. The formalization
proposed in this paper is based on Ait-Kaci&apos;s com-
plex terms. The first description is treated by extend-
ing type symbol lattices to include complement type
symbols. The second and third are treated by aug-
menting terns structures with structures representing
these negations. Algorithms for augmented-WS uni-
fication have been developed using graph unification,
and programs using these algorithms have been writ-
ten in Common Lisp.
1 Introduction
In unification-based or information-based linguistic
frameworks, the most important objects are struc-
tures called &apos;feature structures&apos; (FSs), which are used
to describe linguistic objects and phenomena. A fea-
ture structure is either atomic or complex: an atomic
FS is denoted by an atomic symbol; a complex FS
consists of a set of feature-value pairs each of which
describes an aspect of an object. Partial information
on an object is merged by applying the unification
operation to FSs.
Research on unification-based linguistic theories
has been accompanied by research on FSs themselves.
Several extensions on FSs or on feature descriptions
and formal treatments of the extensions have been
proposed.
Disjunctive and negative descriptions on FSs help
make the linguistic descriptions simple, compact, and
thus easy to understand. For disjunctive feature de-
scriptions, Kay[14] introduces them into FUG (Func-
tional Unification Grammar) and gives the procedu-
ral semantics. Karttunen[111 also proposes proce-
dural treatments of disjunctions in conjunction with
relatively simple negations. Rounds and Kasper[19,
13] propose a logic-based formalism—feature logic—
which uses automata to model FSs and can treat dis-
junctive feature descriptions, and they obtain impor-
tant results.
For negative descriptions of FSs, one of the most
fundamental properties of FSs, the partiality of in-
formation they carry, makes its insufficient to adopt
relatively simple treatments. Classical interpretation
of negation, for example, does not allow evaluation
of negations to be freely interleaved with unification.
Moshier and Rounds[171 propose a formal framework
which treats negative feature descriptions on the basis
of intuitionistic logic. However, their formalism has
trouble treating double negations. Dawar[5] proposes
a formal treatment based on three-valued logic.
In order to treat feature domains of complex FSs
and to treat taxonomic hierarchies of symbolic fea-
ture values, type (or sort) hierarchies have been in-
troduced, allowing definition of typed (or sorted)
feature-structures (Ms). A TI&apos;S consists of a type
symbol from a lattice and a set of feature-value pairs.
A TFS can be seen as a generalized concept of both
atomic and complex FSs. Pollard and Sag[ I8) intro-
duce sorts into II PSG (Head-driven Phrase Structtire
Grammar) and use sorted P.is to describe linguistic
objects.
AH-Kaci[ll proposes an algebraic framework using
the sit-types and c-types, one of promising formaliza-
tions of 1TSs, based on lattice theory. This formal-
ization was originally aimed at formalizing and in-
tegrating various kinds of knowledge representation
frameworks in Al. In this approach, types are defined
as equivalence classes of complex term structures. A
subsumption relation is defined on these term struc-
tures. The join and meet operations on them cor-
respond to the generalization and an opera-
tions on TFSs, respectively. This approach essentially
adopts &apos;type-as-set&apos; semantics. Subtype relationships
on type correspond to subsumption relationships on
denotations of types. Based on this frau a&apos; work, an
extension to Prolog,, LOGIN (2], has been developed.
Smolka[20] proposes a feature logic with subsoils.
In this approach, negative descriptions can be decoin-
posed into three kinds of primitive negations, namely,
negations of sorts or complement sorts which denote
the complements of sets that positive counterparts de-
note, negations of feature existences, and negations
of feature-address agreement or feature-address dis-
agreement. Smolka extends feature descriptions but
a feature-structure interpretation of an extended de-
scription does not include negative in fort nation and
corresponds to a simple TI&apos;S.
Some WS-based natural language processing sys-
tems have been developed[7, 24, 12, 15, 8, 22]. Car-
penter and Pollard [4] propose an interface to build
type lattices.
Formalizations of extended FSs and of extended
feature-descriptions, described above, are classified
into two classes: (1) extensions of FSs themselves,
and (2) extensions not of Pis themselves hut of
feature-descriptions. Previous attempts to introduce
type hierarchies fall into the former class while pre-
vious treatments of disjunctive and negative descrip-
tions mainly fall into the latter.
Acres us COLINGt92, NANTES, 23-28 Am-Yr 1992 380 PROC. OF COLING-92, NANTES, AuG, 23-28, 1992
This paper proposes an extension to Ait-haci&apos;s
V&apos;-
type that incorporates three kinds of the primitive
negative descriptions described below into the 0-type.
Ait-Kaci&apos;s 0-type formalization uses ter in structures.
In this paper, both these type structures and the type
symbol lattice on which term structures are defined
are extended to treat negative descriptions. Nega-
tions of type symbols are treated by extending type
symbol lattices, and negations of feature existwices
and feature-address disagreements are treated by ex-
tending term structures. This extension can be seen
as intuitionistic. The extension is classified into class
(1) above.
Based on this paper's formalization, unification al-
gorithms have been developed using graph unification
techniques[23, 16]. Programs based on these algo-
rithms have been implemented in Common Lisp.
</bodyText>
<sectionHeader confidence="0.650502" genericHeader="method">
2 Requirements of Negative
</sectionHeader>
<subsectionHeader confidence="0.434954">
Descriptions of TFSs
</subsectionHeader>
<bodyText confidence="0.971192533333333">
In describing linguistic information using (typed) fea-
ture structures, negative descriptions make the de-
scription compact, intuitive, and hence easy to under-
stand. For example, we want to describe the gram-
matical agreement for an English verb, say &amp;quot;eat&amp;quot;, nat-
urally as follows.
syn[ (
agreement igr{ t; number s
person 3rd -\
This description specifies compactly and directly that
it is not the case that the person attribute is third
and that the number attribute is singular. If we
could not use such complex negative descriptions, we
would write it using disjunctive descriptions with sim-
ple complement types as follows.
</bodyText>
<equation confidence="0.674182333333333">
isyn( agreement up{ person --,3rd]
1 syn( agreement up{ number I ]
Or
</equation>
<bodyText confidence="0.998926764705882">
{syn1 agreement apt person 1st]]
syn( agreement nut person 2nd] ]
syn( agreement awl number pil ]
In this case, (1) is easier to understand than (2) or
(3).
In the above case, we can describe the informa-
tion because the complex negative descriptions can
be transformed into the disjunction of simple negative
descriptions (with an almost, same intended mean-
ing) and because both person and number features
take their values from {1st, 2nd, 3rd) and Isg,p1).
However, it is not always the case that such transfor-
mations are possible and that feature takes its value
from a finite set.
Let us consider more complicated cases using dif-
ference lists expressed using feature structures.1 The
empty list of categories is represented as follows.
</bodyText>
<equation confidence="0.976748">
(Hist{ in X1 : list]
OW X1 (4)
</equation>
<bodyText confidence="0.999914857142857">
In the above example, the tag symbol, X1 shows that
features in and out must take the same value.
&apos;In 11PSG and JPSG (Japanese Phrase Structure
Grammar), a difference fist is very convenient for express-
ing subcat and stash feature values.
How can only non-emptiness be expressed&apos;? Iii is
is impossible using complement, type symbols or dis-
junctions because we Call consider the set of all finite
length lists whose elements cant be taken from infinite
sets. Direct or indirect extension of feature structures
is required.
So far, we have discussed the requirenient of nega-
tive descriptions of type symbols and of feature-value
agreements front the viewpoint cif capability of de-
scribing linguistic information. There are other ad-
vantages of allowing negative descriptions. Consider,
for example, debugging processes of grammatical de-
scriptions by parsing sample sentences. We may ob-
tain unexpected results such as a TES with an it
type symbol, a &apos;IFS with an unexpected fea-
ture value agreement and so on. In such situations,
negative descriptions can be useful tools for detecting
their reasons.
&apos;lb make linguistic descriptions compact and thus
easy to understand, to treat natural language effi-
ciently, and to detect error reasons rapidly, it is neces-
sary to develop formalizations and methods of treat.-
Mg negative descriptions.
3 Formal Treatment of Negative
Descriptions of TFSs
As stated earlier, a typed feature structure (TI&apos;S)
consists of a type symbol and a set of feature-value
pairs. l&apos;hus, descriptions of TF,Ss are classified into
descriptions of TFSs having:
(I) a certain type symbol (or having a subtype sym-
bol of it certain type symbol),
(2) a feature, and
(3) two feature-address values that agree.
A TFS can be described by using conjunctions and
disjunctions of such kinds of descriptions. A conjunc-
tive and disjunctive TFS can be formalized as Alt-
aci&apos;s 0-type and e-type, respectively. &apos;that is, a
0-type, which has a complex term structure called a
0-term as its syntax, represents a conjunction of such
kinds of descriptions or a conjunctive typed feature
structure, and an n-type is a maximal set of 0-types
representing the disjunction of them.
Negative counterparts of these descriptions are
classified nito descriptions of TFSs:
(1&apos;) not having a certain type symbol (or having a
type symbol which is not subsumed by a certain
type symbol),
(2&apos;) not having it certain feature, and
(3&apos;) having two feature-address values that do not
agree.
Ily incorporating structures representing such neg-
ative descriptions into a 0-term, a &apos;[&apos;F&apos;S with the neg..
ative descriptions can be formalized. Such it term is
called an augmented thterm and a type with an aug-
mented 0-term as its syntax is called an augmented
0-type. From augmented 0-terms, an augmented (-
term can be constructed in the same manner that an
e- term is constructed from 0-terms.
Next, augmented 0,-terms and 0-types are defined.
&apos;Fenn structures are first augmented with structures
representing in features and disagreement of
feature address values. Then, type symbol lattices
are extended to include complement type symbols as
suggested in [1].
(1)
Acres DE COLING-92, NAnn ES, 23-28 min&apos; 1992 3 8 1 Pxoc. OF COLING-92, NANTES, AUG. 23-28, 1992
3.1 Typed Feature Structures as
Augmented g&apos;Types
In order to define complex term structures, a signa-
ture is used to specify their vocabulary. It serves as
the interface between their syntax and semantics. A
signature is formally defined as follows,
Definition 1 A signature is a quadruple (7, &lt;7
V) consisting of:
1. a set T of type symbols containing T and
2. a partial order &lt;7 on T such that
(a) I. is the least and T is the greatest element,
and
(b) every pair of type symbols a, b E 7 have a
least upper bound or join, which is denoted
by a VT b and a greatest lower bound or
meet, which is denoted by a AT b,
3. a set T of feature symbols, and
4. a set V of tag symbols
where T, F and V are pairwise disjoint.
A simple &apos;type-as-set&apos; semantics is adopted for
these objects, That is, a type symbol in T denotes
a set of objects in an interpretation, Here, T and
.1 denote the sets called the universe, written as U,
and the empty set 0, respectively. Another element
a denotes a nonempty subset of U, written as [a].
The partial order &lt;T denotes the subsumption rela-
tion between these sets; for any type symbols a, b,
and c,
1. a &lt;7 b if and only if[a C [b],
2. a VT b = c if and only if [a] U [b] = [cil, and
3. a AT b = c if and only if lain 114 =
A feature symbol denotes a function from a subset
of U to U. A feature path is a finite string of feature
symbols and denotes the function obtained by the
composition of the functions that the feature symbols
denote.
A term is defined from a signature. First, a term
domain is defined as a skeleton built from feature
symbols.
Definition 2 A term domain A on T is a set of finite
strings of feature symbols in (including the empty
string e) such that
1. A is prefix-closed: Vp, q E I&apos;, if p • g E A, then
p E A; and
2. A is finitely branching: if p E A, then If E
E A} is finite
where is the string concatenation operator.
An element of a term domain is called a feature
address or a feature path. By definition, the empty
string c must belong to all term domains and is called
the root address. A term domain is represented by
a rooted directed graph within which each arc has a
feature symbol as its label.
A subdomain of a term domain, corresponding to
a subgraph, is defined as follows,
Definition 3 Given a term domain A and a feature
address p E A, the subdomain of A at p is defined to
be the term domain A/p := {P&apos; I P • P&apos; E A}. The set
of all subdomains of A is denoted by Subdom(A).
Next, flesh is put on the term structure&apos;s skele-
ton as defined as a term domain by assigning several
kinds of objects to each feature address. Alt-Kaci&apos;s
term structure, the basis of the tit-type, is defined by
assigning a type symbol and a tag symbol to each
feature address as follows.
Definition 4 A term is a triple (Ar, v) where A is
a term domain on .F, r is a type symbol function from
.7 to T such that r(T* — A) = IT), and v is a tag
symbol function from A to V.
Given a tag symbol function v, Addl.., denotes the
function from a tag symbol to the set of addresses:
Addr,(X) := Al v(p) = X}. (5)
In order to treat negations of feature existences and
feature-address value disagreement, the term struc-
ture defined above is augmented by assigning addi-
tional objects, a set of inhibited features and a set of
disagreement tag symbols, to each feature address.
Definition 5 An augmented term is a quintuple
(A, r, v, rn, x) where A is a term domain on r
is a type symbol function from ,F* to T such that
r(T* — A) _-= {T), v is a tag symbol function from
A to V, tO is an inhibited feature function front ,T*
to 2Y such that 0(p) is finite for any p E A and
(b(TI* — A) = 10), and x is a disagreement tag sym-
bol function from .T* to 2v such that x(p) is finite
for any p E A and x(T* — A) =
The inhibited feature function specifies which fea-
tures cannot exist at a given address. There is thus
inconsistency if there is an address p in A such that
tb(P)n{f E.FIP•f EA} 0. (6)
The disagreement tag symbol function x specifies,
for a given address, substructures with which its ar-
gument disagrees. There is thus inconsistency if there
is an address p in A such that
v(P) E X(P). (7)
The disagreement address function Disagr5 from
A to 2F., based on v and x, takes an address as its
argument, and gives the set of addresses with which
the argument address must disagree, called the dis-
agreement address set and defined as:
Disagr„,x(p) U Addr„(X). (8)
XEx(p)
Augmented terms are hereafter referred to simply
as terms unless stated otherwise.
Definition 6 Given a term = (A, r, v, rP, x) and a
feature address p in A, the subterin of t at the address
p is the term tip = (A/ p,r/p,v/p, (pip, x/p) where
r/p : T* v/p : A/p V, 5b/p : 2, and
— 2v are defined by
(r/p)(g) := r(p • q), (9a)
(v/P)(q) v(P 4), (9b)
(44P)(q) := 56(p • 9), (Sc)
(WOW := X(P • 9). (9d)
For a term t = (A, r, 0, X), a type symbol a (sim-
ilarly, a tag symbol or a term V) is said to occur in t
if there is a feature address p in A such that r(p) = a
(similarly, v(p) = X or X C x(p), or th = I&apos;).
A term I = (A, r, v, x) is said to be regular if the
set of all subtertns of t, Subterm(t) := {Ur I p E
A), is finite. Hereafter, we will consider only regular
terms. In a regular term, only finite numbers of type
symbols and tag symbols occur.
&apos;For any set S, 2s denotes the set of subsets of S.
ACIE.S DE COLING-92, NAMES, 23-28 Aoirr 1992 382 PROC. OF COLING-92, NArrres, Ann. 23-28, 1992
te.pty
Xi : {} dlist
in X2 : {first} {} : T
{ out X2
trsonemply
[X3 : () : {} : dlist
X4 : {} : {X6} : list
In [first X5 : {) : {)
out X6 : {) : {X4} : list
Figure I: Examples of Augmented Terms in Matrix
Notation
Gmtall tnonempty
Xl:{):{):dlist X3:{}:{):dlist
in out
X4:1):(X6)
X2: {first): (I list .
first
Est
X5:1):{}
Figure 2: Examples of Augmented Terms in Directed
Graph Notation
In a term, any two feature addresses bearing the
same symbol are said to corefer. Thus, the corefer-
ence relation a of a term is a relation defined on A as
the kernel of the tag function v; i.e., a := Ker(v) =
00. here, a is an equivalence relation and a a-
class is called a coreference class.
Definition 7 A term t is referentially consistent if
the same subterm occurs at all feature addresses in a
coreference class.
If a term is referentially consistent, then by defini-
tion, for any pi, P2 E A, if v(pi) = v(p2) then, for all
p such that pi • p E A, it follows that p2 • p E A and
v(pi • p) = v(p2 • p). Therefore, if a term is referen-
tially consistent, a is a right-invariant equivalence or
right-congruence on A. That is, for any pi, P2 E A,
if pocp2 then (pi p)tc(P2 p) for any p such that
PI P C A.
Definition 8 A well-formed term (wft.) is a
referentially-consistent regular term. The set of all
well-formed terms is denoted by W.TT.
A term can be represented in matrix notation. Ex-
amples of terms are shown in Figure 1. In this figure,
T, dlist and list are type symbols, in, oat and first
are feature symbols, and Xl, X2, ... are tag sym-
bols. A matrix represents a set of feature-value pairs
preceded by a tag symbol, followed by a set of inhib-
ited features and followed by a set of disagreement tag
symbols. In the term 4„,,,ty, its subterms at in and at
out corefer while i,,o„,„,p iy is a term in which its sub-
terms at in and at out should not corefer. The term
lUnpmy should not have the feature address in • first
while tnoflsmpCy has that address.
A term can also be represented by directed graphs
(DGs). 1mjiy and 1,,,„,„,pi y in Figure I are shown as
DGs in Figure 2.
The set 14./Y7&apos; of well-formed terms includes many
terms that have the same type symbol function, the
same coreference relations, the same inhibited feature
function, and the same disagreement address func-
tion but different tag symbol functions. These terms
have the same information and can describe the same
linguistic object or the same linguistic phenomena.
These terms construct equivalence classes by renarn-
nig tag symbols in a certain manner.
Definition 9 Two terms ti = , 01A , xi)
and 12 = (A2, r2, v2,02, X2) are alphabetical variants
of each other if and only if
1. Al = A2,
2. Ker(m) = Ker(v2),
3. r = r2r
4. 01 = 02, and
5. Disagr„,x,
This is written as ti 012.
According to &apos;type-as-set&apos; semantics, the symbols
T and _1 denote, respectively, the least informative
type- -the whole universe U and the overdefined or
inconsistency type—the empty set (6. Therefore, a
term containing A_ should be interpreted as inconsis-
tent. Such an inconsistency is called a type inconsis-
tency. To treat, such inconsistency, a relation 41 on
311.1.TY is defined as follows.
Definition 10 For any two terms (1, 12 G W_TT,
ti1,11 12 if and only if I occurs in both ti and 12.
There are other kinds of inconsistency as mentioned
earlier. If a term contains an address p such that
tjt(p)D {J. p f E it is inconsistent
because it [mans that there are features that should
not exist at the address. Such an inconsistency is
called a feature inconsistency.
In addition, if a term contains an address p such
that v(p) E x(p), it is inconsistent because it means
that the subterm at p does not agree with itself. Such
an inconsistency is called a tag inconsistency.
lien cc, the three kinds of inconsistency are treated
integratedly by a relation ff on W.FT defined as fol-
lows.
Definition 11 For any two terms 1i, 12 E WTT,
11 1,1 12 if and only if each of them contains at least
one address p such that
1. TOO
2. 0(p)(1{,/ eYlpICA) (4, or
3. 1-)(P) C X(1)).
Clearly, if I occurs in a term, it also occurs in all
terms in its a-class. This is also true for feature incon-
sistency and tag inconsistency. Hence, the relations a
and 1,1 are such that their [&apos;Mon becomes an equiv-
alence relation. Thus, we can defined the augmented
0-types as follows.
Definition 12 An augmented tp-type (or 1,G-type for
short) [1] is an element of the quotient set sit :=
34)4-iritaicTiC structures of augmented 8/-types will be
called augmented 0-terms. An augmented typed-
feature-structure can be formalized as an augmented
1P-t3Te•
The set of type symbols T lots the partial order •(7-
which denotes a subsnmption relation between the
set denoted by type symbols. The partial ordering
on 7- can be extended to augmented 0-terms and
types. The subsumption orders on W.TT and on sP
are defined as follows.
T]
out
— — —
X6:0:1X41
fist
ACTES DE COLING-92, NiorrEs, 23-28 Aoirr 1992 383 PRoc. OF COLING-92, NastrEs, AUG. 23-28, 1992
Definition 13 Let tt = (AI, rt, v1,01, xi) and 12 =
(A2,1-2,v2,562, X2) be WFTs. ti is said to be sub-
sumed by t2, written tt &lt; 12, if and only if either
ti 1 or
1. A2 C At,
2. Ker(u2) C Ker(vi),
3. Vp E P TI(P) r2(P),
4. Vp E P462(P) C Ot(P), and
5. Vp E Y*, Disagr,x,(p) C Disagr„,x, (p).
The subsumption order on IP are defined by [Ii] &lt; [12]
if ti &lt;12 is well-defined.
Lattice operations on P can be defined to be com-
patible with the above subsumption order relation as
follows.
Theorem 1 If (7;&lt;r) is a lattice, then so is IP.
Proof. This theorem can be proved in a very simi-
lar manner to the counterpart for Alt-Kaci&apos;s 0-terms.
Therefore, instead of providing the proof in detail,
only the definitions of the least upper bounds—
or joins—and greatest lower bounds—or meets—are
provided below. Let ti = (A1,T1,4u,01,X1) and
12 - (412, 1&apos;29 2,21 021 X2) be WFTs.
First, the join of ti and 12, 13 = ti V l2
is defined as follows:
A3 = n A2
03 : A3 -0 V such that
Ker(v3) = n
and Vp E
r3(p) =-
OAP) =
X3(P) =
4(p) ( q )1 przpq, i = 1,21, (11d)
and
X4(P) = Uly4(9) qtzgr,
r (Disagr„,„(p)
UDisagr,,(p)))(11e)
V 1,,0„„,„‘„
X7 : : {} : dlist
in X8 : {} : () : list 1
out X9 {} : () : list J
A
X10 : : 1) : dlist
X11 : (first) : (X11) list
= [151
[first X12 : {) : {) : T ]
out X11
Figure 3: Examples of Join and Meet of Augmented
0-Terms
° 41&amp;quot;V&amp;quot;,
for is = 0,
K141 = u
{(Pi P, P2 • P) I Pi On-111121,
for n &gt; 1
and a:f&amp;quot;u°&apos; is the reflexive extension of Ki from A;
to Ai U A2 for i = 1, 2.
The conditions (11a-11e) define a meet, that col-
lapses to _L whenever conditions (11c-Tle) produce
some address p such that type inconsistency, feature
inconsistency, or tag inconsistency occurs at p.
The V is a join operation and A is a meet operation
which are compatible with the subsumption order de-
fined in Definition 13.
Examples of join and meet operations on aug-
mented 03-terms are shown in Figure 3. The join and
meet operations on augmented 0-types correspond
to the generalization and unification operations on
TFSs.
Nit-Kaci defines an c-type as a maximal set of 0-
types. It is also possible to &lt;lave an augmented (-
type as a maximal set of augmented 1P-types in the
same manlier, making disjunctive and negative de-
scriptions possible.
3.2 Type Symbol Lattice Extension to
Include Complement Type Symbols
Treating a negative description of a given type sym-
bol, say a, requires a type symbol b such that b ha,s
only information that unification of it with is yields in-
consistency, or such that a VT h = T and aAr b = I.
Such a symbol is called a complement type symbol of
a and written as a&apos;. If a given type symbol lattice
(T; &lt;r) is a Boolean lattice, that is, a complemented3
distributive lattice, we do not need to do anything.
Otherwise, we must extend the lattice to include the
complements of the type symbols contained in the
given lattice.
For a finite type symbol lattice T, for example,
a Boolean lattice 7&apos; can be constructed as follows.
Let A : fat, , aN1 be the set of atoms of 7,
that is, type symbols which cover 1.4 If there are
non-atomic type symbols which cover only one sym-
bol, for each such symbol a, a new atom is added
&apos;A lattice is called complemented if its all elements
have complements.[3]
&apos;a is said to cover 13 if b &lt;7 a and b &lt;7 c &lt;-r a
implies c = b.
r1(p) VT T2(P), (10c)
01(P) n 02(0, and (10d)
-{u3(q) I q E (Disagr„,,,(p)
(Oil. (10e)
Next, the meet of ti and 13, 14= A 12 =
(A4,1-4, V4 /59, X4), is defined as follows:
P4 = At*1&apos;(11a)
: V such that
Ker(v4) = kit (11b)
and Vp
74(p) = Vrfri(q) I ptcpq, i = 1,21,(11c)
U At&amp;quot;1&apos;
nc--0
/ Li A2 for = 0,
co
,14) = U&apos;1&amp;quot;1&apos;
n=0
where
U
IP E I ptcHq q E
for n &gt; 1,
Acne DE COLING-92, NANTES, 23-28 main. 1992 384 PROC. or COLING-92, NANres, Auo. 23-28, 1992
node structure
111=111111110M11=
rinIMINI/a set o arc structures
11=121111111=
IEZZEINIMINI=ED
011=1111111111=12=11M011■1
MIIIIIIIIIMIEMIE
1/4=11•1111ELIMMTIM
111121MIMICIIMEDIEED
Figure 4: Data Structures
Function Unify(nodel , nodc2)
begin
node] := Dereference(nodel);
riode2 :-= Dereference(ruxle2);
if node] = node then
return( node 1);
nodel . forward := node2 ;
node2.tsymbol := node] .tsurnbol AT node2.tsymbol;
if node2.tsymbol = _I_ then
return(i)
node2.ileatures node] .ifeatures U node2 :ilea tures ;
if node2.ifeaturesn
{ arc. feature I arc E node] .arcs U node .nrcs)
0 then
returri(1.);
node2.dnodes := node! .dnodes U node2.dnodes;
if {nodel , node2} fl node2.dnodes tt then
rettirn(..t.);
arcpairs := Shared _Arc_Pairs(nodel , node2);
for (arc] , arc2) in °repairs do
begin
value := Unify(orcl :value, arc2.value);
if value -= then
return(±);
end;
arcs := Coroplement_Ares(node I , node!]);
node!] .arcs ::= arcs U node . arcs;
ovturn(node2);
end
Figure 5: A Destructive Graph Unification Function
so that a covers an additional type symbol. The ex-
tended lattice T&apos; is the set of subsets of A with set
inclusion ordering. An element failiE/ E T&apos; denotes
U,51Ea1. The join and meet operations on are
the set-union and set-intersection operations, respec-
tively. The complement of an element fadiej iii T&apos;
is the set-complement of it with respect to A, that is,
EAla taibc/}•
4 Implementation of Augmented TFS
Unification
The unification operation for augmented tk-terms or
augmented TFSs has been implemented using graph
unification techniques. A term structure is repre-
sented as a directed graph by assigning a graph node
to each K-class as in Figure 2. The unification oper-
ation for such DGs corresponds to a graph merging
operation. This takes two DGs and merges hi-classes
of the same feature-address into a K-class.
In a destructive graph unification method, winch is
very simple, such a graph is represented by the data
structures in Figure 4. A node structure consists of
five fields: tsymbol for a type symbol, arcs for a set
of feature-value pairs, gestures for a set of inhibited
features, dnodes for a set of disagreement nodes--
i.e., disagreement K-classes, and forward. The field
forward is used for the Union-Find algorithm[9] to
calculate unions of K-classes in the same manner as
Duct&apos;s algorithm[10]. By traversing two DGs&apos; nodes
with the same feature-address simultaneously, calcu-
lating the union of their K-classes, and copying arcs,
their unification can be calculated as in Figure 5.
The function Unify takes two input nodes and puts
them in a K.-class by letting one input be the forward
field values. The function then examines three kinds
of inconsistency; namely, type inconsistency, fea-
ture inconsistency, and tag inconsistency. The func-
tion finally treats arcs in order to make the result
graph right-congruent. For treating arcs, the function
Unify assumes two functions, Shared_Arc_Pairs and
Comylemeni_Arcs. The function Shared_Arc_Pairs
takes two nodes as its inputs and gives a set of
arc pairs each consisting of both inputs&apos; arcs widi a
shared feature. The function Complemenl_A re S also
takes two nodes and gives a set of arcs whose features
exist in the first node but not in the second.
An inhibited feature function is implemented using
the gestures field of nodes. When unification of two
nodes results in a node with an arc with a feature in
ifeatures, it yields I because of feature inconsistency.
A disagreement tag symbol function is implemented
using dnodes. Unification of two nodes which have
each other in their dnodes yields 1 because of tag
inconsistency. These computations require negligible
additional computation.
To simplify the explanation, the destructive version
of graph unification is used above. Other versions
based on more efficient graph unification methods
such as Wroblewski's and Kogure's method [23, 16)
have also been developed. Furthermore, it is easy
to modify other graph unification inethods[21, 61 to
allow augmented 1TSs.
5 Conclusion
This paper has proposed an augmentation of fea-
ture structures (FSs) which introduces negative in-
formation into FSs in unification-based formalisms.
Unification-based linguistic formalisms use lbs to de-
scribe linguistic objects and phenomena. Because lin-
guistic information can be described compactly using
disjunctive and negative descriptions, l&apos;Ss and fea-
ture descriptions are required to treat such descrip-
tions. In this paper, FSs have been augmented, using
a promising method of for Alt-Kaci&apos;s
type, to allow three kinds of negative descriptions of
them to be treated.
In a formalization of typed feature structures, neg-
ative descriptions can be decomposed into three kinds
of negations: negations of type symbols, negations of
feature existences, and negations of feature-address
value agreements. It is shown that the second and
third kinds can be treated by augmenting term struc-
tures to include structures representing such kinds of
descriptions. Subsumption relations on augmented
terms are defined. It is also shown that the first kind
can be treated by extending type symbol lattices to
include complement type symbols.
&apos;Die proposed formalization can provide efficient al-
AcrEs 05 COLING-92, NANTES, 23-28 °art 1992 3 8 5 PROC. OF COLING-92, NANTES, AuG. 23-28, 1992
gorithms for generalization and unification operations
as well as treat primitive negations. The formaliza-
tion can be integrated with logic-based frameworks
such as [20] which can treat wider ranges of descrip-
tions but which do not have such efficient algorithms
for these operations. Logic-based frameworks can be
used to obtain the data structures for this paper&apos;s
formalization.
Unification algorithms for augmented terms or aug-
mented TFSs have been developed using graph uni-
fication techniques. Unification programs based on
these algorithms have been developed in Common
Lisp.
The augmentation of TFSs makes linguistic de-
scriptions compact and easy to understand, In an
HPSG-based grammar, for example, non-emptiness
of a subcat or slash feature value can be easily de-
scribed by using feature-address value disagreement.
Moreover, negative descriptions make debugging pro-
cesses of grammatical descriptions easier.
Acknowledgments
This research was performed in the VCAT project of
the Takeuchi Research Group in NTT Basic Research
Laboratories. The author would like to thank Ikuo
Takeuchi, Akira Shimazu, Shozo Naito, Masahito
Kawamori, Mikio Nakano, and other colleagues of the
group for their encouragement and thought-provoking
discussions.
References
[1] Hassan Aft-Kaci. An algebraic semantics approach
to the effective resolution of type equations. Journal
of Theoretical Computer Science, 45:293-351, 1986.
[2] Hassan Ait-Kaci and Roger Nasr. Login: a logic pro-
gramming language with built-in inheritance. Jour-
nal of Logic Programming, 3:185-215, 1986.
[3] Garrett Birkhoff, Lattice Theory. American Mathe-
matical Society, Providence, Rhode Island, USA, 3rd
edition, 1967.
[4] Bob Carpenter and Carl Pollard. Inclusion, disjoint-
ness and choice: the logic of linguistic classification.
In Proceedings of the 29th Annual Meeting of the As-
sociation for Computational Linguistics, pages 9-16,
ACL, University of California, Berkeley, California,
USA, 1991.
[5] Annuj Dawar and K. Vijay-Shanker. A three-valued
interpretation of negation in feature structure de-
scriptions. In Proceedings of the 27th Annual Meet-
ing of Association for Computational Linguistics,
pages 18-24, ACL, Vancouver, British Columbia,
Canada, 1989.
[6] Martin Emele. Unification with lazy non-redundant
copying. In Proceedings of the 29th Annual Meet-
ing of the Association for Computational Linguistics,
pages 325-330, ACL, University of California, Berke-
ley, California, USA, 1991.
[7] Martin Emele and Remi Zajac. RETIE: A Rewrit-
ing System for Typed Feature Structures. Technical
Report TR-I-0071, ATR, Kyoto, Japan, 1989.
[8] Martin Emele and Remi Zajac. Typed unification
grammars. In Proceedings of the 191h International
Conference on Computational Linguistics, Vol. 3,
pages 293-298, 1990.
J. E. Hoperoft and It. M. Karp. An Algorithm for
Testing the Equivalence of Finite Automata. Tech-
nical Report TR-71-114, Dept. of Computer Science,
Cornell University, Ithaca, New York, USA, 1971.
[10] Gerard Huet. Resolution d&apos;Eguations dans des Lan-
gages d&apos;Order 1, 2, ..., w. PhD thesis, Universite de
Paris VII, France, 1976.
[11] Lauri Karttunen. Features and values. In Proceedings
of the 10th International Conference on Computa-
tional Linguistics, pages 28-33, Stanford, California,
USA, 1984.
[12] Robert T. Kasper. Unification and classification: an
experiment in information-based parsing. In Proceed-
ings of the International Workshop on Parsing Tech-
nologies, pages 1-7, Pittsburgh, Pennsylvania, USA,
1989.
[13] Robert &apos;I&apos;. Kasper and William C. Rounds. A logi-
cal semantics for feature structure. In Proceedings of
the 24th Annual Meeting of the Association for Com-
putational Linguistics, ACL, New York, New York,
USA, 1986.
[14] Martin Kay. Parsing in functional unification gram-
mar. In D. R. Dowty, editor, Natural Language Pars-
ing, chapter 7, pages 251-278, Cambridge University
Press, 1985.
[15] Kiyoshi Kogure. Parsing Japanese spoken sentences
based on IIPSG. In Proceedings of the international
Workshop on Parsing Technologies, pages 132-141,
Pittsburgh, Pennsylvania, USA, 1989.
[16] Kiyoshi Kogure. Strategic lazy incremental copy
graph unification. In Proceedings of the 13th inter-
national Conference on Computational Linguistics,
Vol. 2, pages 223-228, 1990.
[17] M. Drew Moshier and William C. Rounds. A logic
for partially specified data structures. In Proceedings
of the 14th ACM Symposium on Principles of Pro-
gramming Language, pages 156-167, Munich, West
Germany, 1987.
[18] Carl Pollard and Ivan Sag. An Information-Based
Syntax and Semantics—Volume 1: Fundamentals.
CSLI Lecture Notes Number 13, CSL1, 1987.
[19] William C. Rounds and Robert T. Kasper. A com-
plete logical calculus for record structures represent-
ing linguistic information. In Proceedings of Sympo-
sium on Logic in Computer Science, IEEE Computer
Society, 1986.
[20] Gert Smolka. A Feature Logic with Subsorts. Tech-
nical Report LILOG Report 33, IBM Deutschland,
7000 Stuttgart 80, West Germany, 1988.
[21] Hideto Tomabeclii. Quasi-destructive graph unifi-
cation. In Proceedings of the 29th Annual Meet-
ing of the Association for Computational Linguistics,
pages 315-322, ACL, University of California, Berke-
ley, California, USA, 1991.
[22] Yoshildro Ueda and Kiyoshi Kogure. Generation
for dialogue translation using typed feature struc-
ture unification. In Proceedings of the 13th Inter-
national Conference on Computational Linguistics,
Vol. 1, pages 64-66, 1990.
[23] David A. Wroblewski. Nondestructive graph unifi-
cation. In Proceedings of the 6th National Confer-
ence on Artificial Intelligence, pages 582-587, AAAI,
Seattle, Washington, USA, 1987.
[24] Remi Zajac. A transfer model using a typed fea-
ture structure rewriting system with inheritance. In
Proceedings of the 27th Annual Meeting of Associa-
tion for Computational Linguistics, pages 1-6, ACL,
Vancouver, British Columbia, Canada, 1989.
