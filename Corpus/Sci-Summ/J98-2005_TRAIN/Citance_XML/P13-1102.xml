<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">Probabilistic context-free grammars havethe unusual property of not always defining tight distributions (i.e., the sum of the“probabilities” of the trees the grammargenerates can be less than one).</S>
		<S sid ="2" ssid = "2">This paperreviews how this non-tightness can ariseand discusses its impact on Bayesian estimation of PCFGs.</S>
		<S sid ="3" ssid = "3">We begin by presenting the notion of “almost everywhere tightgrammars” and show that linear CFGs follow it.</S>
		<S sid ="4" ssid = "4">We then propose three differentways of reinterpreting non-tight PCFGs tomake them tight, show that the Bayesianestimators in Johnson et al.</S>
		<S sid ="5" ssid = "5">(2007) arecorrect under one of them, and provideMCMC samplers for the other two.</S>
		<S sid ="6" ssid = "6">Weconclude with a discussion of the impactof tightness empirically.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="7" ssid = "7">Probabilistic Context-Free Grammars (PCFGs)play a special role in computational linguistics because they are perhaps the simplest probabilisticmodels of hierarchical structures.</S>
			<S sid ="8" ssid = "8">Their simplicityenables us to mathematically analyze their properties to a detail that would be difficult with linguistically more accurate models.</S>
			<S sid ="9" ssid = "9">Such analysisis useful because it is reasonable to expect morecomplex models to exhibit similar properties aswell.</S>
			<S sid ="10" ssid = "10">The problem of inferring PCFG rule probabilities from training data consisting of yields orstrings alone is interesting from both cognitive andengineering perspectives.</S>
			<S sid ="11" ssid = "11">Cognitively it is implausible that children can perceive the parse trees ofthe language they are learning, but it is more reasonable to assume that they can obtain the terminalstrings or yield of these trees.</S>
			<S sid ="12" ssid = "12">Unsupervised methods for learning a grammar from terminal stringsalone is also interesting from an engineering perspective because such training data is cheap and plentiful, while the manually parsed data requiredby supervised methods are expensive to produceand relatively rare.</S>
			<S sid ="13" ssid = "13">Cohen and Smith (2012) show that inferringPCFG rule probabilities from strings alone is computationally intractable, so we should not expectto find an efficient, general-purpose algorithm forthe unsupervised problem.</S>
			<S sid ="14" ssid = "14">Instead, approximation algorithms are standardly used.</S>
			<S sid ="15" ssid = "15">For example, the Inside-Outside (IO) algorithm efficientlyimplements the Expectation-Maximization (EM)procedure for approximating a Maximum Likelihood estimator (Lari and Young, 1990).</S>
			<S sid ="16" ssid = "16">Bayesianestimators for PCFG rule probabilities have alsobeen attracting attention because they provide atheoretically-principled way of incorporating priorinformation.</S>
			<S sid ="17" ssid = "17">Kurihara and Sato (2006) proposeda Variational Bayes estimator based on a mean-field approximation, and Johnson et al.</S>
			<S sid ="18" ssid = "18">(2007) proposed MCMC samplers for the posterior distribution over rule probabilities and the parse trees ofthe training data strings.</S>
			<S sid ="19" ssid = "19">PCFGs have the interesting property (which weexpect most linguistically more realistic models toalso possess) that the distributions they define arenot always properly normalized or “tight”.</S>
			<S sid ="20" ssid = "20">In anon-tight PCFG the partition function (i.e., sumof the “probabilities” of all the trees generated bythe PCFG) is less than one.</S>
			<S sid ="21" ssid = "21">(Booth and Thompson, 1973, called such non-tight PCFGs “inconsistent”, but we follow Chi and Geman (1998)in calling them “non-tight” to avoid confusionwith the consistency of statistical estimators).</S>
			<S sid ="22" ssid = "22">Chi(1999) showed that renormalized non-tight PCFGs(which he called “Gibbs CFGs”) define the sameclass of distributions over trees as do tight PCFGswith the same rules, and provided an algorithm formapping any PCFG to a tight PCFG with the samerules that defines the same distribution over trees.An obvious question is then: how does tightnessaffect the inference of PCFGs?</S>
			<S sid ="23" ssid = "23">Chi and Geman(1998) studied the question for Maximum Likelihood (ML) estimation, and showed that ML es 1033 timates are always tight for both the supervisedcase (where the input consists of parse trees) andthe unsupervised case (where the input consists ofyields or terminal strings).</S>
			<S sid ="24" ssid = "24">This means that MLestimators can simply ignore issues of tightness,and rest assured that the PCFGs they estimate arein fact tight.</S>
			<S sid ="25" ssid = "25">The situation is more subtle with Bayesian estimators.</S>
			<S sid ="26" ssid = "26">We show that for the special case oflinear PCFGs (which include HMMs) with non-degenerate priors the posterior puts zero mass onnon-tight PCFGs, so tightness is not an issue withBayesian estimation of such grammars.</S>
			<S sid ="27" ssid = "27">However,because all of the commonly used priors (such asthe Dirichlet or the logistic normal) assign nonzero probability across the whole probability simplex, in general the posterior may assign nonzeroprobability to non-tight PCFGs.</S>
			<S sid ="28" ssid = "28">We discuss threedifferent possible approaches to this in this paper: 1.</S>
			<S sid ="29" ssid = "29">the only-tight approach, where we modify theprior so it only assigns nonzero probabilityto tight PCFGs, 2.</S>
			<S sid ="30" ssid = "30">the renormalization approach, where werenormalize non-tight PCFGs so they definea probability distribution over trees, and 3.</S>
			<S sid ="31" ssid = "31">the sink-element approach, where we reinterpret non-tight PCFGs as assigning nonzeroprobability to a “sink element”, so both tightand non-tight PCFGs are properly normalized.</S>
			<S sid ="32" ssid = "32">We show how to modify the Gibbs sampler described by Johnson et al.</S>
			<S sid ="33" ssid = "33">(2007) so it producessamples from the posterior distributions definedby the only-tight and renormalization approaches.Perhaps surprisingly, we show that Gibbs sampleras defined by Johnson et al. actually producessamples from the posterior distributions defined bythe sink-element approach.</S>
			<S sid ="34" ssid = "34">We conclude by studying the effect of requiring tightness on the estimation of some simplePCFGs.</S>
			<S sid ="35" ssid = "35">Because the Bayesian posterior convergesaround the (tight) ML estimate as the size ofthe data grows, requiring tightness only seems tomake a difference with highly biased priors or withvery small training corpora.</S>
	</SECTION>
	<SECTION title="PCFGs and tightness. " number = "2">
			<S sid ="36" ssid = "1">LetG = (T,N, S,R) be a Context-Free Grammarin Chomsky normal form with no useless productions, where T is a finite set of terminal symbols, N is a finite set of nonterminal symbols (disjointfrom T ), S ? N is a distinguished nonterminalcalled the start symbol, andR is a finite set of productions of the form A ? BC or A ? w, whereA,B,C ? N and w ? T . In what follows we useß as a variable ranging over (N ×N) ? T . A Probabilistic Context-Free Grammar (G,T)is a pair consisting of a context-free grammar Gand a real-valued vector T of length |R| indexedby productions, where ?A?ß is the productionprobability associated with the production A ?ß ? R. We require that ?A?ß = 0 and that forall nonterminals A ? N , ?A?ß?RA ?A?ß = 1,where RA is the subset of rules R expanding thenonterminal A. A PCFG (G,T) defines a measure µT overtrees t as follows: µT(t) =?r?R ?fr(t)r where fr(t) is the number of times the productionr = A?</S>
			<S sid ="37" ssid = "2">ß ? R is used in the derivation of t. The partition function Z or measure of all possible trees is: Z(T) =?t&apos;?T ?r?R ?fr(t&apos;) r where T is the set of all (finite) trees generatedby G. A PCFG is tight iff the partition functionZ(T) = 1.</S>
			<S sid ="38" ssid = "3">In this paper we use T?</S>
			<S sid ="39" ssid = "4">to denote theset of rule probability vectors T for which G isnon-tight.</S>
			<S sid ="40" ssid = "5">Nederhof and Satta (2008) survey several algorithms for computing Z(T), and hencefor determining whether a PCFG is tight.1 Non-tightness can arise in very simple PCFGs,such as the “Catalan” PCFG S ? S S | a. Thisgrammar produces binary trees where all internalnodes are labeled as S and the yield of these treesis a sequence of as.</S>
			<S sid ="41" ssid = "6">If the probability of the ruleS ? S S is greater than 0.5 then this PCFG isnon-tight.</S>
			<S sid ="42" ssid = "7">Perhaps the most straightforward way to understand this non-tightness is to view this grammar asdefining a branching process where an S can either“reproduce” with probability ?S?S S or “die out” 1We found out that finding whether a PCFG is tight bydirectly inspecting the partition function value is less stablethan using the method in Wetherell (1980).</S>
			<S sid ="43" ssid = "8">For this reason,we used Wetherell’s approach, which is based on finding theprincipal eigenvalue of the matrix M . 1034 with probability ?S?a. When ?S?S S &gt; ?S?a theS nodes reproduce at a faster rate than they dieout, so the derivation has a nonzero probability ofendlessly rewriting (Atherya and Ney, 1972).</S>
	</SECTION>
	<SECTION title="Bayesian inference for PCFGs. " number = "3">
			<S sid ="44" ssid = "1">The goal of Bayesian inference for PCFGs is to infer a posterior distribution over the rule probability vectors T given observed data D. This posterior distribution is obtained by combining the likelihood P(D | T) with a prior distribution P(T)over T using Bayes Rule.</S>
			<S sid ="45" ssid = "2">P(T | D) ? P(D | T) P(T) We now formally define the three approaches tohandling non-tightness mentioned earlier: the only-tight approach: we only permit priorswhere P(T?) = 0, i.e., we insist that theprior assign zero mass to non-tight rule probability vectors, so Z = 1.</S>
			<S sid ="46" ssid = "3">This means we candefine: P(t | T) = µT(t) the renormalization approach: we renormalizenon-tight PCFGs by dividing by the partitionfunction: P(t | T) = 1Z(T) µT(t) (1) the sink-element approach: we redefine ourprobability distribution so its domain is a setT &apos; = T ? {?}, where T is the set of (finite)trees generated by G and ? 6?</S>
			<S sid ="47" ssid = "4">T is a newelement that serves as a “sink state” to whichthe “missing mass” 1 - Z(T) is assigned.Then we define:2 P(t | T) ={µT(t) if t ? T1- Z(T) if t = ? 2This definition of a distribution over trees can be inducedby a tight PCFG with a special ? symbol in its vocabulary.Given G, the first step is to create a tight grammar G0 usingthe renormalization approach.</S>
			<S sid ="48" ssid = "5">Then, a new start symbol isadded to G0, S0, and also rules S0 ? S (where S is theold start symbol in G0) and S0 ? ?.</S>
			<S sid ="49" ssid = "6">The first rule is givenprobability Z(T) and the second rule is given probability 1-Z(T).</S>
			<S sid ="50" ssid = "7">It can be then readily shown that the new tight PCFGG0 induces a distribution over trees just like in Eq. 3, onlywith additional S0 on top of all trees.</S>
			<S sid ="51" ssid = "8">With this in hand, we can now define the likelihood term.</S>
			<S sid ="52" ssid = "9">We consider two types of data D here.In the supervised setting the data D consists of acorpus of parse trees D = (t1, . . .</S>
			<S sid ="53" ssid = "10">, tn) where eachtree ti is generated by the PCFG G, so P(D | T) =n?i=1 P(ti | T) In the unsupervised setting the data D consistsof a corpus of strings D = (w1, . . .</S>
			<S sid ="54" ssid = "11">, wn) whereeach string wi is the yield of one or more treesgenerated by G. In this setting P(D | T) =n?i=1 P(wi | T),where: P(w | T) =?</S>
			<S sid ="55" ssid = "12">t?T :yield(t)=wP(t | T)</S>
	</SECTION>
	<SECTION title="The special case of linear PCFGs. " number = "4">
			<S sid ="56" ssid = "1">One way to handle the issue of tightness is to identify a family of CFGs for which practically any parameter setting will yield a tight PCFG.</S>
			<S sid ="57" ssid = "2">This is thefocus of this section, in which we identify a subset of CFGs, which are “almost everywhere” tight.This family of CFGs includes many of the CFGsused in NLP applications.</S>
			<S sid ="58" ssid = "3">We cannot expect that a CFG will yield a tightPCFG for any assignment to the rule probabilities(i.e. that T?</S>
			<S sid ="59" ssid = "4">= Ø).</S>
			<S sid ="60" ssid = "5">Even in simple cases, such asthe grammar S ? S|a, the assignment of probability 1 to S ? S and 0 to the other rule rendersthe S nonterminal useless, and places all of theprobability mass on infinite structures of the formS ? S ? S ? .</S>
			<S sid ="61" ssid = "6">However, we can weaken our requirement sothat the cases in which parameter assignmentyields a non-tight PCFG are rare, or have measurezero.</S>
			<S sid ="62" ssid = "7">To put it more formally, we say that a priorP(T) is “tight almost everywhere for G” if P(T?) =?</S>
			<S sid ="63" ssid = "8">T?T?P(T) dT = 0.</S>
			<S sid ="64" ssid = "9">We now provide a sufficient condition (linear-ity) for CFGs under which they are tight almosteverywhere with any continuous prior.</S>
			<S sid ="65" ssid = "10">For a nonterminal A ? N and ß ?</S>
			<S sid ="66" ssid = "11">(N ? T )*,we use A?k ß to denote that A can be re-writtenusing a sequence of rules from R to the sententialform ß in k derivation steps.</S>
			<S sid ="67" ssid = "12">We use A ?+ ß todenote that there exists a k &gt; 0 such thatA?k ß. 1035 Definition 1 A context-free grammarG is linear ifthere are no A ? N such that A?+ . . .</S>
			<S sid ="68" ssid = "13">A . . .</S>
			<S sid ="69" ssid = "14">A . . .</S>
			<S sid ="70" ssid = "15">.Definition 2 A nonterminal A ? N in a probabilistic context-free grammar G with parametersT is nonterminating if PG(A?+ . . .</S>
			<S sid ="71" ssid = "16">A . . .</S>
			<S sid ="72" ssid = "17">|T) = 1.Here P(A?+ . . .</S>
			<S sid ="73" ssid = "18">A . . .</S>
			<S sid ="74" ssid = "19">|T) is defined as:?</S>
			<S sid ="75" ssid = "20">ß:ß=...A...</S>
			<S sid ="76" ssid = "21">PG(A?+ ß|T).</S>
			<S sid ="77" ssid = "22">Lemma 1 A linear PCFG G with parameters Twhich does not have any nonterminating nonterminals is tight.</S>
			<S sid ="78" ssid = "23">Proof: Our proof relies on the properties of a certain |N | × |N | matrix M where: MAB =?</S>
			<S sid ="79" ssid = "24">A?ß?RAn(ß,B) ?A?ß where n(ß,B) is the number of appearances of thenonterminal B in the sequence ß. MAB is the expected number of B nonterminals generated froman A nonterminal in one single derivational step,so [Mk]AB is the expected number ofB nonterminals generated from an A nonterminal in a k-stepderivation (Wetherell, 1980).</S>
			<S sid ="80" ssid = "25">Since M is a non-negative matrix, under someregularity conditions, the FrobeniusPerron theorem states that the largest eigenvalue of this matrix (in absolute value) is a real number.</S>
			<S sid ="81" ssid = "26">Let thiseigenvalue be denoted by ?.</S>
			<S sid ="82" ssid = "27">A PCFG is called “subcritical” if ? &lt; 1 andsupercritical if ? &gt; 1.</S>
			<S sid ="83" ssid = "28">Then, in turn, a PCFG istight if it is subcritical.</S>
			<S sid ="84" ssid = "29">It is not tight if it is supercritical.</S>
			<S sid ="85" ssid = "30">The case of ? = 1 is a borderline casethat does not give sufficient information to knowwhether the PCFG is tight or not.</S>
			<S sid ="86" ssid = "31">In the Bayesiancase, for a continuous prior such as the Dirichletprior, this borderline case will have measure zerounder the prior.</S>
			<S sid ="87" ssid = "32">Now let A ? N . Since the grammar is linear, there is no derivation A ?+ . . .</S>
			<S sid ="88" ssid = "33">A . . .</S>
			<S sid ="89" ssid = "34">A . . ..Therefore, any derivation of the form A ?+.</S>
			<S sid ="90" ssid = "35">A . . .</S>
			<S sid ="91" ssid = "36">includes A on the right hand-side exactlyonce.</S>
			<S sid ="92" ssid = "37">Because the grammar has no useless non-terminals, the probability of such a derivation isstrictly smaller than 1.</S>
			<S sid ="93" ssid = "38">For each A ? N , define: pA =?</S>
			<S sid ="94" ssid = "39">ß=...A...</S>
			<S sid ="95" ssid = "40">P(A?|N | ß|T).</S>
			<S sid ="96" ssid = "41">Since A is not useless, then pA &lt; 1.</S>
			<S sid ="97" ssid = "42">Thereforeq = maxA pA &lt; 1.</S>
			<S sid ="98" ssid = "43">Since any derivation of lengthk of the formA?</S>
			<S sid ="99" ssid = "44">A . . .</S>
			<S sid ="100" ssid = "45">can be decomposed toat least k 2|N | cycles that start at a terminal B ? Nand end in the same nonterminal B ? N , it holdsthat: [Mk]AA = qk 2|N| k?8?</S>
			<S sid ="101" ssid = "46">0. This means that trace(Mk) k?8?</S>
			<S sid ="102" ssid = "47">0. This meansthat the eigenvalue of M is strictly smaller than 1(linear algebra), and therefore the PCFG is tight.?Proposition 1 Any continuous prior P(T) on alinear grammar G is tight almost everywhere forG.</S>
			<S sid ="103" ssid = "48">Proof: Let G be a linear grammar.</S>
			<S sid ="104" ssid = "49">With a continuous prior, the probability ofG getting parametersfrom the prior which yield a useless non-terminalis 0 – it would require setting at least one rule inthe grammar with rule probability which is exactly1.</S>
			<S sid ="105" ssid = "50">Therefore, with probability 1, the parameterstaken from the prior yield a PCFG which is linearand does not have nonterminating nonterminals.According to Lemma 1, this means the PCFG istight.</S>
			<S sid ="106" ssid = "51">Deciding whether a grammar G is linear canbe done in polynomial time using the constructionfrom Bar-Hillel et al.</S>
			<S sid ="107" ssid = "52">(1964).</S>
			<S sid ="108" ssid = "53">We can first eliminate the differences between nonterminals and terminal symbols by adding a rule A ? cA for eachnonterminal A ? N , after extending the set ofterminal symbols A with {cA|A ? N}.</S>
			<S sid ="109" ssid = "54">Let GAbe the grammar G with the start symbol being replaced with A. We can then intersect the grammarGA with the regular language T *cAT *cAT * (foreach nonterminal A ? N ).</S>
			<S sid ="110" ssid = "55">If for any nonterminal A the intersection is not the empty set (withrespect to the language that the intersection generates), then the grammar is not linear.</S>
			<S sid ="111" ssid = "56">Checkingwhether the intersection is the empty set or not canbe done in polynomial time.</S>
			<S sid ="112" ssid = "57">We conclude this section by remarking thatmany of the models used in computational linguistics are in fact equivalent to linear PCFGs, socontinuous Bayesian priors are almost everywheretight.</S>
			<S sid ="113" ssid = "58">For example, HMMs and many kinds of“stacked” finite-state machines are equivalent to 1036 linear PCFGs, as are the example PCFGs given inJohnson et al.</S>
			<S sid ="114" ssid = "59">(2007) to motivate the MCMC estimation procedures.</S>
	</SECTION>
	<SECTION title="Dirichlet priors. " number = "5">
			<S sid ="115" ssid = "1">The first step in Bayesian inference is to specify aprior on T. In the rest of this paper we take P(T)to be a product of Dirichlet distributions, with onedistribution for each non-terminal A ? N , as thisturns out to simplify the computations considerably.</S>
			<S sid ="116" ssid = "2">The prior is parameterized by a positive realvalued vector a indexed by productionsR, so eachproduction probability ?A?ß has a correspondingDirichlet parameter aA?ß . As before, let RA bethe set of productions in R with left-hand side A,and let ?A and aA refer to the component subvec-tors of ? and a respectively indexed by productions in RA.</S>
			<S sid ="117" ssid = "3">The Dirichlet prior P(T | a) is: P(T | a) =?A?N PD(TA | aA), where PD(TA | aA) = 1C(aA) ?r?RA ?ar1r and C(aA) = ?r?RA G(ar) G(?</S>
			<S sid ="118" ssid = "4">r?RA ar) where G is the generalized factorial function andC(a) is a normalization constant that does not depend on TA.</S>
			<S sid ="119" ssid = "5">Dirichlet priors are useful because they are conjugate to the multinomial distribution, which isthe building block of PCFGs.</S>
			<S sid ="120" ssid = "6">Ignoring issues oftightness for the moment and setting P(t | T) =µT(t), this means that in the supervised setting theposterior distribution P(T | t, a) given a set ofparse trees t = (t1, . . .</S>
			<S sid ="121" ssid = "7">, tn) is also a product ofDirichlets distribution.</S>
			<S sid ="122" ssid = "8">P(T | t, a) ? P(t | T) P(T | a) ?(?r?R ?fr(t)r )(?r?R ?ar1r )=?r?R ?fr(t)+ar1r which is a product of Dirichlet distributions withparameters f(t) + a, where f(t) is the vector ofrule counts in t indexed by r ? R. We can thuswrite: P(T | t, a) = P(T | f(t) + a) Input: Grammar G, vector of trees t, vector ofhyperparameters a, previous parameters T0.</S>
			<S sid ="123" ssid = "9">Result: A vector of parameters Trepeat draw ? from products of Dirichlet withhyperparameters a+ f(t) until T is tight for G;return T Algorithm 1: An algorithm for generating samples from P(T | t, a) for the only-tight approach.</S>
			<S sid ="124" ssid = "10">Input: Grammar G, vector of trees t, vector ofhyperparameters a, previous rule parametersT0.</S>
			<S sid ="125" ssid = "11">Result: A vector of parameters Tdraw a proposal T* from a product of Dirichlets withparameters a+ f(t).draw a uniform number u from [0, 1].</S>
			<S sid ="126" ssid = "12">if u &lt; min{1,(Z(T(i-1))/Z(T*) )n} return T*.</S>
			<S sid ="127" ssid = "13">return T0.</S>
			<S sid ="128" ssid = "14">Algorithm 2: One step of Metropolis-Hastingsalgorithm for generating samples from P(T |t, a) for the renormalization approach.</S>
			<S sid ="129" ssid = "15">which makes it clear that the rule counts are directly added to the parameters of the prior to produce the parameters of the posterior.</S>
	</SECTION>
	<SECTION title="Inference in the supervised setting. " number = "6">
			<S sid ="130" ssid = "1">We first discuss Bayesian inference in the supervised setting, as inference in the unsupervised setting is based on inference for the supervised setting.</S>
			<S sid ="131" ssid = "2">For each of the three approaches to non-tightness we provide an algorithm that characterizes the posterior P(T | t), where t = (t1, . . .</S>
			<S sid ="132" ssid = "3">, tn)is a sequence of trees, by generating samples fromthat posterior.</S>
			<S sid ="133" ssid = "4">Our MCMC algorithms for the unsupervised setting build on these samplers for thesupervised setting.</S>
			<S sid ="134" ssid = "5">6.1 The only-tight approachThe “only-tight” approach requires that the priorassign zero mass to non-tight rule probability vectors T?.</S>
			<S sid ="135" ssid = "6">One way to define such a distribution isto restrict the domain of an existing prior distribution with the set of tight T and renormalize.</S>
			<S sid ="136" ssid = "7">Inmore detail, if P(T) is a prior over rule probabilities, then its renormalization is the prior P&apos; definedas:.</S>
			<S sid ="137" ssid = "8">P&apos;(T) =P(T)I(T /?</S>
			<S sid ="138" ssid = "9">T?) Z(T?).</S>
			<S sid ="139" ssid = "10">(2) where Z(T?) =?</S>
			<S sid ="140" ssid = "11">T P(T)I(T /?</S>
			<S sid ="141" ssid = "12">T?)dT.</S>
			<S sid ="142" ssid = "13">1037 Input: Grammar G, vector of trees t, vector ofhyperparameters a, previous parameters T0.</S>
			<S sid ="143" ssid = "14">Result: A vector of parameters Tdraw T from products of Dirichlet withhyperparameters a+ f(t)return T Algorithm 3: An algorithm for generating samples from P(T | t, a) for the sink-state approach.</S>
			<S sid ="144" ssid = "15">Perhaps surprisingly, it turns out that if P(T)belongs to a family of conjugate priors, then P&apos;(T)also belongs to a (different) family of conjugatepriors as well.</S>
			<S sid ="145" ssid = "16">Proposition 2 Let P(T|a) be a prior with hyper-parameters a over the parameters of G such thatP is conjugate to the grammar likelihood.</S>
			<S sid ="146" ssid = "17">ThenP&apos;, defined in Eq. 2, is conjugate to the grammarlikelihood as well.</S>
			<S sid ="147" ssid = "18">Proof: Assume that trees t are observed, and theprior over the grammar parameters is the prior defined in Eq. 2.</S>
			<S sid ="148" ssid = "19">Therefore, the posterior is: P(T|t, a) ? P&apos;(T|a)p(t|T) =P(T|a)p(t|T)I(T /?</S>
			<S sid ="149" ssid = "20">T?) Z(T?) ? P(T|t, a)I(T /?</S>
			<S sid ="150" ssid = "21">T?) Z(T?).</S>
			<S sid ="151" ssid = "22">Since P(T|a) is a conjugate prior to the PCFGlikelihood, then there exists a&apos; = a&apos;(t) such thatP(T|t, a) = P&apos;(T|a&apos;).</S>
			<S sid ="152" ssid = "23">Therefore: P(T|t, a) ? P(T|a&apos;)I(T /?</S>
			<S sid ="153" ssid = "24">T?)Z(T?) .which exactly equals P&apos;(T|a&apos;).</S>
			<S sid ="154" ssid = "25">?Sampling from the posterior over the parame ters given a set of trees t is therefore quite simple when assuming the base prior being renormalized is a product of Dirichlets.</S>
			<S sid ="155" ssid = "26">Algorithm 1 samples from a product of Dirichlets distribution withhyperparameters a + f(t) repeatedly, each timechecking and rejecting the sample until we obtaina tight PCFG.</S>
			<S sid ="156" ssid = "27">The more mass the Dirichlet distribution withhyperparameters a + f(t) puts on non-tightPCFGs, the more rejections will happen.</S>
			<S sid ="157" ssid = "28">In general, if the probability mass on non-tight PCFGs isq?, then it would require, on average 1/(1 - q?)samples from this distribution in order to obtain atight PCFG.</S>
			<S sid ="158" ssid = "29">6.2 The renormalization approachThe renormalization approach modifies the likelihood function instead of the prior.</S>
			<S sid ="159" ssid = "30">Here we use aproduct of Dirichlets prior P(T | a) on rule probability vectors T, but the presence of the partitionfunctionZ(T) in Eq. 1 means that the likelihood isno longer conjugate to the prior.</S>
			<S sid ="160" ssid = "31">Instead we have:.</S>
			<S sid ="161" ssid = "32">P(T | t) =n?i=1 µT(ti) Z(T)P(T | a) ? 1Z(T)n P(T | a+ f(t)).</S>
			<S sid ="162" ssid = "33">(3) Note that the factor Z(T) depends on T, andtherefore cannot be absorbed into the constant.</S>
			<S sid ="163" ssid = "34">Algorithm 2 describes a Metropolis-Hastings sampler for sampling from the posterior in Eq. 3that uses a product of Dirichlets with parametersa+ f(t) as a proposal distribution.</S>
			<S sid ="164" ssid = "35">In our experiments, we use the algorithm fromNederhof and Satta (2008) to compute the partition function which is needed in Algorithm 2.</S>
			<S sid ="165" ssid = "36">6.3 The “sink element” approachThe “sink element” approach does not affect thelikelihood (since the probability of a tree t is justthe product of the probabilities of the rules usedto generate it), nor does it require a change to theprior.</S>
			<S sid ="166" ssid = "37">(The sink element ? is not a member of theset of trees T , so it cannot appear in the data t)..</S>
			<S sid ="167" ssid = "38">This means that the conjugacy argument givenat the bottom of section 5 holds in this approach,so the posterior P(T | t, a) is a product of Dirich-lets with parameters f(t) + a. Algorithm 3 givesa sampler for P(T | t, a) for the sink element approach.</S>
	</SECTION>
	<SECTION title="Inference in the unsupervised setting. " number = "7">
			<S sid ="168" ssid = "1">Johnson et al.</S>
			<S sid ="169" ssid = "2">(2007) provide two Markov chainMonte Carlo algorithms for Bayesian inference forPCFG rule probabilities in the unsupervised setting (i.e., where the data consists of a corpus ofstrings w = (w1, . . .</S>
			<S sid ="170" ssid = "3">, wn) alone).</S>
			<S sid ="171" ssid = "4">The algorithmswe give here are based on their Gibbs sampler,which in each iteration first samples parse treest = (t1, . . .</S>
			<S sid ="172" ssid = "5">, tn), where each ti is a parse forwi, from P(t | w,T), and then samples T fromP(T | t, a).</S>
			<S sid ="173" ssid = "6">Notice that the conditional distribution P(t |w,T) is unaffected in each of our three approaches (the partition functions cancel in the 1038 Input: Grammar G, vector of hyperparameters a,vector of strings w = (w1, . . .</S>
			<S sid ="174" ssid = "7">, wn), previousrule parameters T0.</S>
			<S sid ="175" ssid = "8">Result: A vector of parameters Tfor i?</S>
			<S sid ="176" ssid = "9">1 to n do draw ti from P(ti|wi,T0)enduse Algorithm 2 to sample T given G, t, a and T0return T Algorithm 4: One step of the Metropolis-within-Gibbs sampler for the renormalization approach.</S>
			<S sid ="177" ssid = "10">renormalization approach), so the algorithm forsampling from P(t | w,T) given by Johnson etal.</S>
			<S sid ="178" ssid = "11">applies in each of our three approaches as well.</S>
			<S sid ="179" ssid = "12">Johnson et al. ignored tightness and assumedthat P(T | t, a) is a product of Dirichlets withparameters f(t) + a. As we noted in section 6.3,this assumption holds for the sink-state approachto non-tightness, so their sampler is in fact correctfor the sink-state approach.</S>
			<S sid ="180" ssid = "13">In fact, we obtain samplers for the unsupervisedsetting for each of our approaches by “pluggingin” the corresponding sampling algorithm (Eq. 1–3) for P(T | t, a) into the generic Gibbs samplerframework of Johnson et al. The one complication is that because we use aMetropolisHastings procedure to generate samples from P(T | t, a) in the renormalization approach, we use the Metropolis-within-Gibbs procedure given in Algorithm 4 (Robert and Casella,2004).</S>
	</SECTION>
	<SECTION title="The expressive power of the threeapproaches. " number = "8">
			<S sid ="181" ssid = "1">Probably the most important question to ask withrespect to the three different approaches to non-tightness is whether they differ in terms of expressive power.</S>
			<S sid ="182" ssid = "2">Clearly the three approaches differ interms of the grammars they admit (the only-tightapproach requires the prior to only assign nonzeroprobability to tight PCFGs, while the other two approaches permit the prior to assign nonzero probability to non-tight PCFGs as well).</S>
			<S sid ="183" ssid = "3">However, ifwe regard a grammar as merely a device for defining a distribution over trees and a prior as defininga distribution over distributions over trees, it is reasonable to ask whether the class of distributionsover distributions of trees that each of these approaches define are the same or differ.</S>
			<S sid ="184" ssid = "4">We believe,but have not proved, that all three approaches define the same class of distributions over distribu tions of trees in the following sense: any prior usedwith one of the approaches can be transformedinto a different prior that can be used with one ofthe other approaches, and yield the same posteriorover trees conditioned on a string, marginalizingout the parameters.</S>
			<S sid ="185" ssid = "5">This does not mean that the three approachesare equivalent, however.</S>
			<S sid ="186" ssid = "6">In this section we provide a grammar such that with a uniform prior overrule probabilities, the conditional distribution overtrees given a fixed string varies under each of thethree different approaches.</S>
			<S sid ="187" ssid = "7">The grammar we consider has three rules S ?S S S|S S|a with probabilities ?1, ?2 and 1- ?1-?2, respectively.</S>
			<S sid ="188" ssid = "8">The T parameters are required tosatisfy ?1 + ?2 = 1 and ?i = 0 for i = 1, 2.</S>
			<S sid ="189" ssid = "9">We compute the posterior distribution overparse trees for the string w = a a a. The grammar generates three parse trees for w1, namely: t1 = S S a S a S a t2 = S S a S S a S a t3 = S S S a S a S a The partition function Z for this grammar is thesmallest positive root of the cubic equation: Z = ?1Z3 + ?2Z 2 + (1- ?1 - ?2)We used Mathematica to find an analytic solutionfor Z in this equation, obtaining not only an expression for the partition function Z(T) but alsoidentifying the non-tight region T?.</S>
			<S sid ="190" ssid = "10">In order to compute P(t1|w), we used Mathematica to first compute the following quantities: qsinkElement(ti) = ?TµT(ti) dT qtightOnly(ti) = ?TµT(ti) I(T /?</S>
			<S sid ="191" ssid = "11">T?) dT qrenormalization(ti) = ?TµT(ti)/Z(T) dT where i ? {1, 2, 3}.</S>
			<S sid ="192" ssid = "12">We used Mathematica to analytically compute q(ti) for each approach and eachi ? {1, 2, 3}.</S>
			<S sid ="193" ssid = "13">Then it’s easy to show that: P(ti | w) = q(ti)?3i&apos;=1 q(ti&apos;) where the q used is based on the approach totightness desired.</S>
			<S sid ="194" ssid = "14">For the sink-element approach, 1039 0 10 20 30 0.35 0.40 0.45 0.50 0.55Average f-score Den sity Inferenceonly-tight sink-state renormalise Figure 1: The density of the F1-scores with thethree approaches.</S>
			<S sid ="195" ssid = "15">The prior used is a symmetricDirichlet with a = 0.1.</S>
			<S sid ="196" ssid = "16">P(t1|w) = 711 ˜ 0.636364.</S>
			<S sid ="197" ssid = "17">For the only-tightapproach P(t1|w) = 1117917221 ˜ 0.649149.</S>
			<S sid ="198" ssid = "18">Forthe renormalization approach the analytic expression is too complex to include in this paper,but it approximately equals 0.619893.</S>
			<S sid ="199" ssid = "19">A logof our Mathematica calculations is availableat http://www.cs.columbia.edu/˜scohen/acl13tightnessmathematica.pdf, and weconfirmed these results to three decimal places using the samplers described above (which required107 samples per approach).</S>
			<S sid ="200" ssid = "20">While the differences between these conditionalprobabilities are not great, the conditional probabilities are clearly different, so the three approaches do in fact define different distributionsover trees under a uniform prior on rule probabilities.</S>
	</SECTION>
	<SECTION title="Empirical effects of the threeapproaches in unsupervised grammarinduction. " number = "9">
			<S sid ="201" ssid = "1">In this section we present experiments using thethree samplers just described in an unsupervisedgrammar induction problem.</S>
			<S sid ="202" ssid = "2">Our goal here isnot to improve the state-of-the-art in unsupervisedgrammar induction, but to try to measure empirical differences in the estimates produced by thethree different approaches to tightness just described.</S>
			<S sid ="203" ssid = "3">The bottom line of our experiments is thatwe could not detect any significant difference inthe estimates produced by samplers for these threedifferent approaches.In our experiments we used the English Penntreebank (Marcus et al., 1993).</S>
			<S sid ="204" ssid = "4">We use the part of-speech tag sequences of sentences shorter than11 words in sections 2–21.</S>
			<S sid ="205" ssid = "5">The grammar we use isthe PCFG version of the dependency model withvalence (Klein and Manning, 2004), as it appearsin Smith (2006).</S>
			<S sid ="206" ssid = "6">We used a symmetric Dirichlet prior with hyperparameter a = 0.1.</S>
			<S sid ="207" ssid = "7">For each of the three approaches for handling tightness, we ran 100 timesthe samplers in §7, each for 1,000 iterations.</S>
			<S sid ="208" ssid = "8">Wediscarded the first 900 sweeps of each run, and calculated the F1-scores of the sampled trees every10th sweep from the last 100 sweeps.</S>
			<S sid ="209" ssid = "9">For eachrun we calculated the average F1-score over the10 sweeps we evaluated.</S>
			<S sid ="210" ssid = "10">We thus have 100 average F1-scores for each of the samplers.</S>
			<S sid ="211" ssid = "11">Figure 1 plots the density of F1 scores (compared to the gold standard) resulting from theGibbs sampler, using all three approaches.</S>
			<S sid ="212" ssid = "12">Themean value for each of the approaches is 0.41with standard deviation 0.06 (only-tight), 0.41with standard deviation 0.05 (renormalization)and 0.42 with standard deviation 0.06 (sink element).</S>
			<S sid ="213" ssid = "13">In addition, the only-tight approach resultsin an average of 437 (s.d., 142) rejected proposals in 1,000 samples, while the renormalizationapproach results in an average of 232 (s.d., 114)rejected proposals in 1,000 samples.</S>
			<S sid ="214" ssid = "14">(It’s not surprising that the only-tight approach results in morerejections as it keeps proposing new T until a tightproposal is found, while the renormalization approach simply uses the old T).</S>
			<S sid ="215" ssid = "15">We performed two-sample KolmogorovSmirnov tests (which are non-parametric testsdesigned to determine if two distributions aredifferent; see DeGroot, 1991) on each of the threepairs of 100 F1-scores.</S>
			<S sid ="216" ssid = "16">None of the tests wereclose to significant; the p-values were all above0.5.</S>
			<S sid ="217" ssid = "17">Thus our experiments provided no evidencethat the samplers produced different distributionsover trees, although it’s reasonable to expect thatthese distributions do indeed differ.</S>
			<S sid ="218" ssid = "18">In terms of running time, our implementationof the renormalization approach was several timesslower than our implementations of the other twoapproaches because we used the naive fixed-pointalgorithm to compute the partition function: perhaps this could be improved using one of themore sophisticated partition function algorithmsdescribed in Nederhof and Satta (2008).</S>
			<S sid ="219" ssid = "19">1040</S>
	</SECTION>
	<SECTION title="Conclusion. " number = "10">
			<S sid ="220" ssid = "1">In this paper we characterized the notion of an almost everywhere tight grammar in the Bayesiansetting and showed it holds for linear CFGs.</S>
			<S sid ="221" ssid = "2">Fornon-linear CFGs, we described three different approaches to handle non-tightness.</S>
			<S sid ="222" ssid = "3">The “only-tight” approach restricts attention to tight PCFGs,and perhaps surprisingly, we showed that conjugacy still obtains when the domain of a productof Dirichlets prior is restricted to the subset oftight grammars.</S>
			<S sid ="223" ssid = "4">The renormalization approach involves renormalizing the PCFG measure µ overtrees when the grammar is non-tight, which destroys conjugacy with a product of Dirichlets prior.Perhaps most surprisingly of all, the sink-elementapproach, which assigns the missing mass in non-tight PCFG to a sink element ?, turns out to beequivalent to existing practice where tightness isignored.</S>
			<S sid ="224" ssid = "5">We studied the posterior distributions over treesinduced by the three approaches under a uniformprior for a simple grammar and showed that theydiffer.</S>
			<S sid ="225" ssid = "6">We leave for future work the importantquestion of whether the classes of distributionsover distributions over trees that the three approaches define are the same or different.</S>
			<S sid ="226" ssid = "7">We described samplers for the supervisedand unsupervised settings for each of these approaches, and applied them to an unsupervisedgrammar induction problem.</S>
			<S sid ="227" ssid = "8">(The code for theunsupervised samplers is available from http://web.science.mq.edu.au/˜mjohnson).</S>
			<S sid ="228" ssid = "9">We could not detect any difference in the posterior distributions over trees produced by thesesamplers, despite devoting considerable computational resources to the problem.</S>
			<S sid ="229" ssid = "10">This suggests thatfor these kinds of problems at least, tightness isnot of practical concern for Bayesian inference ofPCFGs.</S>
	</SECTION>
	<SECTION title="Acknowledgements"></SECTION>
</PAPER>
