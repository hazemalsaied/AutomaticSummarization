<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper describes a nlethod for compiling a constraint-based grammar into a potentially inore efficient form for processing.</S>
		<S sid ="2" ssid = "2">This method takes dependent disjunctions within a constraint formula and factors them into non-interacting groups whenever possibh; by determining their independence.</S>
		<S sid ="3" ssid = "3">When a group of dependent disjunctions is split into slnaller groups, an exponential amount of redundant information is reduced.</S>
		<S sid ="4" ssid = "4">At runtime, this ineans that all exponential alnount of processing can be saved as well.</S>
		<S sid ="5" ssid = "5">Since the performance of an algorithm ibr processing constraints with dependent dis-jmmtions is highly deterxnined by its input, the transformatioll presented in this paper should prove beneficial for all such algorithms.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="6" ssid = "6">There are two facts that conspire to make tile treatment of disjunction an important consideration when building a natural language processing (NLP) system.</S>
			<S sid ="7" ssid = "7">The first fact is that natural languages are full of ambiguities, and in a grammar many of these ambiguities are described by disjunctions.</S>
			<S sid ="8" ssid = "8">The second fact is that the introduction of disjmmtion into a grammar causes processing tilne to increase exponentially in the number of disjunets.</S>
			<S sid ="9" ssid = "9">This means that a nearly linear-time operation, such as uififieation of Imrely conjunctive feature structures, becomes an exponential-time problem as soon as disjunctions are included, t Since disjunction is unlikely to dis- * This work was sponsored by Teilprojekt B4 &quot;t~¥om Constraints to Rules: Compilation of lipS(;&quot; of the Sonderforsehungsbereieh 340 of the Deutsche Forsehungsgemeinschaft.</S>
			<S sid ="10" ssid = "10">I would also like to thank Dale Gerdemann and Guido Minnen for helpfltl comments on the ideas presented here.</S>
			<S sid ="11" ssid = "11">All remaining errors are of course my own.</S>
			<S sid ="12" ssid = "12">tAssuming P # NIL appear from natur~fl language gralnlnars, controlling its form (:all save exponential amounts of time.</S>
			<S sid ="13" ssid = "13">This paper introduces all etficient normal tbrm for processing dependent disjunctive constraints and an operation for compilation into this normal form.</S>
			<S sid ="14" ssid = "14">This ot)eration , modularization, can reduce exponential alnounts of redtmdant information in a grainmar and can consequently save corresponding alnounts of processing time.</S>
			<S sid ="15" ssid = "15">While this operation is general enough to be applied to a wide variety of constraint systems, it; was originally designed to optimize processing of dependent dis-junctions in featm&apos;e structure-based grammars.</S>
			<S sid ="16" ssid = "16">In particular, modular fea.tuie structures are more eflicient R)r unification than non-Inodulm&apos; ones.</S>
			<S sid ="17" ssid = "17">Since ill many current NLP systems, a signiti-cant amount of tilne is spent performing unification, optimizing feature structures for unillcatioll shouhl increase the tmrtbrmance of these, syst;ems.</S>
			<S sid ="18" ssid = "18">Many algorithms for etticient mfitication of lea tare structures with dependent disjunctions have been propose.d (Maxwell and Kaplan, 1989; F, isele and DSrre, 1990; Gerdemann, 1991; StrSmbSek, 1992; Griflith, 1.996).</S>
			<S sid ="19" ssid = "19">However, all of these algorithms sutfer from a common problem: thc.ir performance is highly deternfined by their inputs.</S>
			<S sid ="20" ssid = "20">All of these algorithms will perform at their best when their dependent disjunctions interact as little as possible, but if all of the disjunctions interact, then these algorithms may perform redundant computations.</S>
			<S sid ="21" ssid = "21">The need for ef[icient inputs has been noted in the literature 2 but there have been few attempts to automatically optilnize gr;mnnars tor disjunetiw; unification algorithms.</S>
			<S sid ="22" ssid = "22">The modularization algorithm presented in this paper takes existing dependent disjunctions and splits them into independent groups by deterlnining which disjunctions really interact.</S>
			<S sid ="23" ssid = "23">Indel}en-dent groups of disjunctions can be processed sepa- rat;ely during unification rathe, r than having to try every combination of one group with every combination of every other group.</S>
			<S sid ="24" ssid = "24">This pat)er is organized as follows: Section 2 gives an informal introduction to dependent dis ~Cf.</S>
			<S sid ="25" ssid = "25">(Maxwell and Kaplan, ]991) fl)r instance.</S>
			<S sid ="26" ssid = "26">448 juncl;ions and shows how r(,ctundani; int(;raclli(lns lml,w(;en groups of (tisju:n(:l;ions (:mi bc r(;du(:ed.</S>
			<S sid ="27" ssid = "27">S(;c:i;ion 3 shows how normal disjunctions c;m t)(; r(;l)lac(;d t)y (:ont, cxtx;d constrainl:s. S(,(:tion 4 t;hcn ,&lt;d~ows how t, hcs(&apos;~ cont(;xl;(&apos;,d (&apos;,onstraints can en-cod(, del)(&apos;,nd(;ni, disjunctions.</S>
			<S sid ="28" ssid = "28">S(!(:l;ion 5 1)r(!s(&apos;,nts the mo(hllm&apos;ization a,lgorii;hm for conlx~xi;ed (&apos;,on-.</S>
			<S sid ="29" ssid = "29">si;ra.ini;s. Ih)wever, e, ven though this algor{l;hm is t~ (;omt)ih&gt;t,im(&apos;, ot)(;ralJ(m , it itself has (;xt)on(nitial comt)lexity, so lilil, l(ing it IllOl(&apos;, (~tli(&apos;,i(mi; should ~Jso 1)(; a (:onc:(,rn.</S>
			<S sid ="30" ssid = "30">A i;h(~or(;m will l,hc, Ii ])(; i)r(~s(mix;d ill S(&apos;x&apos;J;iOll (i t]mL t)(!rllli(;s ;I, li (&apos;,xt)olt(!tll;ial t)&amp;rt; ()[ i,tl(; nm(hllarizal;ion algo]&apos;il,hm I;()I)c rct)l;t(:(&apos;,(l 1 W combinatorial aam.lysis.</S>
			<S sid ="31" ssid = "31">Dependent disjunctions l)(:l)enchull; disjuncl;ions are lik(&apos; ]u)]mai dis.iun(:--dons cxc&apos;,c;1)t dial; (;very (lis.iun(:l;ion has a nanL(&apos;, mid l;h(; disjuncts of disjuimti(ms wii;h tim sam(: IlllIll(~ IllltSt; |)(; ch()s(~ll ill SyllC.</S>
			<S sid ="32" ssid = "32">FoF (~xmnt)l(&apos;.</S>
			<S sid ="33" ssid = "33">, (&lt;, g,, d/, (//&apos;) A (&lt;t &apos;,?, ~/)&apos;, ~//&apos;) is a (:,,ni.n,:i:io,~ ,)r i:wo dcl)cn(hmt disjml(:dons with tim s.~/lil(; lt~l,l[l(,., (/.</S>
			<S sid ="34" ssid = "34">Wtl;l,l; this m(&apos;.;ms ix llha.l; if l,h(&apos;, s(;(&apos;oml (lisjun(:l: in 1;ho, til&apos;sl; (tis.iul~(:tion, (//, ix (:hoscn, lJicn l;h(~ s(!(&gt; ond dis.jun(:t, of th(; ()th(;r disjun(:llion, &apos;~//, Inllsl; t)(; chos(m as well.</S>
			<S sid ="35" ssid = "35">(Not(; thai; wilful; kind (if con- sLrainl;s the ¢/)s a.n(I &apos;l/~s are ix not iml)ortmfl; here.)</S>
			<S sid ="36" ssid = "36">&apos;Fh(&apos;, (&apos;,oIlll)lll;&amp;/;iOll&amp;l l&apos;e;/,soll [()1 llSill{,; (h~t)(,,u(hml; (lis.iun(&apos;.i;ions ovc, r norma,] (tisjunc&apos;.tions ix t;hal; (h&gt; l)(;n(lcnl; disjun(:dons Mlow for more (:Oral)a(;1, a.nd (dlici(;nl; sl;tllCi;/ll(~.s. &apos;Fhis is l)mdcularly lain(; whcli (h;1)cn(l(;nl; (lisjunc:l;ious arc (&apos;,lnl)(!d(hxt iusi(h; of [ea,l, urc sl;rutJl;llr(;s. This is [let&apos;,raise in l;li;tl, c.aso (lisjlln(:l;i(ins C}l,ll lic kept hi(&apos;a,l ill it dirc;(:l;(&apos;d gl&apos;ltlih Sl,]&apos;llCI;lll&apos;(1 t;hllS s:4Villl r l:(xhut(la.nl; [&apos;(;;tl;ure I);~l;lis.</S>
			<S sid ="37" ssid = "37">Wc slty I;tiaA; disjuncl;ions with l;]i(; sani(; name&apos;, arc in l;h(; sa,mc g&apos;ro&apos;u,p. Oltc (lisl;inguishing fea1;llr(~ of a, group of (lisjun(&apos;dons ix i;tl&amp;l; (;~(;}1 dis- jun(;t;ion lnusi; ha, v(~ tim stun(&apos;, numl)(&apos;,r of dis junclis.</S>
			<S sid ="38" ssid = "38">This is (;sscntially who!re!</S>
			<S sid ="39" ssid = "39">r(xlun(lalit int, cr- a(&apos;,l;ions origina, l;(&apos;,, l&quot;or inslia,lL(m~ in (&lt;l (l)&gt; (lJ, (I/, qi)&apos;) A (,1 &apos;~1~,&apos;~//, &apos;~/~, &apos;~//) (;ac:h disjun(:ti()n has four (tisjun(&apos;,ts, [)111; r(;ally Oll]y l;WO values.</S>
			<S sid ="40" ssid = "40">Bul; 111()I&apos;( ~, iml)O]&apos;- l;;~.nl;ly, no nla.l;l;(;r whal; wahl(,, of l,h0 lirsl; (lisjun(&gt; lion ix (:hos(m ((/) or ell) t;hc; sallle v~-I, lll(~S a,l(; t)(3s-.</S>
			<S sid ="41" ssid = "41">sibh; for i;h(*, s(;(&apos;,on(1 (9 or &apos;l//).</S>
			<S sid ="42" ssid = "42">hi ol;hcr words, thos(&apos; disjunctions at(; a(:tually ind(;p(mdcnt from one; anol;hcr, and Can t)0, put into (lifl&apos;er(&apos;,nl; groups: (d&apos; +, ¢&apos;) A (d&quot; &quot;/2, +&apos;).</S>
			<S sid ="43" ssid = "43">This is th(: In OC(;Ss ,)t ,nod ulmiz~tl;ion which will b(; forina,lized in s(;c;l;ion 5.</S>
			<S sid ="44" ssid = "44">One mi&lt;ghl; t)c l;(mll)tc(l to l;hink thal; ul()(lulm&apos;- izg-t,|;ion ix llllnCCCSS~l,l&apos;y siIl(;(~ ~I&apos;3,IlIIlI}LI wril;(;rs ~-/,1&quot;(~ unlikely to writ(&apos;.</S>
			<S sid ="45" ssid = "45">(h;t)endc;nt; disjunctions which (&apos;,ontain iild(~,l)cm(tcn(; parts.</S>
			<S sid ="46" ssid = "46">Ih:)w(&apos;v(~r, gramma, r writers m;~y not b(; (;hi; only sotlr(;(!</S>
			<S sid ="47" ssid = "47">o[ ([(;[)(;n(l(;ifl, disjunc:tions.</S>
			<S sid ="48" ssid = "48">Mmiy grajmnar l)ro(:(;ssing sysi;(;ms use high-level dose:tit)lions whic:h arc I;hcn transform(;d into lttOr(; cxt)lic:il; [ow(~l&apos;-hw(;1 grmmnars.</S>
			<S sid ="49" ssid = "49">This trimsJbrmatioIl proc:c;ss may very w(&apos;.ll in-l;rodu(;(; large&apos; :tlllllll)(;l&apos;,&lt;-; of dc;t)en(h;nl; disjunctions with (;×a(:l,ly this t)rol)(;rl,y.</S>
			<S sid ="50" ssid = "50">()IIC (&apos;×alnt)l(~ of who;r(; this can ha,l)l)(;n is in the; (&apos;xmipilm;ion o1&apos; h;xi(:a,1 ruh&apos;,s in (Mcmr(&apos;rs and Mimmn, 1995).</S>
			<S sid ="51" ssid = "51">In this t)apc!r, M(mr(ns mM Min n(;n (t(&apos;s(:rib(~ a (:omt)ih, whic:h f, rmml~m;s a. s(,t of LIPS(; h;xi(:al ruh;s aim th(;ir int(;ra, l:d()n into (h;l- init;e r(Jations usc,d 1,o constrain h&apos;xical (~niai(~s. In (Mem(us and Mimmn, 199(i), th(&apos;y show how nn oil&apos;-lin(; COml)ila, tion te(:hniqu(; (:a,lh~d constraint l)roi)a,gation can I)e us(;d to inll)rov(; tim (leNnit(~ c:la,us(&apos; (;nc:()cting produ(:(;d 1)y l;heir (:Oml)ih, t() a,1- h)w for m()r(~ (dti(:i(~nl; t)ro(:(&apos;ssing.</S>
			<S sid ="52" ssid = "52">Tim use o[ (h&apos; iron(hint disjunctions t)rovid(,.s ml a.l;tr;~(:dv(~ ~dLer- ]mlJv(~ 1;o I;tm (:olisl,rainl, t)]op;~gal;ion ~q)l)roa(:h 1) 3, st)(;(&apos;.ifying all t;h(; information associ;~lxxl with a h&apos;xi(:al (;nl,ry dir(;c:dy as a singh&apos;, (h&apos;t)(;nd(;nl; f(!m l;llre sI;r/I(:LIII&apos;(; r&amp;l;h(;r th;tn hidd(m in a set; of (h~ti- nii;e (:la.us(;s. :~ C&apos;onsidc.r the AheM lmh)w: PIt()N ~ ll,d ...... lielnu,, lleht, li,d,I } i. d VI,&apos;()I(M {I)se, hse, fin I lilt} d .% Ull.I [-/ I {~ vn,&apos;()aM ~,.,,, [VI,&apos;()I{M I!he]} i,.]J &gt; &apos;lichen L au(~ I &apos;&quot; I I [VI,&apos;()ILM hsE( [ 11 )&apos; ( [(X)N&apos;r )&apos; ( ) This comph&apos;.x lexicM entry relsrcs(;nl;s the ha.so lex ical enlay fl)r t;ll(&apos;.</S>
			<S sid ="53" ssid = "53">Gcrnmn verb lichen, &quot;to love&quot;, mM tim t;hree lcxical c!ntrics l;haA; (:all 1)0.</S>
			<S sid ="54" ssid = "54">derived from il; given th(!</S>
			<S sid ="55" ssid = "55">lcxi(:~d ruh;s prcsc;nl;c,xl in (Me.urers and Mimmn, ]99(i).</S>
			<S sid ="56" ssid = "56">Tho difl&apos;(;renc:es tml,wc&apos;x;n i;hese h~xi(:M (miaic;s arc (,nc:oded 1)y th(; (h~pc&apos;,nch;nl; disjunctions all o1&quot; which a,rc in th(~ .~mnc gr(ml), d. The first ([i~}llll(;l; ill c&amp;ch (tisjun(;l,ioll (:()rr(~-Sill)nits to l;tm b;ts(; t&apos;Olln~ (;hi; S(;(;()II(I (:orr(&apos;st)c)n(ls to the al)pli(:~l;ion of l;lm Compl(&apos;mc;nt F, xtracl;ic)u l,exicM lhtl(;, the third corrc&apos;sl)onds to the al)pli-cation of the Finitivization L(;xical ltuh;, mid I;he last COrlTo, s1)oIl(ls l;o Lhe apt)lication of t)ol;h rltles.</S>
			<S sid ="57" ssid = "57">&apos;1 Modulariz~tion can l)e ilSc.(l t;o ilclak(; this t&apos;(&apos;~tur(~ sl;ructur(; (wen more (dlichuit by st)litl;ing all(; gro/ip d into two new gt&apos;()llpS dl a, nd (12 as showu lmlow.</S>
			<S sid ="58" ssid = "58">aln I;he case of infinite h;xica, detinitc clauses arc. still necc.ss;try to encode recursive informal;ion.</S>
			<S sid ="59" ssid = "59">4q&apos;ht&apos;,se lexical rules air(!</S>
			<S sid ="60" ssid = "60">simplitied versions of those presented in (Polb~rd ~md Sag, ]994).</S>
			<S sid ="61" ssid = "61">449 PIION ~ lleben, liebt / [dl VFORM~ bse, fill} I, el SUBJ [] f rVFORM bse] ] ) [lieben -] [AaG~ 2t!]] { rv,,&apos;OaMbsol } s,,,,s,, d2 Another example of where modularization might prove useful is in the treatment of typed feature structures presented in (Gerdemann and King, 1994).</S>
			<S sid ="62" ssid = "62">Their approach produces a set of feature structures from a satisfiability algorithm such that all of the feature structures have the same shape but the nodes may be labeled by different types.</S>
			<S sid ="63" ssid = "63">They then collapse this set down to a single feature structure where nodes are labeled with dependent disjunctions of types.</S>
			<S sid ="64" ssid = "64">Many of the groups of disjunctions in their feature structures can be made more efficient via modularization.</S>
			<S sid ="65" ssid = "65">A final example is in the compaction algorithm for feature structures, presented in (Grigith, 1995).</S>
			<S sid ="66" ssid = "66">Compaction is another operation designed to optimize feature structures for unification.</S>
			<S sid ="67" ssid = "67">It takes a disjunction of feature structures, transforms them into a single feature structure with dependent disjunctions, and then pushes the dis- junctions down in the structure as far as possible.</S>
			<S sid ="68" ssid = "68">The result is a large number of dependent dis-junctions in the same group.</S>
			<S sid ="69" ssid = "69">Many of these can probably be split into new independent groups.</S>
			<S sid ="70" ssid = "70">Contexted constraints Maxwell and Kaplan (1989) showed how a dis-junction of constraints could be replaced by an equisatisfiable conjunction of contexted constraints as in lemma 1 below.</S>
			<S sid ="71" ssid = "71">5 Lemma 1 (Contexted Constraints) ¢1 V ¢2 is satisfialtle if] (t) -+ ¢1) A (~ --4 ¢2) is satisfiable, where p is a new propositional variable.</S>
			<S sid ="72" ssid = "72">Disjunctions are replaced by conjunctions of implications from contexts (propositional formulae) to the base constraints fie.</S>
			<S sid ="73" ssid = "73">¢:t and ¢2)- The nature of the base constraints is irrelevant as long as there is a satisfaction algorithm for them.</S>
			<S sid ="74" ssid = "74">The key insight is that solving disjunctions of the base constraints is no longer necessary since they are purely conjunctive.</S>
			<S sid ="75" ssid = "75">SFor a proof see (Maxwell and Kaplan, 1989).</S>
			<S sid ="76" ssid = "76">Maxwell and Kaplan&apos;s goal in doing this was to have an efficient method for solving disjunctive constraints.</S>
			<S sid ="77" ssid = "77">The goal in this paper is compilin.q disjunctive constraints into more efficient ones for fllture solution.</S>
			<S sid ="78" ssid = "78">To this end a somewhat different notion of contexted constraint will be used as show in lemma 2.</S>
			<S sid ="79" ssid = "79">Lemma 2 (Alternative-Case Form) (/)1 V ¢2 is satisfiable iff (al4- ¢]) A (a2 ~- ¢:~) A (al V a2) is satisfiable, where al and a2 arc new propositional variables.</S>
			<S sid ="80" ssid = "80">We (:an see that this formulation is nearly equivalent to Maxwell and Kaplan&apos;s by substituting p for at and p for a2.</S>
			<S sid ="81" ssid = "81">To make the formulation completely equivalent;, we would need to enforce the uniqueness of a solution by conjoining al V g2.</S>
			<S sid ="82" ssid = "82">However, this is unnecessary since we want to permit both solutions to be simultaneously true.</S>
			<S sid ="83" ssid = "83">The reason for using the modified version of contexted constraints in lemma 2 is that we can separate the representation of disjunctions into a conjunction of the values that the disjuncts can have, called the alternatives, and the way in which the we can choose the values, called the cases.</S>
			<S sid ="84" ssid = "84">The alternatives are the conjunction (al -~ ¢1) A (a2 -+ (/52) and the cases are the disjunction (al V a2).</S>
			<S sid ="85" ssid = "85">While we could use repeated applications of lemma 2 to turn a disjunction of n disjuncts into an alternative-case form, it will simplify the exposition to have a more general way of doing this, as shown in lemma 3.</S>
			<S sid ="86" ssid = "86">v----I~l~)ma 3 (Nary AiternativeCaseA (ai -~ ¢i) A vFarm)ai ieN is satisfiable iff icN icN iS satisfiable, where each ai is a new propositional variablA°(ai--~ ¢i) V a{ Itere iGN are the alternatives and icN are the cases.</S>
			<S sid ="87" ssid = "87">So for example, ¢1 V ¢2 V Ca V ¢4 is satisfiable just in case (at -~ ¢1) A (a2 -+ ¢2) A (a3 ~+ q~3) A (a4 -~ (~4) A (a:, V a2 V a3 V a4) is satisfiable.</S>
			<S sid ="88" ssid = "88">4 Dependent disjunctions as contexted constraints.</S>
			<S sid ="89" ssid = "89">The usefulness of the alternative-case form only becomes apparent when considering dependent disjunctions.</S>
			<S sid ="90" ssid = "90">Dependent disjunctions can be represented by alternative-cast forms as shown in definition 1 below.</S>
			<S sid ="91" ssid = "91">Definition 1 (Dependency Group) A dependency group is a conjunction of dependent disjunctions with the same name, d, where each V* A*, 6ieN and ieN are disjunctions and conjunctions of formulae ¢i, respectively, where each i is a member of the set of indices, N. 450 disjunction is an alternative-case form such that there is one alternative for every disjunct of every disjunction in the group, and there is one case for each disjunct in the group which is a co*one- tion of the alternative variables for that disjunct &lt;.M A A(a}-~¢}) V A a} : i6Mj6N AJ6NiC-M where each a} is a new propositional variable and N = {L&lt;...,n}.</S>
			<S sid ="92" ssid = "92">So l;he dependent disjunction (,l ¢,0,¢&apos;) A (d ¢,&apos;~//, 0&apos;} is the alternative-case form with alternatives (a I -+ 0) A (a~ -~ 0) A (a:~ -+ 4/) A (,4 -&quot; ¢) A ¢&apos;) A &quot;/&quot;) and eases ((a I Aa~) V (a~ Aa~) V (a~ A&lt;)).</S>
			<S sid ="93" ssid = "93">The cases enforce that the corresponding disjuncts of every disjunet in the group inust be simultaneously satisfiable.</S>
			<S sid ="94" ssid = "94">We, can now start to see where redundancy in dependent disjmmtions originates.</S>
			<S sid ="95" ssid = "95">Because, every disjunction in a group of (lepen(le, nt disjunctions nmst have the, same nund)er of disjuncts, some, of those disjunets may appear more, than once.</S>
			<S sid ="96" ssid = "96">In the above exmnple t:br instance, 5 occurs twice in the first disjunction and ~// occurs twi(:e in the second disjunction.</S>
			<S sid ="97" ssid = "97">To resolve this problem we impose the following condition, called alternative compactness: if a base constraint ¢} equals another base constraint from the same disjunction, ¢[,, then the alternatives variables associated with those base constraints, (,ji and a~, are also equal.</S>
			<S sid ="98" ssid = "98">7 Doing this allows us to express the alternatives t;&apos;om the example above as (d -~ ¢) A (4 -~ ¢&apos;) A (~ --~ ¢) a (a~ ~ ¢&apos;), an(1 the case,~ as ((at: A a~t) V (all A (t 2) V (8,12 A a2)).8 One advalltage of this is that the number of base constraints that must be checked during satisfaction (:an potentially be exponentially reduced.</S>
			<S sid ="99" ssid = "99">&apos;File nexl; section will show how an alt;ernative-case form for a, group of det)tndent disjuncl;ions can be split into a conjunction of two (or more) equivalent forms, thereby (potentially) exponentially reducing the munbtr of alternative varial)le interactions that must be checked during satisfac- l;ion, Modularization Consider again tile example from section 2: (d (/5, (I), ¢&apos;, (/)&apos;) A (d 0, &quot;~t/, ~1~, %/)&apos;).</S>
			<S sid ="100" ssid = "100">i{epresented as a compact alternative-case form, the alternatives becomes: (al 0)A((4 ¢&apos;)A(d &apos;,//), with cases: ((a I A a~) V (al A a~) V (a.~ A a~) V (a 1 A a~)).</S>
			<S sid ="101" ssid = "101">The key to determining that the two disjunctions (:all be split into different rNote that this requires being able to determine equality of the base constraints.</S>
			<S sid ="102" ssid = "102">Sin this example, equivalent alternative variables have been replaced by representatives of theirequivalence chess.</S>
			<S sid ="103" ssid = "103">So a~ has been replaced by al and a?a has been replaced by a.~.</S>
			<S sid ="104" ssid = "104">groups then involves determining that cases can be split into a conjunction of two smaller cases (a&apos;, V a~) A (a~ V a~).</S>
			<S sid ="105" ssid = "105">If the cases can be split in this manner, we say the cases (and by extension tilt group of dependent disjunctions) are independent.</S>
			<S sid ="106" ssid = "106">Definition 2 (Independence) A case ]orrn is independent iff it is equivalent to &quot;j~{N i6M ~ j(iN&apos; i6M&apos; A jcN&quot; i6M&quot; where M&apos; and M&quot; partition M. So in the above examph&apos;,, M = {1,2} where 1 rep- r(!sents l;he first disjunel;ion and 2 represents l;he second.</S>
			<S sid ="107" ssid = "107">That makes M&apos; = {1} and M&quot; = {2}.</S>
			<S sid ="108" ssid = "108">While M&apos; and M&quot; are derived Dora M, the elealeuts of the Ns are arbitrary.</S>
			<S sid ="109" ssid = "109">But a consequence of definil;ion 2 is that [N[ =-IN&apos;[ x [N&quot;[.</S>
			<S sid ="110" ssid = "110">This will be proved in section 6.</S>
			<S sid ="111" ssid = "111">The size of the Ns, however, represent the nmnber of cases.</S>
			<S sid ="112" ssid = "112">So for instance in the above example, N might equal {1,2,3,4} since there are four disjuncts in the original ease form, while N&apos; might equal {1,2} and N&quot;, {1,2}, since the smaller case forms each contain two disjuncts.</S>
			<S sid ="113" ssid = "113">The process of splitting a group of dependent disjunctions into smallel&quot; groups is called modularization.</S>
			<S sid ="114" ssid = "114">Modularizing a group of dependent disjunctions amounts to finding a conjunction of ease forms that in equivalent; to the original ease form.</S>
			<S sid ="115" ssid = "115">The modularization algorithm consists of two main steps.</S>
			<S sid ="116" ssid = "116">Tile first is to take the original case form and to construct a pair of possibly in- dep(mdent ease forms from it:.</S>
			<S sid ="117" ssid = "117">The second step is to check if these (:as(&apos;, forms are actually indepen- (lent from each other with respect to the original one.</S>
			<S sid ="118" ssid = "118">The modularizatioil algorithm performs both of these steps repeatedly until either a pmr of in- depe, ndent ease R)rms is found or until all possible pMrs have been checked.</S>
			<S sid ="119" ssid = "119">If tile later, then we know that; the original dependent disjunction in already nn)(lulai&apos;.</S>
			<S sid ="120" ssid = "120">If on the ottmr hand we can split the case forms into a pair of smaller, independent (;as(; forlns, then we can again try to modularize each of those, until all groups are modular.</S>
			<S sid ="121" ssid = "121">&apos;[b const;ruct a pair of potentially independent (:as(; forms, we first need to partition the set of alternative vm&apos;iablts from the original ca,qe form into two sets.</S>
			<S sid ="122" ssid = "122">The first, subset contains all of and only the, variables corresponding to some subset of the original disjunctions and tile second subset of variables is the complement of the first, corresponding to all of and only the other disjunctions.</S>
			<S sid ="123" ssid = "123">lh&apos;om these subsets of variables, we construct two new cast forms Dora the original using the operation of confinement, defined below.</S>
			<S sid ="124" ssid = "124">Definitjop, A 3 (ConfineInent) V /\ a~ COII,f (jc N iE M , J~/It) 451 V Aa; is the confinement of J CN iGM with respect to a V k a; iff co~tf(J CN i&lt;M , M&apos;) =-dnf(J CN i~M&apos; ), where.</S>
			<S sid ="125" ssid = "125">M&apos; C M. Constructing the eontinement of a (:as(; form is essentially just throwing out all of the alternative variables that are not in M&apos;.</S>
			<S sid ="126" ssid = "126">However, only doing this might leave us with duplicate disjuncts, so converting the result to DNF removes any such duplicates.</S>
			<S sid ="127" ssid = "127">To make the definition of confinement clearer, consider tile following conjunction of dependent disjunctions: (d ¢, 0, ¢, (/), ¢&apos;, ~//) A (d ~/% ~//, t/,, ,//, ~/o, t//)A ((~ x, x, x&apos;, x&apos;, x&apos;, x&apos;}.</S>
			<S sid ="128" ssid = "128">This is equivalent to tile compact alternative forIn: 9 (a~ -&apos;, ¢&apos;) A (a~ --~ x) A (d + x&apos;), and tile following case fornl: ease.</S>
			<S sid ="129" ssid = "129">= ((el A a~/, ,*9 v (al A ~4 A a&apos;0, V (4 A .,2 A d)v (4 A a~ A d) v (4 A (q A ai~) V ((4 A a~ A d))&apos; Now we can compute the confinements.</S>
			<S sid ="130" ssid = "130">For instance 1 eonf(case, {1, 2}) = dnf((a I A a~) V (a I A a,~)V ,] (al A (q) v (o&apos; A a,9 v ((4 A d) v (4 A d)) After removing duplicates we get: .,,¢((,ase, {~, 2}) -((4 A ab V (o * A &quot;9 V (4 A a~) V (4 A a,9) &apos;1 Likewise, for the c()mtflement of M&apos; with respect to M, we get: conf(case, {3}) : ((a a) V (ai~)).</S>
			<S sid ="131" ssid = "131">Now we just need to test whether two confined case ibrms are independent with respect to the original.</S>
			<S sid ="132" ssid = "132">This is done with the free combination operation, shown in definition 4.</S>
			<S sid ="133" ssid = "133">Definition 4 (]~¥ee Combination ®) The free combination of two ease forms is the dis- junctive &apos;normal form of their conjunction: case&apos; ® case&quot; --dnf(case&apos; A case&quot;) The two ease forms, case&apos; and case&quot;, are I)NF for- mulct.</S>
			<S sid ="134" ssid = "134">~ib compute the free combination, we conjoin them and convert the re.suit back into DNF.</S>
			<S sid ="135" ssid = "135">They are independence if their free combination is equal to the original ease tbrm, case.</S>
			<S sid ="136" ssid = "136">For example, the flee combination of the two confinements from above, ((a I A a, 2) V (a*, a a,~) V (a~ A a~) V (a~ A a~)) and ((d) v 0,9) is (ra&apos; A a~ A 4) V (el A 4 A 4) V (a I/, a~ A d)V \ ] (4 A a.~ A 4*) v (4 A ,q A d) v (4 A a~/, d)V (a~ A d A d) v (a~ A a~ A d)) 9in this examl)le , equivalent alternative variables have again been replaced by representat, ives of their equivalence class.</S>
			<S sid ="137" ssid = "137">So tbr instance., a~, c*~ and a~ are all represented by al. 452 which is not equM t;o the original (:as(.&apos; form: ((el A a~ A a~) V (a&apos;, A ,~,~ A 4&apos;) V (4 A d A ,,i])v (al A a~ A all) v (d A a~ A d) v 04 A d A a q)), so tim first two disjunctions are not indet)en-dent from the third.</S>
			<S sid ="138" ssid = "138">However, the second dis-jmmtion is independe.nt front the first and the third since, conf(case, {2}) -((a~) V (a.~)), anti co,¢(ca.~e, {1, 3}) (q,&apos;t &apos;~ &apos; ~ &apos; &quot; : ,Aa&apos;,)V(%Aai,)V(asAa!i)) , and their free combination is equal to the oi&apos;iginal case form.</S>
			<S sid ="139" ssid = "139">Therefore, the original formula is equivalent to (d&apos; ~/a,*//)A (d,, ¢, ¢, ¢&apos;)A(d,, X, X&apos;, Z&apos;).</S>
			<S sid ="140" ssid = "140">6 Free combination elimination.</S>
			<S sid ="141" ssid = "141">The last section showed all efl&apos;ective algoritlnn for modularizing groups of dependent disjunet;iolls.</S>
			<S sid ="142" ssid = "142">However, even dlough this is a compile time algorithm we should be con(:erned about its eflio ciency since it has ext)onential comph;xity.</S>
			<S sid ="143" ssid = "143">The main source of complexity is that we inight have to check (;very pair of sul)sets of disjun(:tions fl&apos;oin the group.</S>
			<S sid ="144" ssid = "144">Ill the worst case this is tnmvoidable (el o though we do not expect natural language grain- mars to exhibit such behavior).</S>
			<S sid ="145" ssid = "145">Other sources of comi)lexity are computing the fl&apos;ee coinbinadon and testing the result against the original (:as(; form.</S>
			<S sid ="146" ssid = "146">l,uckily it is possible to avoid both of these operations.</S>
			<S sid ="147" ssid = "147">This Ceil t)e done by noting that both the original (:ase form aim each of the (:onfine{t (:as(; forms are in DNF.</S>
			<S sid ="148" ssid = "148">Therefore it; is a nee-.</S>
			<S sid ="149" ssid = "149">essary (:ondition t}tat if l;he fl&apos;ee combination of the confinements is the same as the original case form then the I)roduet of tile number of disjun(&apos;ts i,, ea(:h conflneme.t, lease&apos;l x lease&quot;l, re,st eq,lal the number of disjun(:ts in the original case form, lease I. Moreover, since both confinements at(; derived fl&apos;om the original ease form, it is also a suf ficient, condition.</S>
			<S sid ="150" ssid = "150">This is shown more forlnally in theorem 1.</S>
			<S sid ="151" ssid = "151">Theorem 1 (l~Yee combination elimination) ~.&apos;,~se = ~:as,/Oease&quot; ¢=&gt; ]case] = ba~e&apos;l × Icase&quot;l Proof =:&gt; We assulne that case&apos;®case&quot; =- case.</S>
			<S sid ="152" ssid = "152">Since hoth case&apos;® eas#&apos; and ease are in DNF and DNI; is unique, we know that ](:as(&apos;.&apos; ® case&quot;] =: lease].</S>
			<S sid ="153" ssid = "153">We also know that case&apos; and case&quot; have no disjunets in common because they have no alternative variables in colnmon, so Icasc&apos;®case&quot;l = Icase&apos;l x Icasc.&quot;l. Therefore.</S>
			<S sid ="154" ssid = "154">le~s4 = Icasc&apos;l x kase&quot;].</S>
			<S sid ="155" ssid = "155">U Proof &lt;--Again since case&apos; arm case&quot; have no disjuncts in cormnon, we know that leas# @ case&quot;] = ]case&apos;] x Icase&quot;] and therefore, that lease I -- lease&apos;®co, st&quot;].</S>
			<S sid ="156" ssid = "156">Every disjunct in case can be represented as A&apos; A A&quot; where A&apos; is a disjnnet in case&apos; and A&quot; is a disjun(:t ill case&quot;.</S>
			<S sid ="157" ssid = "157">So the dis- .iunets in ease&apos;@ case&quot; must be every conjunction of possible A&apos;s and A&quot;s. So case&apos; ® case&quot; must c&lt;mtain all (&gt;f th&lt;&apos;, &lt;li@mcts in ca.sc mM it.</S>
			<S sid ="158" ssid = "158">could contain ev&lt;m m&lt;)re, }),it f,h&lt;m + &gt; case ~ ~ case&quot; must (:ontain cxacl;ly the disjuncl;s ill cas(: aIld l;hcrcforc (:as( t :: (:o,,~(&apos;J (29 (:(ts(:&apos;.</S>
			<S sid ="159" ssid = "159">E] We can see that this would have hell&gt;ed us in th(&apos;.</S>
			<S sid ="160" ssid = "160">p,&apos;cvi&lt;,us &lt;`-x~t~,,p&gt; t;&lt;)k~,&lt;,w m~t. &lt;:&lt;,,,/(,,&lt;,,.~(,,{1,2}) (:(}lll(l 110|; |)(&apos;~ il,(|(,t)(!II(l(!llJ; [&apos;1&apos;()1[1 C()ILf(c(t,&apos;~C,{3}) wit;h respect to c&lt;,,,sc, t&gt;eca.use ):,,(f(ca,sc, {1,2 })!</S>
			<S sid ="161" ssid = "161">8.</S>
			<S sid ="162" ssid = "162">()onvcrscly, sin(:(`- Ico&apos;/~f(ca.s&apos;c, {[,3}) I 3 and [conf(casc, {2})1 : 2, we, know imm(,Jia.l;ely l;hat l;hcs(&apos;~ (:as(&apos;, forms are in(h`-t)c&apos;nd(mt. This the, orem also allows us to trotform other comt)inat, orial short cuts, su&lt;&apos;h as noting that if t;he nunltmr of disjuncl;s in the origimtl case torm is prime [;hen it; is already modular.</S>
			<S sid ="163" ssid = "163">Conclusion &apos;[&apos;his paper has [)r(&apos;~s&lt;!nt(xl an (fllici(mt form for r(&apos;,l)r(;s(ml;ing (lc, p(!ll(h;nl, dis,jun(:t;i(&gt;ns m~(i an algorithm for d(`-I;(x;l,ing aim (;liminal;ing r(,,dmt(tmit in: teractions within a group of &lt;[(~l)(m(hmt disjmm- l;i&lt;ms. This mc, l;h&lt;)&lt;l shoul&lt;l be useful for a.,y sys- (;era which (mq)l&lt;)ys &lt;let)endent &lt;lisjun(:tions sin&lt;:e, it, can (`-liminai;e exponenl;ial am(mnt;s of i)ro&lt;:(~ssh~g during (:onstra.inl; sadsi]mtion.</S>
	</SECTION>
</PAPER>
