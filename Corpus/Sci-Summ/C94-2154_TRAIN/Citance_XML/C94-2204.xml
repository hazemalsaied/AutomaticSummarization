<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">A description is an entity that can be interpreted as true or false of an object, and using feature structures as descriptions accrues several computational benefits.</S>
		<S sid ="2" ssid = "2">In this paper, 1 create an explicit interpretation of a typed feature structure used as a description, define the notion of a satisfiable fe.ature structure, and create a simple and effective algorithm to decide if a fe.ature structure is satisfiable.</S>
	</ABSTRACT>
	<SECTION title="INTRODUCTION" number = "1">
			<S sid ="3" ssid = "3">Describing objects is one of several purposes for which linguists use fe.at, ul:e structures.</S>
			<S sid ="4" ssid = "4">A description is an er, tity that can be interpreted as true or false of an object.</S>
			<S sid ="5" ssid = "5">For example, the conventional interpretation of the description &apos;it is black&apos; is true of a soot particle, but false of ~ snowtlake, q&apos;herefore, any use of a feature structure to describe an object delnands that the feature structure can be interpreted as true or false of the object.</S>
			<S sid ="6" ssid = "6">In this paper, I tailor the semantics of [K~NG 1 989] to suit the typed feature structures of [CAII.I&apos;F, NTFA{ 1 992], and so create an explicit interpretation of a typed feature structure used as a descript, ion.</S>
			<S sid ="7" ssid = "7">I then use this interpretation to define the notion of a satisfiable feature structure.</S>
			<S sid ="8" ssid = "8">Though no featm&apos;e structure algebra provides descriptions as expressive as those provided by a feature logic, using feature structures to describe objects profits from a large stock of available computational techniques to represent, test and process feature structures.</S>
			<S sid ="9" ssid = "9">In this paper, I demonstrate the computational benefits of marrying a tractable syntax and an explicit semantics by creating a simple and effective algorithm to decide the satisfiability *The research presented in this paper was sl)on- sored by &apos;]&apos;eilprojekt B4 &quot;Constraints on (h&apos;ammar for Efficient Generation&quot; cff the Sonderforschungsbereich 340 of the Deutsche ForschungsgemeinschafL I also wish to thank Bob Carpenter, Dale (lerdemmm, q&apos;hile) GStz and Jennifer King for their invalualAe hel l) with this paper.</S>
			<S sid ="10" ssid = "10">tWilhehnst.r. 113, 72t17,1 ~l~{ilfingen, (]el&apos;Ill[|fly.</S>
			<S sid ="11" ssid = "11">Einaih klng®sfs.nphil.unl- t uebingen.de.</S>
			<S sid ="12" ssid = "12">of a feature structure.</S>
			<S sid ="13" ssid = "13">Gerdemann and Ggtz&apos;s &apos;Doll type resolution system implements both the sen,antics and an efficient refinement of the satisfiability algorithm I present here (see [C,5TZ 1993], [GEItDF, MANN AND I(ING 1994] and [G~m)EMA~N (VC)]).</S>
	</SECTION>
	<SECTION title="A FEATURE STRUCTURE " number = "2">
			<S sid ="14" ssid = "1">SEMANTICS A signatm.e provides the symbols from which to construc.t typed feature structures, and an interpretation gives those symbols meaning.</S>
			<S sid ="15" ssid = "2">Definition 1.</S>
			<S sid ="16" ssid = "3">E is a siguature iff E is a sextuple (~, %, ~, G, ffl, ~), is a set, (%,-&lt;} is a partial order, { foreachrE72, } = crC72.</S>
			<S sid ="17" ssid = "4">|fair thcna=r &apos; ~2t is a so/,, is a partial tbnction from the Cartesian product of 72 and ~2[ to %, and for each r C 37, each r&apos; C % and each o&quot; C ~, if~(r, or) is defined aml r ~ r&apos; then ~(r&apos;, ct) is defined, and a(~, ~) _-&lt; a(&lt;, .).</S>
			<S sid ="18" ssid = "5">]Ienceforth, I tacitly work with a signature {Q, 72, ~, O, ~(, ~}.</S>
			<S sid ="19" ssid = "6">1 call members of Q states, members of 37 types, ~ subsumption, members of ~ species, members of 9.1 attributes, and ~: appropriateness.</S>
			<S sid ="20" ssid = "7">Do.fil).itlon 2.</S>
			<S sid ="21" ssid = "8">1 is an interpretation iff l is a triple (U, S, A), U is a set, S is a total time|ion from U to A is a total function from ~{ to the set of partial functions from U to U, tbr each (t C ~[ and each u C U, if a((:~)(~,) is deC, ned then ~(S(u), a) is defined, and ;~(s&apos;(~,), ,,) ~ ,V(A(~)(*O), and for each cY G ~( and each u E U, if~(X(u), a) is d(,Jined Suppose that 1 is an interpretation (U, £&apos;, A).</S>
			<S sid ="22" ssid = "9">I call each member of U an object in I. &quot;1250 ]&apos;,&apos;a.ch type.</S>
			<S sid ="23" ssid = "10">denotes a set.</S>
			<S sid ="24" ssid = "11">of o])jecl;s in [.</S>
			<S sid ="25" ssid = "12">The denotations of the species partition U, and S assigns et*ch object iu 1 the ul|ique species whose denottttion contains the object.: ol)jcct u is in the denotation of species cr it[&apos; cr = ,~&apos;(u).</S>
			<S sid ="26" ssid = "13">Subsumption &lt;m&lt;:odes t~ rel~tionship bcl;wccn the denotations of species and I,ypcs: object ,t is in the denotation of I;ype r if[ r ~ 5;(u).</S>
			<S sid ="27" ssid = "14">So, if r~ _-j r2 then the denol:~ttiou o[&quot; type rt contMns the denotation of l;ylw, 7&quot;2.</S>
			<S sid ="28" ssid = "15">Each at|;rilmte del~otes a. partial ft,nction from l;hc objects iu 1 to tim ob.icct.s iu i, aim A assigns e~clt artl;ribute the l&gt;m:t;ia[ funcl.iol~ il, denol;es.</S>
			<S sid ="29" ssid = "16">Appropriateness encodes ~t rcbttion- ship between l;he dcnotaLions of species and atl:ributes: ifa(cr, ,v) is deliued then the den()- tt~tion of a.ttributc (v acts upoi~ each ol~jecl, il, the, denota.l;ion of species cr to yield at, olLiect in the dcnol, ation of type ~(o-, ,v), but ifa((r, ,,,) is undefined then the denotati(m of al.l.ribul.e ~v ~tc/.s upon no object in the deuotalion of species or.</S>
			<S sid ="30" ssid = "17">So, if~(r,{v) is defined then the.</S>
			<S sid ="31" ssid = "18">(h&gt; uota.tion of a ll, ribute rt a.cl.s Ul~(m each objccl, in the denotation of tyl)c v 1;o yichl an object in the del|otal;iol~ of type a(r, ,&apos;).</S>
			<S sid ="32" ssid = "19">I call a linitc sequence of attribul,es a path, and write q3 for I,he set, of paths.</S>
			<S sid ="33" ssid = "20">Definition 3.</S>
			<S sid ="34" ssid = "21">1&apos; is the path interl~retati(m fimctlon under 1 ill&quot; I is an interpretation (U, £&apos;, A), 1&apos; is a tol, al timctim~ l)&apos;om q3 to the s.t ,f l)a, rtia, l fimctions from U 1,o U, alld lbr each ((vl .....</S>
			<S sid ="35" ssid = "22">(v,,) 6 ~, /&apos;(m,...,&apos;v,~) is the timcti&lt;mal coml,o,siti,m of d ( m ) .....</S>
			<S sid ="36" ssid = "23">A ( (~,, ).</S>
			<S sid ="37" ssid = "24">1 write t~ for the path iute,&apos;prctal.ion flu,orion mMer l. De.finition 4.</S>
			<S sid ="38" ssid = "25">l,&apos; is a [baturc structm.c ill&quot; I,&quot; is a quadrulde (Q, q, 5, 0), Q is a tinite subset o1&apos;~], q~Q, 8 is a. finite pa.rtia.I function from the, Ca, rtesian l,rgduct ot&quot; Q mM c2[ to Q, 0 is a totM l)mction from Q to %, and for each q/ ~ Q, &amp;n&quot; some re (5 q3, re rlm.s to q&apos; in I c, where (,&apos;vt,...,;M) z&apos;t/zzs l,o q&apos; ill 1&quot; ill&apos; q&apos; 6 Q, and ~.&quot; son., {qo,..., q,} C- q, q = qo, for each i &lt;., 8(qi,o&apos;i41) iS de, lined, and 3(qi, (Vi41) := qi+l, ~ltl(l q,, -.</S>
			<S sid ="39" ssid = "26">q/.</S>
			<S sid ="40" ssid = "27">}&quot;,;tch [&apos;(!;tl;llr(!</S>
			<S sid ="41" ssid = "28">Stl&apos;tlC[,llr(~ is a COllllCC~,C(l f~]001&quot;(!</S>
			<S sid ="42" ssid = "29">machine (see [MooRI,; 1(;56]) with finitely mauy st~tes, input alphabet 9..[, and output Mplm.bet X. Definition 5.</S>
			<S sid ="43" ssid = "30">1; is true of u under 1 iff F is a featnre structure (Q, q, 5, O), 1 is a.n interpretation (U, S, A), u is an object in 1, and for each re1 6 q3, ca.oh rc 2 C q3 and each q&apos; ~ (O, if rot runs to q/ in t&quot;, and rr.2 runs to q~ in l&quot; tl,,,,, :,,(~,)(,,) i,~ ,mi,,.a, J~(~)(,,) i~ ,&gt;t/,,.4 0(q&apos;) ~ s(v,(,~,)(u)).</S>
			<S sid ="44" ssid = "31">Definition 6.</S>
			<S sid ="45" ssid = "32">I,&apos; is a satisfiable feature structure ill&apos; I&quot; i,s a feature ,~tructure, and for some interpretation I m,l some object u in 1, l&quot; is true ol&apos;u under 1.</S>
	</SECTION>
	<SECTION title="MORPHS. " number = "3">
			<S sid ="46" ssid = "1">The M)undance of inLerpregations se.mns to preclude an effectiw~ algoriidml to decide if a fea.ture structure is s~tisfiabh~.</S>
			<S sid ="47" ssid = "2">However, I in- serl; morl)hs I)eLweell [&apos;ea, l, tlre sgrllCtllrCs ,q3ld objects [.o yMd au iutm&apos;prctaLion free charac~ tcrisat,ion of ~t saLislia.ble fcat;ure structure.</S>
			<S sid ="48" ssid = "3">Definition 7.</S>
			<S sid ="49" ssid = "4">M is a semi-morph ill&quot; M is a triple (A, l&apos;, A), A is a nonemlH.y sulmet orgy, 1&apos; Ls an effuiva, lcnce rehttJon over A, [br each ~v6 2(, each ~l ~- ~ and each ~r.e ~ q3, il&apos;Tq(v ~ A and (Trt,Tr~) (5 1&apos; theql (Trim rr,2,~) ~ I&apos;, A i,~&apos; a total function from A to ~&apos;5, for each rq ~ q3 and each 7r.e C q3, i[&apos;(7fl, 71&quot;2) ~_ l&apos; ~,h(?l, A(TII)= A(TF2) , ~tlld tbr each (~ C ~21and e:rch 7r 6 9f3, if fro: 6 A O,.,, ~ 6 A, ~(A(,0, &quot;9 i,&apos; ,teti,.,d, ~u.l a(A(~),-) ~ a(~(0.</S>
			<S sid ="50" ssid = "5">Detii,ition 8.</S>
			<S sid ="51" ssid = "6">M is a. morph ill&quot; M is a semi-morph (A, 1&apos;, A), a.nd /br each (v 6 ~2[ aim ca.oh n 6 q3, then rccv ~ A. ]:,a,ch nlorph is the Moshicr M~straction (see [MosIIIER 1988]) of a connected mtd totMly well-typed (see [CARPt,;NTt,:I~ 1992]) Moore machine with possibly intlnitely many slates, inpul a.ll)lla.bel; Q{, and oul:put Mphabet ¢&apos;~.</S>
			<S sid ="52" ssid = "7">Definition 9.</S>
			<S sid ="53" ssid = "8">M abstracts u under l iff M is a morph (A, P, A), [ is an interpretation (U, £&apos;, A), u is an object in I, for each rq G 9,3 and each re2 C ~, (re1, ~r2) E I&apos; itr P/rr,)(, 0 is ddi,,ed, P,(~)(,,) is Jea,,e~, ~,,d for each cr E 0 and each re C q~, (re, ~) c a ifl&apos;e,(re)(u) is defined, and = s(P,(re)O0).</S>
			<S sid ="54" ssid = "9">Proposition 10.</S>
			<S sid ="55" ssid = "10">l&apos;br each interpretation I and each object u in I, some unique, morph ahstracts u under l. I thus write of the abstraction of u under [.</S>
			<S sid ="56" ssid = "11">Definition 11.</S>
			<S sid ="57" ssid = "12">u is a standard ohject i[r u is a quadruple (A, P, A, E), (&amp;, 1&apos;, A) is a morph, and E is an equivalence c/ass under 1&apos;.</S>
			<S sid ="58" ssid = "13">[ write U for the set of standard objects, write ~ for the total function fi&apos;om U to ~, where for each a E O and each (A,I&apos;,A,E) C U, S(&amp;, F, A, E) = cr iff for some rr G E, Afro) = or, and write A for the total function fi&apos;om ~t to the set of partial functions fi&apos;om U to U, where for each &lt;v E 9.1, each (&amp;, F, A, F,) E U and each (&amp;&apos;, F&apos;, A&apos;, E&apos;) G U, X(c~)(A, r, A, E) is defined, and /(,~)(a, r, A, E) = (a&apos;, r&apos;, A&apos;, E&apos;) iff (A, I&apos;,A) = (a&apos;,F&apos;,A*), and for some re G E, rea.</S>
			<S sid ="59" ssid = "14">E F,&apos;.</S>
			<S sid ="60" ssid = "15">Lemma 12.</S>
			<S sid ="61" ssid = "16">(U, S, A) is an interpretation.</S>
			<S sid ="62" ssid = "17">I write 7 for (U, ,5&apos;, A}.</S>
			<S sid ="63" ssid = "18">Lemma 13.</S>
			<S sid ="64" ssid = "19">For each (A,I&apos;,A,E) E (), ea.ch (A&apos;, r&apos;, A&apos;, E&apos;) E 9 a,.~ each re C q~, ~&apos;/~(re)(A, r, A, r.)</S>
			<S sid ="65" ssid = "20">is (le~.,e~l, a.,,t ~5~(re)(A, r, A, ~) = (a&apos;, r&apos;, A&apos;, ~&apos;) ia&quot; (a, r, A) = (~&apos;, r&apos;, A&apos;), a,,(~ for some re&apos; G 1&apos;3, re% G E&apos;.</S>
			<S sid ="66" ssid = "21">ProoL By induction on the length of re.</S>
			<S sid ="67" ssid = "22">&apos;, Lemma 14.</S>
			<S sid ="68" ssid = "23">For each ( A, F , A, E} EU, if E is the equivalence class of the.</S>
			<S sid ="69" ssid = "24">empty path under 1&apos; then the abstraction of (A, F, A, E) under is (A, F, A).</S>
			<S sid ="70" ssid = "25">Proposition 15.</S>
			<S sid ="71" ssid = "26">I&apos;br each morph M, for some interl&gt;retation [ and some object u in I, M is the abstraction ofu under I. Definition 16.</S>
			<S sid ="72" ssid = "27">1;&apos; approximates M iff F is a l}ature structure (Q,q,6,0), M is a morph (A, I&apos;, A), and for each re1 E e43, each re&apos;2 C q3 and each q&apos; EQ, il&apos;rel runs to q~ in I&quot;, and re2 runs to q&apos; in F then (~rt, rr2) E r, and o(q&apos;) ~ a(~).</S>
			<S sid ="73" ssid = "28">A feature structure approximates a morph iff the Moshier abstraction of the feature structure abstractly subsumes (see [CARPEN&apos;PI,;lt 1992]) the morph.</S>
			<S sid ="74" ssid = "29">Proposition 17.</S>
			<S sid ="75" ssid = "30">For each interpretation I, each ohject u in I and each feature structure F~ F is true of a under 1 iff 1;&apos; approximates the abstraction of u under I. Theorem 18.</S>
			<S sid ="76" ssid = "31">For each feature structure I,&apos;, l i&apos; is satisfiable iff 1,&apos; approximates some morph.</S>
			<S sid ="77" ssid = "32">Proof.</S>
			<S sid ="78" ssid = "33">From prol&gt;ositions 15 and 17.</S>
			<S sid ="79" ssid = "34">B</S>
	</SECTION>
	<SECTION title="RESOLVED FEATURE STRUCTURES. " number = "4">
			<S sid ="80" ssid = "1">Though theorem 18 gives an interpretation free eharacterisation of a satisfiable feature structure, the characterisation still seems to admit of no effective algorithm to decide if a feature structure is satisfiable, tlowever, I use theorem 18 and resolve.d feature structures to yield a less general interpretation free characterisation of a satisfiable feature structure that admits of such an algorithm.</S>
			<S sid ="81" ssid = "2">Definition 19.</S>
			<S sid ="82" ssid = "3">R is a resolved feature structure itr R is a feature structure (Q, q, a, p}, p is a total function from Q to 6, and for each ~ E 91 and each q&apos; G Q, if ~(q I, ct) is defined then ~(p(q&apos;), ~r) is defined, and (~(p(q&apos;), oz) ~_ p(a(q&apos;, c~)).</S>
			<S sid ="83" ssid = "4">Bach resolved feature structure is a well-typed (see [CARI&apos;ENTF, R 1992]) feature structure with output alphabet (%.</S>
			<S sid ="84" ssid = "5">Definition 20.</S>
			<S sid ="85" ssid = "6">I¢.</S>
			<S sid ="86" ssid = "7">is a resolvant off iff R is a resolved lbature structure (Q, q, 6, p), F is a feature structure (Q,q,~,O), and rot each q&apos; e Q, o(q&apos;) ~_ p(q&apos;).</S>
			<S sid ="87" ssid = "8">Proposition 21.</S>
			<S sid ="88" ssid = "9">~br each interpretation I, each object u in I an(/ each feature structure I a , 1;&apos; is true of u under 1 ill&quot;some resolwmt of J;&apos; is true of u under I. Definition 22.</S>
			<S sid ="89" ssid = "10">(~, %, -&lt;, 0,~2[, ~) is rational iff for each er G 0 and each (v G ~2[, ira(o-, ~) is defined then ~r some a&apos; ~ O, ~(cr, a&apos;) :&lt;_ or&apos;.</S>
			<S sid ="90" ssid = "11">Proposition 23.</S>
			<S sid ="91" ssid = "12">1[&quot; (~, %, ~, O, ~21, ~) is rational then for each resolved tbature structure R, R is satisfiabh&apos;..</S>
			<S sid ="92" ssid = "13">Proof.</S>
			<S sid ="93" ssid = "14">Suppose that N. = (Q, q, 6, p) mid fl is a bijection from ordinal ( to G. Let A0 = {71&quot; f(&apos;r S°l]le q&apos; ~ il~l&apos; } 71&quot; l&apos;llnS to q!</S>
			<S sid ="94" ssid = "15">P0 = (rq,~r2) ~r~ runs 1.o q&apos; in 1~, and , ~r2 r~s toq!in Ie and An= (~r, cr) ~r runs l.o q!</S>
			<S sid ="95" ssid = "16">in lg,~md . cr -p(q ) For each n ~ IN, let An+l = An U rrcr ~r ff An, and ~(A,,(rr), ,e) is defined l&apos;n+l : l&apos;~,zU (Trl~V , &quot;/r2Cg ) 7Cl(&apos;g ~ An+l&apos; gtll(t7r.,ev ~ An4.1, and &apos; (;1,7r2) C [&apos;n, An+l =z .&apos;&lt; &apos;a, ] ~r~v ~ A,~+, \ A., and t A,~U (Trcr,fl(~)) c is the least ordinal f&apos; ill ( such |,hat [ a(A,,(~),,*) ~ ;~(~) J For each n ~ IN, (A,,, I&apos;,,,A,) is a semi-morph.</S>
			<S sid ="96" ssid = "17">lint ,x = U{A. I,, ~ ,N), r= U{r,~ I- e,N}, ~.,d A--U{A, I&quot; &lt; ~N}.</S>
			<S sid ="97" ssid = "18">(z:X, F, A) is a morph thud; 1~ approximates.</S>
			<S sid ="98" ssid = "19">By theorem 18, R is satisliable.</S>
			<S sid ="99" ssid = "20">,&quot; Theorem 24.</S>
			<S sid ="100" ssid = "21">If (.Q, %, ~, ~, &apos;2[, ~) is rati~mal then tbr each feature structure l&quot;, f&quot; is satisfiable ifl&quot; I,&apos; has a. resoh&apos;am.</S>
			<S sid ="101" ssid = "22">Proof.</S>
			<S sid ="102" ssid = "23">l?rom proposil, ious 21 and 23.</S>
	</SECTION>
	<SECTION title="A SATISFIABILITY ALGORITHM " number = "5">
			<S sid ="103" ssid = "1">In this section, I use theorem 24 to show how -given a rationM signature I.lmt meets reason M~le comput~tiona.l conditions 1.o construct an effective Mgorithm to decide if a f&lt;tture sl.ructure is s~tisfial)h~.</S>
			<S sid ="104" ssid = "2">Dctinition 25.</S>
			<S sid ="105" ssid = "3">(£), %, &lt;, G, ~, ~) is com putable iff Q, &apos;~ and ~2[ are counta.lde, 0 is finite, l&apos;or .some (;Hb(:tiw,&apos; fimction SUB, for each T1 ~ ~£ arid each r.2 ~ T., if rl ~ v2 then SUB(rl, ru) =: &apos;true&apos; otherwise SUB(rl, r2) = &apos;tklse&apos;, mid lbr some ellbctive function APP, for each r G  and each c~ G 92, if ~(r, cY) is defined then APP(T,¢v) --=- ~(r,~v) otherwise APP(r, (v) =&apos;undefined&apos;, Proposition 26.</S>
			<S sid ="106" ssid = "4">lf(~,%, ~, 0,~1,~) is con&gt; puta.lde then for some effective fimction RES, [br each feature structure I a, RES(]&quot;) --a list of the resolvants o1&apos; [&quot;.</S>
			<S sid ="107" ssid = "5">Proof.</S>
			<S sid ="108" ssid = "6">Since (k~, &apos;12, y, &apos;0, ~, ~) is computabh&apos;.</S>
			<S sid ="109" ssid = "7">for some elfeetiw; function GEN, for e~ch linite Q c O, GER(Q) = a list of the total functions from Q to (_&apos;~, for some effectiw~ fimction TESTI, for each finite set Q, each tlnite partiM function ~ from the Caxtesmn product, of Q and ~[ 1.o Q, ~md each total flmction 0 from O to %, if for (,,.&apos;h (q, ~) in the domMn of 5, N(O(q), ev) is de.fined, arm a(0(q), ,,,) ~ off(q, .)) then TESTI(~, O) ~ &apos;true&apos; otherwise TEST1(6, 0) = &apos;false&apos;, and for seine et[&apos;ectiw~ flmction TEST2, lbr e;~ch tinite set Q, each total function 01 from Q to % ~md e~Lcll total fimction 0~ from Q to %, if fo,&apos; e[tch (l ~ (~}, 01(q) ~-~02((1) thell TEST2(01,02) 7_- &apos;tr/10&apos; otherwise TESTu(0t, 0~) = &apos;false&apos;.</S>
			<S sid ="110" ssid = "8">Construct RES ,as follows: for each fe;tl.ure s|;rtl(:[,llre ((v), q, {5, 0), while Ei, , az (p, Pl,..., fli) is not clnl)ty do set, )21,, = (pt,...,pi) if TESTI ((5, p) _--.</S>
			<S sid ="111" ssid = "9">%rue&apos;, TEST2(0, p) = &apos;true&apos;, and &gt;~,,,,~= &lt;,i,,..,,}) th,,.,, ~,t ~o,,~ = (,,,I,...,4&gt; if Eo,,t --([q ....</S>
			<S sid ="112" ssid = "10">, p.)</S>
			<S sid ="113" ssid = "11">t,h~.</S>
			<S sid ="114" ssid = "12">o,,q..</S>
			<S sid ="115" ssid = "13">((O, q, ~, .,&gt;,,.,, (q, q, ~,.,.)).</S>
			<S sid ="116" ssid = "14">RES is an effect.ive algorithm, and for e4u;h foalAIl:e s[;i?llCtltr(~ 1&quot;, RgS(/&quot;) --~ list of the resolwml, s of l c. ii Theorem 27.</S>
			<S sid ="117" ssid = "15">/f (k~,~, ~, ~,~,~) is rational and computable then for some eflbctive function SAT, for each feature structure F, if F is satisfiable then SAT(F) = &apos;true otherwise SAT(F) = &apos;false&apos;.</S>
			<S sid ="118" ssid = "16">Proof, From theorem 24 and proposition 26.</S>
			<S sid ="119" ssid = "17">Gerdemann and G6tz&apos;s Troll system (see [G6Tz 1993], [GFRDEIVIANN AND KING 1994] and [GERDEMANN (FC)]) employs an efficient refinement of RES to test the satisfiability of feature structures.</S>
			<S sid ="120" ssid = "18">In fact, Troll represents each feature structure as a disjunction of the resolvants of the feature structure.</S>
			<S sid ="121" ssid = "19">Loosely speaking, the resolvants of a feature structure have the same underlying finite state automaton as the feature structure, and differ only in their output fllnction.</S>
			<S sid ="122" ssid = "20">Troll exploits this property to represent each feature structure as a finite state automaton and a set of output flmctions.</S>
			<S sid ="123" ssid = "21">The &apos;1¥oll unifier is closed on these representations.</S>
			<S sid ="124" ssid = "22">Thus, though RES is computationally expensive, Troll uses RES only during compilation, never during run time.</S>
	</SECTION>
</PAPER>
