<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">We introduce Chinese Whispers, a randomized graph-clustering algorithm, which is time-linear in the number of edges.</S>
		<S sid ="2" ssid = "2">After a detailed definition of the algorithm and a discussion of its strengths and weaknesses, the performance of Chinese Whispers is measured on Natural Language Processing (NLP) problems as diverse as language separation, acquisition of syntactic word classes and word sense disambiguation.</S>
		<S sid ="3" ssid = "3">At this, the fact is employed that the small-world property holds for many graphs in NLP.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="4" ssid = "4">Clustering is the process of grouping together objects based on their similarity to each other.</S>
			<S sid ="5" ssid = "5">In the field of Natural Language Processing (NLP), there are a variety of applications for clustering.</S>
			<S sid ="6" ssid = "6">The most popular ones are document clustering in applications related to retrieval and word clustering for finding sets of similar words or concept hierarchies.</S>
			<S sid ="7" ssid = "7">Traditionally, language objects are characterized by a feature vector.</S>
			<S sid ="8" ssid = "8">These feature vectors can be interpreted as points in a multidimensional space.</S>
			<S sid ="9" ssid = "9">The clustering uses a distance metric, e.g. the cosine of the angle between two such vectors.</S>
			<S sid ="10" ssid = "10">As in NLP there are often several thousand features, of which only a few correlate with each other at a time – think about the number of different words as opposed to the number of words occurring in a sentence – dimensionality reduction techniques can greatly reduce complexity without considerably losing accuracy.</S>
			<S sid ="11" ssid = "11">An alternative representation that does not deal with dimensions in space is the graph representation.</S>
			<S sid ="12" ssid = "12">A graph represents objects (as nodes) and their relations (as edges).</S>
			<S sid ="13" ssid = "13">In NLP, there are a variety of structures that can be naturally represented as graphs, e.g. lexical-semantic word nets, dependency trees, co-occurrence graphs and hyperlinked documents, just to name a few.</S>
			<S sid ="14" ssid = "14">Clustering graphs is a somewhat different task than clustering objects in a multidimensional space: There is no distance metric; the similarity between objects is encoded in the edges.</S>
			<S sid ="15" ssid = "15">Objects that do not share an edge cannot be compared, which gives rise to optimization techniques.</S>
			<S sid ="16" ssid = "16">There is no centroid or ‘average cluster member’ in a graph, permitting centroid-based techniques.</S>
			<S sid ="17" ssid = "17">As data sets in NLP are usually large, there is a strong need for efficient methods, i.e. of low computational complexities.</S>
			<S sid ="18" ssid = "18">In this paper, a very efficient graph-clustering algorithm is introduced that is capable of partitioning very large graphs in comparatively short time.</S>
			<S sid ="19" ssid = "19">Especially for small-world graphs (Watts, 1999), high performance is reached in quality and speed.</S>
			<S sid ="20" ssid = "20">After explaining the algorithm in the next section, experiments with synthetic graphs are reported in section 3.</S>
			<S sid ="21" ssid = "21">These give an insight about the algorithm’s performance.</S>
			<S sid ="22" ssid = "22">In section 4, experiments on three NLP tasks are reported, section 5 concludes by discussing extensions and further application areas.</S>
	</SECTION>
	<SECTION title="Chinese Whispers Algorithm. " number = "2">
			<S sid ="23" ssid = "1">In this section, the Chinese Whispers (CW) algorithm is outlined.</S>
			<S sid ="24" ssid = "2">After recalling important concepts from Graph Theory (cf.</S>
			<S sid ="25" ssid = "3">Bollobás 1998), we describe two views on the algorithm.</S>
			<S sid ="26" ssid = "4">The 73 second view is used to relate CW to another graph clustering algorithm, namely MCL (van Dongen, 2000).</S>
			<S sid ="27" ssid = "5">We use the following notation throughout this paper: Let G=(V,E) be a weighted graph with nodes (vi)?V and weighted edges (vi, vj, wij) ?E with weight wij.</S>
			<S sid ="28" ssid = "6">If (vi, vj, wij)?E implies (vj, vi, wij)?E, then the graph is undirected.</S>
			<S sid ="29" ssid = "7">If all weights are 1, G is called unweighted.</S>
			<S sid ="30" ssid = "8">The degree of a node is the number of edges a node takes part in.</S>
			<S sid ="31" ssid = "9">The neighborhood of a node v is defined by the set of all nodes v’ such that (v,v’,w)?E or (v’,v,w)?E; it consists of all nodes that are connected to v. The adjacency matrix AG of a graph G with n nodes is an n×n matrix where the entry aij denotes the weight of the edge between vi and vj , 0 otherwise.</S>
			<S sid ="32" ssid = "10">The class matrix DG of a Graph G with n nodes is an n×n matrix where rows represent nodes and columns represent classes (ci)?C. The value dij at row i and column j represents the amount of vi as belonging to a class cj.</S>
			<S sid ="33" ssid = "11">For convention, class matrices are row-normalized; the i-th row denotes a distribution of vi over C. If all rows have exactly one nonzero entry with value 1, DG denotes a hard partitioning of V, soft partitioning otherwise.</S>
			<S sid ="34" ssid = "12">2.1 Chinese Whispers algorithm CW is a very basic – yet effective – algorithm to partition the nodes of weighted, undirected graphs.</S>
			<S sid ="35" ssid = "13">It is motivated by the eponymous children’s game, where children whisper words to each other.</S>
			<S sid ="36" ssid = "14">While the game’s goal is to arrive at some funny derivative of the original message by passing it through several noisy channels, the CW algorithm aims at finding groups of nodes that broadcast the same message to their neighbors.</S>
			<S sid ="37" ssid = "15">It can be viewed as a simulation of an agent-based social network; for an overview of this field, see (Amblard 2002).</S>
			<S sid ="38" ssid = "16">The algorithm is outlined in figure 1: initialize: forall vi in V: class(vi)=i; while changes: forall v in V, randomized order: class(v)=highest ranked class in neighborhood of v; Figure 1: The Chinese Whispers algorithm Intuitively, the algorithm works as follows in a bottom-up fashion: First, all nodes get different classes.</S>
			<S sid ="39" ssid = "17">Then the nodes are processed for a small number of iterations and inherit the strongest class in the local neighborhood.</S>
			<S sid ="40" ssid = "18">This is the class whose sum of edge weights to the current node is maximal.</S>
			<S sid ="41" ssid = "19">In case of multiple strongest classes, one is chosen randomly.</S>
			<S sid ="42" ssid = "20">Regions of the same class stabilize during the iteration and grow until they reach the border of a stable region of another class.</S>
			<S sid ="43" ssid = "21">Note that classes are updated immediately: a node can obtain classes from the neighborhood that were introduced there in the same iteration.</S>
			<S sid ="44" ssid = "22">Figure 2 illustrates how a small unweighted graph is clustered into two regions in three iterations.</S>
			<S sid ="45" ssid = "23">Different classes are symbolized by different shades of grey.</S>
			<S sid ="46" ssid = "24">Figure 2: Clustering an 11-nodes graph with CW in two iterations It is possible to introduce a random mutation rate that assigns new classes with a probability decreasing in the number of iterations as described in (Biemann &amp; Teresniak 2005).</S>
			<S sid ="47" ssid = "25">This showed having positive effects for small graphs because of slower convergence in early iterations.</S>
			<S sid ="48" ssid = "26">The CW algorithm cannot cross component boundaries, because there are no edges between nodes belonging to different components.</S>
			<S sid ="49" ssid = "27">Further, nodes that are not connected by any edge are discarded from the clustering process, which possibly leaves a portion of nodes unclustered.</S>
			<S sid ="50" ssid = "28">Formally, CW does not converge, as figure 3 exemplifies: here, the middle node’s neighborhood 0.</S>
			<S sid ="51" ssid = "29">1. 2.</S>
			<S sid ="52" ssid = "30">74 consists of a tie which can be decided in assigning the class of the left or the class of the right nodes in any iteration all over again.</S>
			<S sid ="53" ssid = "31">Ties, however, do not play a major role in weighted graphs.</S>
			<S sid ="54" ssid = "32">Figure 3: The middle node gets the grey or the black class.</S>
			<S sid ="55" ssid = "33">Small numbers denote edge weights.</S>
			<S sid ="56" ssid = "34">Apart from ties, the classes usually do not change any more after a handful of iterations.</S>
			<S sid ="57" ssid = "35">The number of iterations depends on the diameter of the graph: the larger the distance between two nodes is, the more iterations it takes to percolate information from one to another.</S>
			<S sid ="58" ssid = "36">The result of CW is a hard partitioning of the given graph into a number of partitions that emerges in the process – CW is parameter-free.</S>
			<S sid ="59" ssid = "37">It is possible to obtain a soft partitioning by assigning a class distribution to each node, based on the weighted distribution of (hard) classes in its neighborhood in a final step.</S>
			<S sid ="60" ssid = "38">The outcomes of CW resemble those of Min-Cut (Wu &amp; Leahy 1993): Dense regions in the graph are grouped into one cluster while sparsely connected regions are separated.</S>
			<S sid ="61" ssid = "39">In contrast to Min-Cut, CW does not find an optimal hierarchical clustering but yields a non-hierarchical (flat) partition.</S>
			<S sid ="62" ssid = "40">Furthermore, it does not require any threshold as input parameter and is more efficient.</S>
			<S sid ="63" ssid = "41">Another algorithm that uses only local contexts for time-linear clustering is DBSCAN as, described in (Ester et al. 1996), needing two input parameters (although the authors propose an interactive approach to determine them).</S>
			<S sid ="64" ssid = "42">DBSCAN is especially suited for graphs with a geometrical interpretation, i.e. the objects have coordinates in a multidimensional space.</S>
			<S sid ="65" ssid = "43">A quite similar algorithm to CW is MAJORCLUST (Stein &amp; Niggemann 1996), which is based on a comparable idea but converges slower.</S>
			<S sid ="66" ssid = "44">2.2 Chinese Whispers as matrix operation As CW is a special case of Markov-Chain-Clustering (MCL) (van Dongen, 2000), we spend a few words on explaining it.</S>
			<S sid ="67" ssid = "45">MCL is the parallel simulation of all possible random walks up to a. finite length on a graph G. The idea is that random walkers are more likely to end up in the same cluster where they started than walking across clusters.</S>
			<S sid ="68" ssid = "46">MCL simulates flow on a graph by repeatedly updating transition probabilities between all nodes, eventually converging to a transition matrix after k steps that can be interpreted as a clustering of G. This is achieved by alternating an expansion step and an inflation step.</S>
			<S sid ="69" ssid = "47">The expansion step is a matrix multiplication of MG with the current transition matrix.</S>
			<S sid ="70" ssid = "48">The inflation step is a column-wise non-linear operator that increases the contrast between small and large transition probabilities and normalizes the column-wise sums to 1.</S>
			<S sid ="71" ssid = "49">The k matrix multiplications of the expansion step of MCL lead to its time-complexity of O(k·n²).</S>
			<S sid ="72" ssid = "50">It has been observed in (van Dongen, 2000), that only the first couple of iterations operate on dense matrices – when using a strong inflation operator, matrices in the later steps tend to be sparse.</S>
			<S sid ="73" ssid = "51">The author further discusses pruning schemes that keep only some of the largest entries per column, leading to drastic optimization possibilities.</S>
			<S sid ="74" ssid = "52">But the most aggressive sort of pruning is not considered: only keeping one single largest entry.</S>
			<S sid ="75" ssid = "53">Exactly this is conducted in the basic CW process.</S>
			<S sid ="76" ssid = "54">Let maxrow(.)</S>
			<S sid ="77" ssid = "55">be an operator that operates row-wise on a matrix and sets all entries of a row to zero except the largest entry, which is set to 1.</S>
			<S sid ="78" ssid = "56">Then the algorithm is denoted as simple as this: D0 = In for t=1 to iterations Dt1 = maxrow(Dt1) Dt = Dt1AG Figure 4: Matrix Chinese Whispers process.</S>
			<S sid ="79" ssid = "57">t is time step, In is the identity matrix of size n×n, AG is the adjacency matrix of graph G. By applying maxrow(.), Dt1 has exactly n nonzero entries.</S>
			<S sid ="80" ssid = "58">This causes the time-complexity to be dependent on the number of edges, namely O(k·|E|).</S>
			<S sid ="81" ssid = "59">In the worst case of a fully connected graph, this equals the time-complexity of MCL.</S>
			<S sid ="82" ssid = "60">A problem with the matrix CW process is that it does not necessarily converge to an iteration-invariant class matrix D, but rather to a pair of oscillating class matrices.</S>
			<S sid ="83" ssid = "61">Figure 5 shows an example.</S>
			<S sid ="84" ssid = "62">1 1 1 1 2 2 75 Figure 5: oscillating states in matrix CW for an unweighted graph This is caused by the stepwise update of the class matrix.</S>
			<S sid ="85" ssid = "63">As opposed to this, the CW algorithm as outlined in figure 1 continuously updates D after the processing of each node.</S>
			<S sid ="86" ssid = "64">To avoid these oscillations, one of the following measures can be taken: • Random mutation: with some probability, the maxrow-operator places the 1 for an otherwise unused class • Keep class: with some probability, the row is copied from Dt1 to Dt • Continuous update (equivalent to CW as described in section 2.1.) While converging to the same limits, the continuous update strategy converges the fastest because prominent classes are spread much faster in early iterations.</S>
	</SECTION>
	<SECTION title="Experiments with synthetic graphs. " number = "3">
			<S sid ="87" ssid = "1">The analysis of the CW process is difficult due to its nonlinear nature.</S>
			<S sid ="88" ssid = "2">Its run-time complexity indicates that it cannot directly optimize most global graph cluster measures because of their NP-completeness (Šíma and Schaeffer, 2005).</S>
			<S sid ="89" ssid = "3">Therefore we perform experiments on synthetic graphs to empirically arrive at an impression of our algorithm&apos;s abilities.</S>
			<S sid ="90" ssid = "4">All experiments were conducted with an implementation following figure 1.</S>
			<S sid ="91" ssid = "5">For experiments with synthetic graphs, we restrict ourselves to unweighted graphs, if not stated explicitly.</S>
			<S sid ="92" ssid = "6">3.1 Bipartite cliques A cluster algorithm should keep dense regions together while cutting apart regions that are sparsely connected.</S>
			<S sid ="93" ssid = "7">The highest density is reached in fully connected sub-graphs of n nodes, a.k.a. n-cliques.</S>
			<S sid ="94" ssid = "8">We define an n-bipartite-clique as a graph of two n-cliques, which are connected such that each node has exactly one edge going to the clique it, does not belong to..</S>
			<S sid ="95" ssid = "9">Figures 5 and 6 are n-partite cliques for n=4,10.</S>
			<S sid ="96" ssid = "10">Figure 6: The 10-bipartite clique.</S>
			<S sid ="97" ssid = "11">We clearly expect a clustering algorithm to cut the two cliques apart.</S>
			<S sid ="98" ssid = "12">As we operate on unweighted graphs, however, CW is left with two choices: producing two clusters or grouping all nodes into one cluster.</S>
			<S sid ="99" ssid = "13">This is largely dependent on the random choices in very early iterations - if the same class is assigned to several nodes in both cliques, it will finally cover the whole graph.</S>
			<S sid ="100" ssid = "14">Figure 7 illustrates on what rate this happens on n-bipartite-cliques for varying n. Figure 7: Percentage of obtaining two clusters when applying CW on n-bipartite cliques It is clearly a drawback that the outcome of CW is non-deterministic.</S>
			<S sid ="101" ssid = "15">Only half of the experiments with 4-bipartite cliques resulted in separation.</S>
			<S sid ="102" ssid = "16">However, the problem is most dramatic on small graphs and ceases to exist for larger graphs as demonstrated in figure 7.</S>
			<S sid ="103" ssid = "17">3.2 Small world graphs A structure that has been reported to occur in an enormous number of natural systems is the small world (SW) graph.</S>
			<S sid ="104" ssid = "18">Space prohibits an in-depth discussion, which can be found in (Watts 1999).</S>
			<S sid ="105" ssid = "19">Here, we restrict ourselves to SW-graphs in language data.</S>
			<S sid ="106" ssid = "20">In (Ferrer-i-Cancho and Sole, 2001), co-occurrence graphs as used in the experiment section are reported to possess the small world property, i.e. a high clustering coefficient and short average path length between.</S>
			<S sid ="107" ssid = "21">76 arbitrary nodes.</S>
			<S sid ="108" ssid = "22">Steyvers and Tenenbaum (2005) show that association networks as well as semantic resources are scale-free SW-graphs: their degree distribution follows a power law.</S>
			<S sid ="109" ssid = "23">A generative model is provided that generates undirected, scale-free SW-graphs in the following way: We start with a small number of fully connected nodes.</S>
			<S sid ="110" ssid = "24">When adding a new node, an existing node v is chosen with a probability according to its degree.</S>
			<S sid ="111" ssid = "25">The new node is connected to M nodes in the neighborhood of v. The generative model is parameterized by the number of nodes n and the network&apos;s mean connectivity, which approaches 2M for large n. Let us assume that we deal with natural systems that can be characterized by small world graphs.</S>
			<S sid ="112" ssid = "26">If two or more of those systems interfere, their graphs are joined by merging some nodes, retaining their edges.</S>
			<S sid ="113" ssid = "27">A graph-clustering algorithm should split up the resulting graph in its previous parts, at least if not too many nodes were merged.</S>
			<S sid ="114" ssid = "28">We conducted experiments to measure CW&apos;s performance on SW-graph mixtures: We generated graphs of various sizes, merged them by twos to a various extent and measured the amount of cases where clustering with CW leads to the reconstruction of the original parts.</S>
			<S sid ="115" ssid = "29">When generating SW-graphs with the SteyversTenenbaum model, we fixed M to 10 and varied n and the merge rate r, which is the fraction of nodes of the smaller graph that is merged with nodes of the larger graph.</S>
			<S sid ="116" ssid = "30">Figure 8: Rate of obtaining two clusters for mixtures of SW-graphs dependent on merge rate r. Figure 8 summarizes the results for equisized mixtures of 300, 3,000 and 30,000 nodes and mixtures of 300 with 30,000 nodes.</S>
			<S sid ="117" ssid = "31">It is not surprising that separating the two parts is more difficult for higher r. Results are not very sensitive to size and size ratio, indicating that CW is able to identify clusters even if they differ considerably in size – it even performs best at the skewed mixtures.</S>
			<S sid ="118" ssid = "32">At merge rates between 20% and 30%, still more then half of the mixtures are separated correctly and can be found when averaging CW’s outcome over several runs.</S>
			<S sid ="119" ssid = "33">3.3 Speed issues As formally, the algorithm does not converge, it is important to define a stop criterion or to set the number of iterations.</S>
			<S sid ="120" ssid = "34">To show that only a few iterations are needed until almost-convergence, we measured the normalized Mutual Information (MI)1 between the clustering in the 50th iteration and the clusterings of earlier iterations.</S>
			<S sid ="121" ssid = "35">This was conducted for two unweighted SW-graphs with 1,000 (1K) and 10,000 (10K) nodes, M=5 and a weighted 7-lingual co-occurrence graph (cf.</S>
			<S sid ="122" ssid = "36">section 4.1) with 22,805 nodes and 232,875 edges.</S>
			<S sid ="123" ssid = "37">Table 1 indicates that for unweighted graphs, changes are only small after 2030 iterations.</S>
			<S sid ="124" ssid = "38">In iterations 4050, the normalized MI-values do not improve any more.</S>
			<S sid ="125" ssid = "39">The weighted graph converges much faster due to fewer ties and reaches a stable plateau after only 6 iterations..</S>
			<S sid ="126" ssid = "40">Iter 1 2 3 5 10 20 30 40 49 1K 1 8 13 20 37 58 90 90 91 10K 6 27 46 64 79 90 93 95 96 7ling 29 66 90 97 99.5 99.5 99.5 99.5 99.5 Table 1: normalized Mutual Information values for three graphs and different iterations in %.</S>
	</SECTION>
	<SECTION title="NLP Experiments. " number = "4">
			<S sid ="127" ssid = "1">In this section, some experiments with graphs originating from natural language data are presented.</S>
			<S sid ="128" ssid = "2">First, we define the notion of co-occurrence graphs, which are used in sections 4.1 and 4.3: Two words co-occur if they can both be found in a certain unit of text, here a sentence.</S>
			<S sid ="129" ssid = "3">Employing a significance measure, we determine whether their co-occurrences are significant or random.</S>
			<S sid ="130" ssid = "4">In this case, we use the log-likelihood measure as described in (Dunning 1993).</S>
			<S sid ="131" ssid = "5">We use the words as nodes in the graph.</S>
			<S sid ="132" ssid = "6">The weight of an 1 defined for two random variables X and Y as (H(X)+H(Y) H(X,Y))/max(H(X),H(Y)) with H(X) entropy.</S>
			<S sid ="133" ssid = "7">A value of 0 denotes indepenence, 1 is perfect congruence.</S>
			<S sid ="134" ssid = "8">77 edge between two words is set to the significance value of their co-occurrence, if it exceeds a certain threshold.</S>
			<S sid ="135" ssid = "9">In the experiments, we used significances from 15 on.</S>
			<S sid ="136" ssid = "10">The entirety of words that are involved in at least one edge together with these edges is called co-occurrence graph (cf.</S>
			<S sid ="137" ssid = "11">Biemann et al. 2004).</S>
			<S sid ="138" ssid = "12">In general, CW produces a large number of clusters on real-world graphs, of which the majority is very small.</S>
			<S sid ="139" ssid = "13">For most applications, it might be advisable to define a minimum cluster size or something alike.</S>
			<S sid ="140" ssid = "14">4.1 Language Separation This section shortly reviews the results of (Biemann and Teresniak, 2005), where CW was first described.</S>
			<S sid ="141" ssid = "15">The task was to separate a multilingual corpus by languages, assuming its tokenization in sentences..</S>
			<S sid ="142" ssid = "16">The co-occurrence graph of a multilingual corpus resembles the synthetic SW-graphs: Every language forms a separate co-occurrence graph, some words that are used in more than one language are members of several graphs, connecting them.</S>
			<S sid ="143" ssid = "17">By CW-partitioning, the graph is split into its monolingual parts.</S>
			<S sid ="144" ssid = "18">These parts are used as word lists for word-based language identification.</S>
			<S sid ="145" ssid = "19">(Biemann and Teresniak, 2005) report almost perfect performance on getting 7-lingual corpora with equisized parts sorted apart as well as highly skewed mixtures of two languages.</S>
			<S sid ="146" ssid = "20">In the process, language-ambiguous words are assigned to only one language, which did not hurt performance due to the high redundancy of the task.</S>
			<S sid ="147" ssid = "21">However, it would have been possible to use the soft partitioning to acquire a distribution over languages for each word.</S>
			<S sid ="148" ssid = "22">4.2 Acquisition of Word Classes For the acquisition of word classes, we use a different graph: the second-order graph on neighboring co-occurrences.</S>
			<S sid ="149" ssid = "23">To set up the graph, a co-occurrence calculation is performed which yields significant word pairs based on their occurrence as immediate neighbors.</S>
			<S sid ="150" ssid = "24">This can be perceived as a bipartite graph, figure 9a gives a toy example.</S>
			<S sid ="151" ssid = "25">Note that if similar words occur in both parts, they form two distinct nodes..</S>
			<S sid ="152" ssid = "26">This graph is transformed into a second-order graph by comparing the number of common right and left neighbors for two words.</S>
			<S sid ="153" ssid = "27">The similarity (edge weight) between two words is the sum of common neighbors.</S>
			<S sid ="154" ssid = "28">Figure 9b depicts the second-order graph derived from figure 9a and its partitioning by CW.</S>
			<S sid ="155" ssid = "29">The word-class-ambiguous word “drink” (to drink the drink) is responsible for all intra-cluster edges.</S>
			<S sid ="156" ssid = "30">The hypothesis here is that words sharing many neighbors should usually be observed with the same part-of-speech and get high weights in the second order graph.</S>
			<S sid ="157" ssid = "31">In figure 9, three clusters are obtained that correspond to different parts-of-speech (POS).</S>
			<S sid ="158" ssid = "32">(a) (b) Figure 9: Bipartite neighboring co-occurrence graph (a) and second-order graph on neighboring co-occurrences (b) clustered with CW.</S>
			<S sid ="159" ssid = "33">To test this on a large scale, we computed the second-order similarity graph for the British National Corpus (BNC), excluding the most frequent 2000 words and drawing edges between words if they shared at least four left and right neighbors.</S>
			<S sid ="160" ssid = "34">The clusters are checked against a lexicon that contains the most frequent tag for each word in the BNC.</S>
			<S sid ="161" ssid = "35">The largest clusters are presented in table 2 . size tags:count sample words 18432 NN:17120 AJ: 631 secret, officials, transport, unemployment, farm, county, wood, procedure, grounds, ...</S>
			<S sid ="162" ssid = "36">4916 AJ: 4208 V: 343.</S>
			<S sid ="163" ssid = "37">busy, grey, tiny, thin, sufficient, attractive, vital, ...</S>
			<S sid ="164" ssid = "38">4192 V: 3784 AJ: 286 filled, revealed, experienced, learned, pushed, occurred, ...</S>
			<S sid ="165" ssid = "39">3515 NP: 3198 NN: 255.</S>
			<S sid ="166" ssid = "40">White, Green, Jones, Hill, Brown, Lee, Lewis, Young, ...</S>
			<S sid ="167" ssid = "41">2211 NP: 1980 NN: 174.</S>
			<S sid ="168" ssid = "42">Ian, Alan, Martin, Tony, Prince, Chris, Brian, Harry, Andrew, 1 1 1 1 2 2 4 2 2 1 1 1 1 1 1 left right 78 Christ, Steve, ...</S>
			<S sid ="169" ssid = "43">1855 NP: 1670 NN: 148 Central, Leeds, Manchester, Australia, Yorkshire, Belfast, Glasgow, Middlesbrough, ...</S>
			<S sid ="170" ssid = "44">Table 2: the largest clusters from partitioning the second order graph with CW.</S>
			<S sid ="171" ssid = "45">In total, CW produced 282 clusters, of which 26 exceed a size of 100.</S>
			<S sid ="172" ssid = "46">The weighted average of cluster purity (i.e. the number of predominant tags divided by cluster size) was measured at 88.8%, which exceeds significantly the precision of 53% on word type as reported by Schütze (1995) on a related task.</S>
			<S sid ="173" ssid = "47">How to use this kind of word clusters to improve the accuracy of POStaggers is outlined in (Ushioda, 1996).</S>
			<S sid ="174" ssid = "48">4.3 Word Sense Induction The task of word sense induction (WSI) is to find the different senses of a word.</S>
			<S sid ="175" ssid = "49">The number of senses is not known in advance, therefore has to be determined by the method.</S>
			<S sid ="176" ssid = "50">Similar to the approach as presented in (Dorow and Widdows, 2003) we construct a word graph.</S>
			<S sid ="177" ssid = "51">While there, edges between words are drawn iff words co-occur in enumerations, we use the co-occurrence graph.</S>
			<S sid ="178" ssid = "52">Dorow and Widdows construct a graph for a target word w by taking the sub-graph induced by the neighborhood of w (without w) and clustering it with MCL.</S>
			<S sid ="179" ssid = "53">We replace MCL by CW.</S>
			<S sid ="180" ssid = "54">The clusters are interpreted as representations of word senses.</S>
			<S sid ="181" ssid = "55">To judge results, the methodology of (Bordag, 2006) is adopted: To evaluate word sense induction, two sub-graphs induced by the neighborhood of different words are merged.</S>
			<S sid ="182" ssid = "56">The algorithm&apos;s ability to separate the merged graph into its previous parts can be measured in an unsupervised way.</S>
			<S sid ="183" ssid = "57">Bordag defines four measures: • retrieval precision (rP): similarity of the found sense with the gold standard sense • retrieval recall (rR): amount of words that have been correctly assigned to the gold standard sense • precision (P): fraction of correctly found disambiguations • recall (R): fraction of correctly found senses We used the same program to compute co-occurrences on the same corpus (the BNC).</S>
			<S sid ="184" ssid = "58">Therefore it is possible to directly compare our results to Bordag’s, who uses a triplet-based hierarchical graph clustering approach.</S>
			<S sid ="185" ssid = "59">The method was chosen because of its appropriateness for unlabelled data: without linguistic pre-processing like tagging or parsing, only the disambiguation mechanism is measured and not the quality of the preprocessing steps.</S>
			<S sid ="186" ssid = "60">We provide scores for his test 1 (word classes separately) and test 3 (words of different frequency bands).</S>
			<S sid ="187" ssid = "61">Data was obtained from BNC&apos;s raw text; evaluation was performed for 45 test words.</S>
			<S sid ="188" ssid = "62">% (Bordag, 2006) Chinese Whispers POS P R rP rR P R rP rR N 87.0 86.7 90.9 64.2 90.0 79.5 94.8 71.3 V 78.3 64.3 80.2 55.2 77.6 67.1 87.3 57.9 A 88.6 71.0 88.0 65.4 92.2 61.9 89.3 71.9 Table 3: Disambiguation results in % dependent on word class (nouns, verbs, adjectives) % (Bordag, 2006) Chinese Whispers freq P R rP rR P R rP rR high 93.7 78.1 90.3 80.7 93.7 72.9 95.0 73.8 med 84.6 85.2 89.9 54.6 80.7 83.8 91.0 55.7 low 74.8 49.5 71.0 41.7 74.1 51.4 72.9 56.2 Table 4: Disambiguation results in % dependent on frequency Results (tables 3 and 4) suggest that both algorithms arrive at about equal overall performance (P and R).</S>
			<S sid ="189" ssid = "63">Chinese Whispers clustering is able to capture the same information as a specialized graph-clustering algorithm for WSI, given the same input.</S>
			<S sid ="190" ssid = "64">The slightly superior performance on rR and rP indicates that CW leaves fewer words unclustered, which can be advantageous when using the clusters as clues in word sense disambiguation.</S>
	</SECTION>
	<SECTION title="Conclusion. " number = "5">
			<S sid ="191" ssid = "1">Chinese Whispers, an efficient graph-clustering algorithm was presented and described in theory and practice.</S>
			<S sid ="192" ssid = "2">Experiments with synthetic graphs showed that for small graphs, results can be inconclusive due to its non-deterministic nature.</S>
			<S sid ="193" ssid = "3">But while there exist plethora of clustering approaches that can deal well with small graphs, the power of CW lies in its capability of handling very large graphs in reasonable time.</S>
			<S sid ="194" ssid = "4">The 79 application field of CW rather lies in size regions, where other approaches’ solutions are intractable.</S>
			<S sid ="195" ssid = "5">On the NLP data discussed, CW performs equally or better than other clustering algorithms.</S>
			<S sid ="196" ssid = "6">As CW – like other graph clustering algorithms – chooses the number of classes on its own and can handle clusters of different sizes, it is especially suited for NLP problems, where class distributions are often highly skewed and the number of classes (e.g. in WSI) is not known beforehand.</S>
			<S sid ="197" ssid = "7">To relate the partitions, it is possible to set up a hierarchical version of CW in the following way: The nodes of equal class are joined to hyper-nodes.</S>
			<S sid ="198" ssid = "8">Edge weights between hyper-nodes are set according to the number of inter-class edges between the corresponding nodes.</S>
			<S sid ="199" ssid = "9">This results in flat hierarchies.</S>
			<S sid ="200" ssid = "10">In further works it is planned to apply CW to other graphs, such as the co-citation graph of Citeseer, the co-citation graph of web pages and the link structure of Wikipedia.</S>
	</SECTION>
	<SECTION title="Acknowledgements"></SECTION>
</PAPER>
