<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper reports on the LEARNING COMPUTATIONAL GRAMMARS (LCG) project, a postdoc network devoted to studying the application of machine learning techniques to grammars suit­able for computational use.</S>
		<S sid ="2" ssid = "2">We were in­terested in a more systematic survey to understand the relevance of many fac­tors to the success of learning, esp. the availability of annotated data, the kind of dependencies in the data, and the availability of knowledge bases (gram­mars).</S>
		<S sid ="3" ssid = "3">We focused on syntax, esp. noun phrase (NP) syntax.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="4" ssid = "4">This paper reports on the still preliminary, but al­ready satisfying results of the LEARNING COM­PUTATIONAL GRAMMARS (LCG) project, a postdoc network devoted to studying the application of machine learning techniques to grammars suit­able for computational use.</S>
			<S sid ="5" ssid = "5">The member insti­tutes are listed with the authors and also included ISSCO at the University of Geneva.</S>
			<S sid ="6" ssid = "6">We were im­pressed by early experiments applying learning to natural language, but dissatis.ed with the con­centration on a few techniques from the very rich area of machine learning.</S>
			<S sid ="7" ssid = "7">We were interested in University of Groningen, {nerbonne,konstant}@let.</S>
			<S sid ="8" ssid = "8">rug.nl, osborne@cogsci.ed.ac.uk u SRI Cambridge, anja.belz@cam.sri.com, Rob.Koe­ling@netdecisions.co.uk ttXRCE Grenoble, nicola.cancedda@xrce.xerox.com University of T¨ubingen, Herve.Dejean@xrce.xerox.</S>
			<S sid ="9" ssid = "9">com, thollard@sfs.nphil.unituebingen.de o .University College Dublin, james.hammerton@ucd.ie University of Antwerp, erikt@uia.ua.ac.be a more systematic survey to understand the rele­vance of many factors to the success of learning, esp. the availability of annotated data, the kind of dependencies in the data, and the availability of knowledge bases (grammars).</S>
			<S sid ="10" ssid = "10">We focused on syntax, esp. noun phrase (NP) syntax from the beginning.</S>
			<S sid ="11" ssid = "11">The industrial partner, Xerox, focused on more immediate applications (Cancedda and Samuelsson, 2000).</S>
			<S sid ="12" ssid = "12">The network was focused not only by its sci­enti.c goal, the application and evaluation of machine-learning techniques as used to learn nat­ural language syntax, and by the subarea of syn­tax chosen, NP syntax, but also by the use of shared training and test material, in this case ma­terial drawn from the Penn Treebank.</S>
			<S sid ="13" ssid = "13">Finally, we were curious about the possibility of combining different techniques, including those from statisti­cal and symbolic machine learning.</S>
			<S sid ="14" ssid = "14">The network members played an important role in the organi­sation of three open workshops in which several external groups participated, sharing data and test materials.</S>
	</SECTION>
	<SECTION title="Method. " number = "2">
			<S sid ="15" ssid = "1">This section starts with a description of the three tasks that we have worked on in the framework of this project.</S>
			<S sid ="16" ssid = "2">After this we will describe the ma­chine learning algorithms applied to this data and conclude with some notes about combining dif­ferent system results.</S>
			<S sid ="17" ssid = "3">2.1 Task descriptions.</S>
			<S sid ="18" ssid = "4">In the framework of this project, we have worked on the following three tasks: 1.</S>
			<S sid ="19" ssid = "5">base phrase (chunk) identi.cation 2.</S>
			<S sid ="20" ssid = "6">base noun phrase recognition 3.</S>
			<S sid ="21" ssid = "7">.nding arbitrary noun phrases Text chunks are non-overlapping phrases which contain syntactically related words.</S>
			<S sid ="22" ssid = "8">For example, the sentence: adwPak PadwP He ]reckons ]the current akoP account de.cit ]will narrow ] aPcPadwP to ]only £1.8 billion ] aPcPadwP in ]September ].</S>
			<S sid ="23" ssid = "9">contains eight chunks, four NP chunks, two VP chunks and two PP chunks.</S>
			<S sid ="24" ssid = "10">The latter only con­tain prepositions rather than prepositions plus the noun phrase material because that has already been included in NP chunks.</S>
			<S sid ="25" ssid = "11">The process of .nding these phrases is called CHUNKING.</S>
			<S sid ="26" ssid = "12">The project provided a data set for this task at the CoNLL2000 workshop (Tjong Kim Sang and Buchholz, 2000)1.</S>
			<S sid ="27" ssid = "13">It consists of sections 1518 of the Wall Street Journal part of the Penn Treebank II (Marcus et al., 1993) as training data (211727 tokens) and section 20 as test data (47377 tokens).</S>
			<S sid ="28" ssid = "14">A specialised version of the chunking task is NP CHUNKING or baseNP identi.cation in which the goal is to identify the base noun phrases.</S>
			<S sid ="29" ssid = "15">The .rst work on this topic was done back in the eighties (Church, 1988).</S>
			<S sid ="30" ssid = "16">The data set that has become standard for evaluation machine learn­ing approaches is the one .rst used by Ramshaw and Marcus (1995).</S>
			<S sid ="31" ssid = "17">It consists of the same train­ing and test data segments of the Penn Treebank as the chunking task (respectively sections 1518 and section 20).</S>
			<S sid ="32" ssid = "18">However, since the data sets have been generated with different software, the NP boundaries in the NP chunking data sets are slightly different from the NP boundaries in the general chunking data.</S>
			<S sid ="33" ssid = "19">Noun phrases are not restricted to the base lev­els of parse trees.</S>
			<S sid ="34" ssid = "20">For example, in the sentence In early trading in Hong Kong Monday , gold was quoted at $ 366.50 an ounce ., the noun phrase adnP $ 366.50 an ounce ]contains two embedded adnPadwP noun phrases $ 366.50 ]and an ounce ].</S>
			<S sid ="35" ssid = "21">In the NP BRACKETING task, the goal is to .nd all noun phrases in a sentence.</S>
			<S sid ="36" ssid = "22">Data sets for this task were de.ned for CoNLL992.</S>
			<S sid ="37" ssid = "23">The data con­sist of the same segments of the Penn Treebank as 1Detailed information about chunking, the CoNLL­2000 shared task, is also available at http://lcg­www.uia.ac.be/conll2000/chunking/ 2Information about NP bracketing can be found at http://lcgwww.uia.ac.be/conll99/npb/ the previous two tasks (sections 1518) as train­ing material and section 20 as test material.</S>
			<S sid ="38" ssid = "24">This material was extracted directly from the Treebank and therefore the NP boundaries at base levels are different from those in the previous two tasks.</S>
			<S sid ="39" ssid = "25">In the evaluation of all three tasks, the accu­racy of the learners is measured with three rates.</S>
			<S sid ="40" ssid = "26">We compare the constituents postulated by the learners with those marked as correct by experts (gold standard).</S>
			<S sid ="41" ssid = "27">First, the percentage of detected constituents that are correct (precision).</S>
			<S sid ="42" ssid = "28">Second, the percentage of correct constituents that are de­tected (recall).</S>
			<S sid ="43" ssid = "29">And third, a combination of pre­cision and recall, the F/1 = rate which is equal to (2*precision*recall)/(precision+recall).</S>
			<S sid ="44" ssid = "30">2.2 Machine Learning Techniques.</S>
			<S sid ="45" ssid = "31">This section introduces the ten learning meth­ods that have been applied by the project members to the three tasks: LSCGs, ALLiS, LSOMMBL, Maximum Entropy, Aleph, MDL-based DCG learners, Finite State Transducers, IB1IG, IGTREE and C5.0.</S>
			<S sid ="46" ssid = "32">Local Structural Context Grammars (LSCGs) (Belz, 2001) are situated between conventional probabilistic context-free produc­tion rule grammars and DOP-Grammars (e.g., Bod and Scha (1997)).</S>
			<S sid ="47" ssid = "33">LSCGs outperform the former because they do not share their inher­ent independence assumptions, and are more computationally ef.cient than the latter, because they incorporate only subsets of the context included in DOP-Grammars.</S>
			<S sid ="48" ssid = "34">Local Structural Context (LSC) is (partial) information about the immediate neighbourhood of a phrase in a parse.</S>
			<S sid ="49" ssid = "35">By conditioning bracketing probabilities on LSC, more .negrained probability distributions can be achieved, and parsing performance increased.</S>
			<S sid ="50" ssid = "36">Given corpora of parsed text such as the WSJ, LSCGs are used in automatic grammar construc­tion as follows.</S>
			<S sid ="51" ssid = "37">An LSCG is derived from the cor­pus by extracting production rules from bracket­ings and annotating the rules with the type(s) of LSC to be incorporated in the LSCG (e.g. parent category information, depth of embedding, etc.).</S>
			<S sid ="52" ssid = "38">Rule probabilities are derived from rule frequen­cies (currently by Maximum Likelihood Estima­tion).</S>
			<S sid ="53" ssid = "39">In a separate optimisation step, the resulting LSCGs are optimised in terms of size and pars­ing performance for a given parsing task by an automatic method (currently a version of beam search) that searches the space of partitions of a grammar’s set of nonterminals.</S>
			<S sid ="54" ssid = "40">The LSCG research efforts differ from other approaches reported in this paper in two respects.</S>
			<S sid ="55" ssid = "41">Firstly, no lexical information is used at any point, as the aim is to investigate the upper limit of pars­ing performance without lexicalisation.</S>
			<S sid ="56" ssid = "42">Secondly, grammars are optimised for parsing performance and size, the aim being to improve performance but not at the price of arbitrary increases in gram­mar complexity (hence the cost of parsing).</S>
			<S sid ="57" ssid = "43">The automatic optimisation of corpus-derived LSCGs is the subject of ongoing research and the results reported here for this method are therefore pre­liminary.</S>
			<S sid ="58" ssid = "44">Theory Re.nement (ALLiS).</S>
			<S sid ="59" ssid = "45">ALLiS ((D´ejean, 2000b), (D´ejean, 2000c)) is a in­ductive rule-based system using a traditional general-to-speci.c approach (Mitchell, 1997).</S>
			<S sid ="60" ssid = "46">After generating a default classi.cation rule (equivalent to the n-gram model), ALLiS tries to re.ne it since the accuracy of these rules is usually not high enough.</S>
			<S sid ="61" ssid = "47">Re.nement is done by adding more premises (contextual elements).</S>
			<S sid ="62" ssid = "48">ALLiS uses data encoded in XML, and also learns rules in XML.</S>
			<S sid ="63" ssid = "49">From the perspective of the XML formalism, the initial rule can be viewed as a tree with only one leaf, and re.nement is done by adding adjacent leaves until the accuracy of the rule is high enough (a tuning threshold is used).</S>
			<S sid ="64" ssid = "50">These additional leaves correspond to more precise contextual elements.</S>
			<S sid ="65" ssid = "51">Using the hierarchical structure of an XML document, re.nement begins with the highest available hierarchical level and goes down in the hierarchy (for example, starting at the chunk level and then word level).</S>
			<S sid ="66" ssid = "52">Adding new low level elements makes the rules more speci.c, increasing their accuracy but decreasing their coverage.</S>
			<S sid ="67" ssid = "53">After the learning is completed, the set of rules is transformed into a proper formalism used by a given parser.</S>
			<S sid ="68" ssid = "54">Labelled SOM and Memory Based Learn­ing (LSOMMBL) is a neurally inspired technique which incorporates a modi.ed self-organising map (SOM, also known as a ‘Kohonen Map’) in memory-based learning to select a subset of the training data for comparison with novel items.</S>
			<S sid ="69" ssid = "55">The SOM is trained with labelled inputs.</S>
			<S sid ="70" ssid = "56">Dur­ing training, each unit in the map acquires a la­bel.</S>
			<S sid ="71" ssid = "57">When an input is presented, the node in the map with the highest activation (the ‘winner’) is identi.ed.</S>
			<S sid ="72" ssid = "58">If the winner is unlabelled, then it ac­quires the label from its input.</S>
			<S sid ="73" ssid = "59">Labelled units only respond to similarly labelled inputs.</S>
			<S sid ="74" ssid = "60">Other­wise training proceeds as with the normal SOM.</S>
			<S sid ="75" ssid = "61">When training ends, all inputs are presented to the SOM, and the winning units for the inputs are noted.</S>
			<S sid ="76" ssid = "62">Any unused units are then discarded.</S>
			<S sid ="77" ssid = "63">Thus each remaining unit in the SOM is associ­ated with the set of training inputs that are closest to it.</S>
			<S sid ="78" ssid = "64">This is used in MBL as follows.</S>
			<S sid ="79" ssid = "65">The labelled SOM is trained with inputs labelled with the out­put categories.</S>
			<S sid ="80" ssid = "66">When a novel item is presented, the winning unit for each category is found, the training items associated with the winning units are searched for the closest item to the novel item and the most frequent classi.cation of that item is used as the classi.cation for the novel item.</S>
			<S sid ="81" ssid = "67">Maximum Entropy When building a classi­.er, one must gather evidence for predicting the correct class of an item from its context.</S>
			<S sid ="82" ssid = "68">The Maximum Entropy (MaxEnt) framework is espe­cially suited for integrating evidence from var­ious information sources.</S>
			<S sid ="83" ssid = "69">Frequencies of evi­dence/class combinations (called features) are ex­tracted from a sample corpus and considered to be properties of the classi.cation process.</S>
			<S sid ="84" ssid = "70">Attention is constrained to models with these properties.</S>
			<S sid ="85" ssid = "71">The MaxEnt principle now demands that among all the probability distributions that obey these constraints, the most uniform is chosen.</S>
			<S sid ="86" ssid = "72">During training, features are assigned weights in such a way that, given the MaxEnt principle, the train­ing data is matched as well as possible.</S>
			<S sid ="87" ssid = "73">During evaluation it is tested which features are active (i.e., a feature is active when the context meets the requirements given by the feature).</S>
			<S sid ="88" ssid = "74">For every class the weights of the active features are com­bined and the best scoring class is chosen (Berger et al., 1996).</S>
			<S sid ="89" ssid = "75">For the classi.er built here we use as evidence the surrounding words, their POS tags and baseNP tags predicted for the previous words.</S>
			<S sid ="90" ssid = "76">A mixture of simple features (consisting of one of the mentioned information sources) and com­plex features (combinations thereof) were used.</S>
			<S sid ="91" ssid = "77">The left context never exceeded 3 words, the right context was maximally 2 words.</S>
			<S sid ="92" ssid = "78">The model was calculated using existing software (Dehaspe, 1997).</S>
			<S sid ="93" ssid = "79">Inductive Logic Programming (ILP) Aleph is an ILP machine learning system that searches for a hypothesis, given positive (and, if avail­able, negative) data in the form of ground Prolog terms and background knowledge (prior knowl­edge made available to the learning algorithm) in the form of Prolog predicates.</S>
			<S sid ="94" ssid = "80">The system, then, constructs a set of hypothesis clauses that .t the data and background as well as possible.</S>
			<S sid ="95" ssid = "81">In order to approach the problem of NP chunk­ing in this context of single-predicate learning, it was reformulated as a tagging task where each word was tagged as being ‘inside’ or ‘outside’ a baseNP (consecutive NPs were treated appropri­ately).</S>
			<S sid ="96" ssid = "82">Then, the target theory is a Prolog program that correctly predicts a word’s tag given its con­text.</S>
			<S sid ="97" ssid = "83">The context consisted of PoS tagged words and syntactically tagged words to the left and PoS tagged words to the right, so that the resulting tag­ger can be applied in the left-to-right pass over PoS-tagged text.</S>
			<S sid ="98" ssid = "84">Minimum Description Length (MDL) Esti­mation using the minimum description length principle involves .nding a model which not only ‘explains’ the training material well, but also is compact.</S>
			<S sid ="99" ssid = "85">The basic idea is to balance the gener­ality of a model (roughly speaking, the more com­pact the model, the more general it is) with its spe­cialisation to the training material.</S>
			<S sid ="100" ssid = "86">We have ap­plied MDL to the task of learning broad-covering de.nite-clause grammars from either raw text, or else from parsed corpora (Osborne, 1999a).</S>
			<S sid ="101" ssid = "87">Pre­liminary results have shown that learning using just raw text is worse than learning with parsed corpora, and that learning using both parsed cor­pora and a compression-based prior is better than when learning using parsed corpora and a uniform prior.</S>
			<S sid ="102" ssid = "88">Furthermore, we have noted that our in­stantiation of MDL does not capture dependen­cies which exist either in the grammar or else in preferred parses.</S>
			<S sid ="103" ssid = "89">Ongoing work has focused on applying random .eld technology (maximum en­tropy) to MDL-based grammar learning (see Os­borne (2000a) for some of the issues involved).</S>
			<S sid ="104" ssid = "90">Finite State Transducers are built by inter­ preting probabilistic automata as transducers.</S>
			<S sid ="105" ssid = "91">We use a probabilistic grammatical algorithm, the DDSM algorithm (Thollard, 2001), for learning automata that provide the probability of an item given the previous ones.</S>
			<S sid ="106" ssid = "92">The items are described by bigrams of the format feature:class.</S>
			<S sid ="107" ssid = "93">In the re­sulting automata we consider a transition labeled feature:class as the transducer transition that takes as input the .rst part (feature) of the bigram and outputs the second part (class).</S>
			<S sid ="108" ssid = "94">By applying the Viterbi algorithm on such a model, we can .nd out the most probable set of class values given an input set of feature values.</S>
			<S sid ="109" ssid = "95">As the DDSM algo­rithm has a tuning parameter, it can provide many different automata.</S>
			<S sid ="110" ssid = "96">We apply a majority vote over the propositions made by the so computed au­tomata/transducers for obtaining the results men­tioned in this paper.</S>
			<S sid ="111" ssid = "97">Memory-based learning methods store all training data and classify test data items by giving them the classi.cation of the training data items which are most similar.</S>
			<S sid ="112" ssid = "98">We have used three differ­ent algorithms: the nearest neighbour algorithm IB1IG, which is part of the Timbl software pack­age (Daelemans et al., 1999), the decision tree learner IGTREE, also from Timbl, and C5.0, a commercial version of the decision tree learner C4.5 (Quinlan, 1993).</S>
			<S sid ="113" ssid = "99">They are classi.ers which means that they assign phrase classes such as I (inside a phrase), B (at the beginning of a phrase) and O (outside a phrase) to words.</S>
			<S sid ="114" ssid = "100">In order to improve the classi.cation process we provide the systems with extra information about the words such as the previous n words, the next n words, their part-of-speech tags and chunk tags estimated by an earlier classi.cation process.</S>
			<S sid ="115" ssid = "101">We use the de­fault settings of the software except for the num­ber of examined nearest neighbourhood regions for IB1IG (k, default is 1) which we set to 3.</S>
			<S sid ="116" ssid = "102">2.3 Combination techniques.</S>
			<S sid ="117" ssid = "103">When different systems are applied to the same problem, a clever combination of their results will outperform all of the individual results (Diette­rich, 1997).</S>
			<S sid ="118" ssid = "104">The reason for this is that the systems often make different errors and some of these er­rors can be eliminated by examining the classi.­cations of the others.</S>
			<S sid ="119" ssid = "105">The most simple combina­tion method is MAJORITY VOTING.</S>
			<S sid ="120" ssid = "106">It examines the classi.cations of the test data item and for each item chooses the most frequently predicted classi.cation.</S>
			<S sid ="121" ssid = "107">Despite its simplicity, majority vot­ing has found to be quite useful for boosting per­formance on the tasks that we are interested in.</S>
			<S sid ="122" ssid = "108">We have applied majority voting and nine other combination methods to the output of the learning systems that were applied to the three tasks.</S>
			<S sid ="123" ssid = "109">Nine combination methods were originally suggested by Van Halteren et al.</S>
			<S sid ="124" ssid = "110">(1998).</S>
			<S sid ="125" ssid = "111">Five of them, including majority voting, are so-called voting methods.</S>
			<S sid ="126" ssid = "112">Apart from majority voting, all assign weights to the predictions of the different systems based on their performance on non-used train­ing data, the tuning data.</S>
			<S sid ="127" ssid = "113">TOTPRECISION uses classi.er weights based on their accuracy.</S>
			<S sid ="128" ssid = "114">TAG­PRECISION applies classi.cation weights based on the accuracy of the classi.er for that classi­.cation.</S>
			<S sid ="129" ssid = "115">PRECISION-RECALL uses classi.cation weights that combine the precision of the classi­.cation with the recall of the competitors.</S>
			<S sid ="130" ssid = "116">And .nally, TAGPAIR uses classi.cation pair weights based on the probability of a classi.cation for some predicted classi.cation pair (van Halteren et al., 1998).</S>
			<S sid ="131" ssid = "117">The remaining four combination methods are so-called STACKED CLASSIFIERS.</S>
			<S sid ="132" ssid = "118">The idea is to make a classi.er process the output of the indi­vidual systems.</S>
			<S sid ="133" ssid = "119">We used the two memory-based learners IB1IG and IGTREE as stacked classi.ers.</S>
			<S sid ="134" ssid = "120">Like Van Halteren et al.</S>
			<S sid ="135" ssid = "121">(1998), we evaluated two features combinations.</S>
			<S sid ="136" ssid = "122">The .rst consisted of the predictions of the individual systems and the sec­ond of the predictions plus one feature that de­scribed the data item.</S>
			<S sid ="137" ssid = "123">We used the feature that, according to the memory-based learning metrics, was most relevant to the tasks: the part-of-speech tag of the data item.</S>
			<S sid ="138" ssid = "124">In the course of this project we have evalu­ated another combination method: BEST-N MA­JORITY VOTING (Tjong Kim Sang et al., 2000).</S>
			<S sid ="139" ssid = "125">This is similar to majority voting except that in­stead of using the predictions of all systems, it uses only predictions from some of the systems for determining the most probable classi.cations.</S>
			<S sid ="140" ssid = "126">We have experienced that for different reasons some systems perform worse than others and in­cluding their results in the majority vote decreases the combined performance.</S>
			<S sid ="141" ssid = "127">Therefore it is a good idea to evaluate majority voting on subsets of all systems rather than only on the combination of all systems.</S>
			<S sid ="142" ssid = "128">Apart from standard majority voting, all com­bination methods require extra data for measur­ing their performance which is required for de­termining their weights, the tuning data.</S>
			<S sid ="143" ssid = "129">This data can be extracted from the training data or the training data can be processed in an n-fold cross-validation process after which the performance on the complete training data can be measured.</S>
			<S sid ="144" ssid = "130">Al­though some work with individual systems in the project has been done with the goal of combining the results with other systems, tuning data is not always available for all results.</S>
			<S sid ="145" ssid = "131">Therefore it will not always be possible to apply all ten combina­tion methods to the results.</S>
			<S sid ="146" ssid = "132">In some cases we have to restrict ourselves to evaluating majority voting only.</S>
	</SECTION>
	<SECTION title="Results. " number = "3">
			<S sid ="147" ssid = "1">This sections presents the results of the different systems applied to the three tasks which were cen­tral to this this project: chunking, NP chunking and NP bracketing.</S>
			<S sid ="148" ssid = "2">3.1 Chunking.</S>
			<S sid ="149" ssid = "3">Chunking was the shared task of CoNLL2000, the workshop on Computational Natural Lan­guage Learning, held in Lisbon, Portugal in 2000 (Tjong Kim Sang and Buchholz, 2000).</S>
			<S sid ="150" ssid = "4">Six members of the project have performed this task.</S>
			<S sid ="151" ssid = "5">The results of the six systems (precision, recall and F/1 =can be found in table 1.</S>
			<S sid ="152" ssid = "6">Belz (2001) used Local Structural Context Grammars for .nd­ing chunks.</S>
			<S sid ="153" ssid = "7">D´ejean (2000a) applied the the­ory re.nement system ALLiS to the shared task data.</S>
			<S sid ="154" ssid = "8">Koeling (2000) evaluated a maximum en­tropy learner while using different feature com­binations (ME).</S>
			<S sid ="155" ssid = "9">Osborne (2000b) used a maxi­mum entropy-based part-of-speech tagger for as­signing chunk tags to words (ME Tag).</S>
			<S sid ="156" ssid = "10">Thollard (2001) identi.ed chunks with Finite State Trans­ducers generated by a probabilistic grammar algo­rithm (FST).</S>
			<S sid ="157" ssid = "11">Tjong Kim Sang (2000b) tested dif­ferent con.gurations of combined memory-based learners (MBL).</S>
			<S sid ="158" ssid = "12">The FST and the LSCG results are lower than those of the other systems because they were obtained without using lexical informa­Table 1: The chunking results for the six systems associated with the project (shared task CoNLL­2000).</S>
			<S sid ="159" ssid = "13">The baseline results have been obtained by selecting the most frequent chunk tag associ­ated with each part-of-speech tag.</S>
			<S sid ="160" ssid = "14">The best results at CoNLL2000 were obtained by Support Vector Machines.</S>
			<S sid ="161" ssid = "15">A majority vote of the six LCG sys­tems does not perform much worse than this best result.</S>
			<S sid ="162" ssid = "16">A majority vote of the .ve best systems outperforms the best result slightly (5 %error re­duction).</S>
			<S sid ="163" ssid = "17">precision recall F/1 = MBL ALLiS ME ME Tag LSCG FST 94.04% 91.87% 92.08% 91.65% 87.97% 84.92% 91.00% 92.31% 91.86% 92.23% 88.17% 86.75% 92.50 92.09 91.97 91.94 88.07 85.82 combination 93.68% 92.98% 93.33 best baseline 93.45% 72.58% 93.51% 82.14% 93.48 77.07 precision recall F/, = MBL ME ALLiS IGTree C5.0 SOM 93.63% 93.20% 92.49% 92.28% 89.59% 89.29% 92.88% 93.00% 92.69% 91.65% 90.66% 89.73% 93.25 93.10 92.59 91.96 90.12 89.51 combination 93.78% 93.52% 93.65 best baseline 94.18% 78.20% 93.55% 81.87% 93.86 79.99 tion.</S>
			<S sid ="164" ssid = "18">The best result at the workshop was obtained with Support Vector Machines (Kudoh and Mat­sumoto, 2000).</S>
			<S sid ="165" ssid = "19">Because there was no tuning data available for the systems, the only combination technique we could apply to the six project results was majority voting.</S>
			<S sid ="166" ssid = "20">We applied majority voting to the output of the six systems while using the same approach as Tjong Kim Sang (2000b): combining start and end positions of chunks separately and restoring the chunks from these results.</S>
			<S sid ="167" ssid = "21">The combined per­formance (F/1 ==93.33) was close to the best re­sult published at CoNLL2000 (93.48).</S>
			<S sid ="168" ssid = "22">3.2 NP chunking.</S>
			<S sid ="169" ssid = "23">The NP chunking task is the specialisation of the chunking task in which only base noun phrases need to be detected.</S>
			<S sid ="170" ssid = "24">Standard data sets for ma­chine learning approaches to this task were put forward by Ramshaw and Marcus (1995).</S>
			<S sid ="171" ssid = "25">Six project members have applied a total of seven different systems to this task, most of them in the context of the combination paper Tjong Kim Sang et al.</S>
			<S sid ="172" ssid = "26">(2000).</S>
			<S sid ="173" ssid = "27">Daelemans applied the de­cision tree learner C5.0 to the task.</S>
			<S sid ="174" ssid = "28">D´ejean used the theory re.nement system ALLiS for .nding Table 2: The NP chunking results for six sys­tems associated with the project.</S>
			<S sid ="175" ssid = "29">The baseline results have been obtained by selecting the most frequent chunk tag associated with each part-of­speech tag.</S>
			<S sid ="176" ssid = "30">The best results for this task have been obtained with a combination of seven learn­ers, .ve of which were operated by project mem­bers.</S>
			<S sid ="177" ssid = "31">The combination of these .ve performances is not far off these best results.</S>
			<S sid ="178" ssid = "32">noun phrases in the data.</S>
			<S sid ="179" ssid = "33">Hammerton (2001) pre­dicted NP chunks with the connectionist methods based on self-organising maps (SOM).</S>
			<S sid ="180" ssid = "34">Koeling detected noun phrases with a maximum entropy-based learner (ME).</S>
			<S sid ="181" ssid = "35">Konstantopoulos (2000) used Inductive Logic Programming (ILP) techniques for .nding NP chunks in unseen texts3.</S>
			<S sid ="182" ssid = "36">Tjong Kim Sang applied combinations of IB1IG systems (MBL) and combinations of IGTREE learners to this task.</S>
			<S sid ="183" ssid = "37">The results of the six of the seven sys­tems can be found in table 2.</S>
			<S sid ="184" ssid = "38">The results of C5.0 and SOM are lower than the others because nei­ther of these systems used lexical information.</S>
			<S sid ="185" ssid = "39">For all of the systems except SOM we had tun­ing data and an extra development data set avail­able.</S>
			<S sid ="186" ssid = "40">We tested all ten combination methods on the development set and best-3 majority voting came out as the best (F/, == 93.30; it used the MBL, ME and ALLiS results).</S>
			<S sid ="187" ssid = "41">When we applied best-3 majority voting to the standard test set, we obtained F/1 == 93.65 which is close to the best result we know for this data set (F/, == 93.86) (Tjong Kim Sang et al., 2000).</S>
			<S sid ="188" ssid = "42">The latter result was obtained by a combination of seven learning systems, .ve of which were operated by members of this project.</S>
			<S sid ="189" ssid = "43">3Results are unavailable for the ILP approach.</S>
			<S sid ="190" ssid = "44">precision recall F/, = MBL 90.00% 78.38% 83.79 LSCG 80.04% 80.25% 80.15 MDL 53.2% 68.7% 59.9 best 91.28% 76.06% 82.98 baseline 77.57% 59.85% 67.56 Table 3: The results for three systems associ­ated with the project for the NP bracketing task, the shared task at CoNLL99.</S>
			<S sid ="191" ssid = "45">The baseline re­sults have been obtained by .nding NP chunks in the text with an algorithm which selects the most frequent chunk tag associated with each part-of­speech tag.</S>
			<S sid ="192" ssid = "46">The best results at CoNLL99 was obtained with a bottom-up memory-based learner.</S>
			<S sid ="193" ssid = "47">An improved version of that system (MBL) deliv­ered the best project result.</S>
			<S sid ="194" ssid = "48">The MDL results have been obtained on a different data set and therefore combination of the three systems was not feasible.</S>
			<S sid ="195" ssid = "49">The original Ramshaw and Marcus (1995) pub­lication evaluated their NP chunker on two data sets, the second holding a larger amount of train­ing data (Penn Treebank sections 0221) while us­ing 00 as test data.</S>
			<S sid ="196" ssid = "50">Tjong Kim Sang (2000a) has applied a combination of memory-based learners to this data set and obtained F/, == 94.90, an im­provement on Ramshaw and Marcus’s 93.3.</S>
			<S sid ="197" ssid = "51">3.3 NP bracketing.</S>
			<S sid ="198" ssid = "52">Finding arbitrary noun phrases was the shared task of CoNLL99, held in Bergen, Norway in 1999.</S>
			<S sid ="199" ssid = "53">Three project members have performed this task.</S>
			<S sid ="200" ssid = "54">Belz (2001) extracted noun phrases with Local Structural Context Grammars, a variant of Data-Oriented Parsing (LSCG).</S>
			<S sid ="201" ssid = "55">Osborne (1999b) used a De.nite Clause Grammar learner based on Minimum Description Length for .nding noun phrases in samples of Penn Treebank material (MDL).</S>
			<S sid ="202" ssid = "56">Tjong Kim Sang (2000a) detected noun phrases with a bottom-up cascade of combina­tions of memory-based classi.ers (MBL).</S>
			<S sid ="203" ssid = "57">The performance of the three systems can be found in table 3.</S>
			<S sid ="204" ssid = "58">For this task it was not possible to apply system combination to the output of the system.</S>
			<S sid ="205" ssid = "59">The MDL results have been obtained on a differ­ent data set and this left us with two remaining systems.</S>
			<S sid ="206" ssid = "60">A majority vote of the two will not im­prove on the best system and since there was no tuning data or development data available, other combination methods could not be applied.</S>
	</SECTION>
	<SECTION title="Prospects. " number = "4">
			<S sid ="207" ssid = "1">The project has proven to be successful in its re­sults for applying machine learning techniques to all three of its selected tasks: chunking, NP chunking and NP bracketing.</S>
			<S sid ="208" ssid = "2">We are looking for­ward to applying these techniques to other NLP tasks.</S>
			<S sid ="209" ssid = "3">Three of our project members will take part in the CoNLL2001 shared task, ‘clausing’, hope­fully with good results.</S>
			<S sid ="210" ssid = "4">Two more have started working on the challenging task of full parsing, in particular by starting with a chunker and build­ing a bottom-up arbitrary phrase recogniser on top of that.</S>
			<S sid ="211" ssid = "5">The preliminary results are encouraging though not as good as advanced statistical parsers like those of Charniak (2000) and Collins (2000).</S>
			<S sid ="212" ssid = "6">It is fair to characterise LCG’s goals as pri­marily technical in the sense that we sought to maximise performance rates, esp. the recognition of different levels of NP structure.</S>
			<S sid ="213" ssid = "7">Our view in the project is certainly broader, and most project members would include learning as one of the language processes one ought to study from a computational perspective—like parsing or gen­eration.</S>
			<S sid ="214" ssid = "8">This suggest several further avenues, e.g., one might compare the learning progress of sim­ulations to humans (mastery as a function of ex­perience).</S>
			<S sid ="215" ssid = "9">One might also be interested in the exact role of supervision, in the behaviour (and availability) of incremental learning algorithms, and also in comparing the simulation’s error func­tions to those of human learners (wrt to phrase length or construction frequency or similarity).</S>
			<S sid ="216" ssid = "10">This would add an interesting cognitive perspec­tive to the work, along the lines begun by Brent (1997), but we note it here only as a prospect for future work.</S>
	</SECTION>
	<SECTION title="Acknowledgement">
			<S sid ="217" ssid = "11">LCG’s work has been supported by a grant from the European Union’s programme Training and Mobility of Researchers, ERBFMRXCT980237.</S>
	</SECTION>
</PAPER>
