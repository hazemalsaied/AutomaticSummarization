<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">We present a class-based approach to building a verb lexicon that makes explicit the close asso­ ciation between syntax and semantics for Levin classes.</S>
		<S sid ="2" ssid = "2">We have used Lexicalized Tree Adjoin­ ing Grammars to capture the syntax associated with each verb class and have augmented the trees to in­ clude sclcctional restrictions.</S>
		<S sid ="3" ssid = "3">In addition, semantic predicates arc associated with each tree, which al­ low for a compositional interpretation.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="4" ssid = "4">The difficulty of achieving adequate handcrafted semantic representations has limited the field of natural language processing to applications that can be contained within well-clefinccl sub-domains.</S>
			<S sid ="5" ssid = "5">Despite many different lexicon clcvclopmcnt ap­ proaches (Mel&apos;cuk, 1988; Copestakc and Sanfil­ ippo, 1993; Lowe et al., 1997), the field has yet to develop a clear consensus on guidelines for a computational lexicon.</S>
			<S sid ="6" ssid = "6">One of the most controver­ sial areas in building such a lexicon is polysemy: how senses can be computationally distinguished and characterized.</S>
			<S sid ="7" ssid = "7">We address this problem by em­ ploying compositional semantics and the adjunction of syntactic phrases to support regular verb sense extensions.</S>
			<S sid ="8" ssid = "8">This differs from the Lexical Concep­ tual Structure (LCS) approach exemplified by Voss (1996), which requires a separate LCS representa­ tion for each possible sense extension.</S>
			<S sid ="9" ssid = "9">In this pa­ per we describe the construction of VcrbNet, a verb lexicon with explicitly stated syntactic and seman­ tic information for individual lexical items, using Levin verb classes (Levin, 1993) to systematically construct lexical entries.</S>
			<S sid ="10" ssid = "10">We use Lexicalizecl Tree Adjoining Grammar (LTAG) (Joshi, 1987; Schabes, 1990) to capture the syntax for each verb class, and associate semantic predicates with each tree.</S>
			<S sid ="11" ssid = "11">Although similar ideas have been explored for verb sense extension (Pustejovsky, 1995; Goldberg, 1995), our approach of applying LTAG to the prob­ lem of composing and extending verb senses is novel.</S>
			<S sid ="12" ssid = "12">LTAGs have an extended domain of local­ ity that captures the arguments of a verb in a local manner.</S>
			<S sid ="13" ssid = "13">The association of semantic predicates to a tree yields a complete semantics for the verb.</S>
			<S sid ="14" ssid = "14">More­ over, the operation of adjunction in LTAGs provides a mechanism for extending verb senses.</S>
	</SECTION>
	<SECTION title="Levin classes. " number = "2">
			<S sid ="15" ssid = "1">Levin verb classes arc based on the ability of a verb to occur in diathesis alternations, which arc pairs of syntactic frames that arc in some sense meaning preserving.</S>
			<S sid ="16" ssid = "2">The fundamental assumption is that the syntactic frames arc a direct reflection of the under­ lying semantics.</S>
			<S sid ="17" ssid = "3">However, Levin classes exhibit in­ consistencies that have hampered researchers&apos; abil­ ity to reference them directly in applications.</S>
			<S sid ="18" ssid = "4">Many verbs are listed in multiple classes, some of which have conflicting sets of syntactic frames.</S>
			<S sid ="19" ssid = "5">Dang ct al.</S>
			<S sid ="20" ssid = "6">(1998) showed that multiple listings could in some cases be interpreted as regular sense extensions, and defined intcrsectivc Levin classes, which are a more fine-grained, syntactically and semantically coher­ ent refinement of basic Levin classes.</S>
			<S sid ="21" ssid = "7">We represent these verb classes and their regular sense extensions in the LTAG formalism.</S>
	</SECTION>
	<SECTION title="Lexicalized Tree Adjoining Grammars. " number = "3">
			<S sid ="22" ssid = "1">3.1 Overview of formalism.</S>
			<S sid ="23" ssid = "2">Lcxicalizcd Tree Adjoining Grammars consist of a finite set of initial and auxiliary elementary trees, and two operations to combine them.</S>
			<S sid ="24" ssid = "3">The min­ imal, non-recursive linguistic structures of a lan­ guage, such as a verb and its complements, arc cap­ tured by initial trees.</S>
			<S sid ="25" ssid = "4">Recursive structures of a lan­ guage, such as prepositional modifiers which result in syntactically embedded VPs, arc represented by auxiliary trees.</S>
			<S sid ="26" ssid = "5">Elementary trees are combined by the operations of substitution and adjunction.</S>
			<S sid ="27" ssid = "6">Substitution is a sim­ ple operation that replaces a leaf of a tree with a new tree.</S>
			<S sid ="28" ssid = "7">Adjunction is a splicing operation that replaces an internal node of an elementary tree with an aux­ iliary tree.</S>
			<S sid ="29" ssid = "8">Every tree is associated with a lexical item of the language, called the anchor of the tree.</S>
			<S sid ="30" ssid = "9">The tree represents the domain over which the lex­ ical item can directly specify syntactic constraints, such as subject-verb number agreement, or seman­ tic constraints, such as selectional restrictions, all of which are implemented as features.</S>
			<S sid ="31" ssid = "10">LTAGs are more powerful than context free gram­ mars (CFG), allowing localization of so-called un­ bounded dependencies that cannot be handled by CFGs.</S>
			<S sid ="32" ssid = "11">There are critical benefits to lexical seman­ tics that are provided by the extended domain of locality of the lexicalized trees.</S>
			<S sid ="33" ssid = "12">Each lexical en­ try corresponds to a tree.</S>
			<S sid ="34" ssid = "13">If the lexical item is a verb, the corresponding tree is a skeleton for an en­ tire sentence with the verb already present, anchor­ ing the tree as a terminal symbol.</S>
			<S sid ="35" ssid = "14">The other parts of the sentence will be substituted or adjoined in at appropriate places in the skeleton tree in the cou.rse of the derivation.</S>
			<S sid ="36" ssid = "15">The composition of trees dunng parsing is recorded in a derivation tree.</S>
			<S sid ="37" ssid = "16">The deriva­ tion tree nodes correspond to lexically anchored el­ ementary trees, and the arcs are labeled with infor­ mation about how these trees were combined to pro­ duce the parse.</S>
			<S sid ="38" ssid = "17">Since each lexically anchored initial tree corresponds to a semantic unit, the derivation tree closely resembles a semantic-dependency rep­ resentation.</S>
			<S sid ="39" ssid = "18">3.2 Semantics for TAGs.</S>
			<S sid ="40" ssid = "19">There is a range of previous work in incorporating semantics into TAG trees.</S>
			<S sid ="41" ssid = "20">Stone and Doran (1997) describe a system used for generation that simul­ taneously constructs the semantics and syntax of a sentence using LTAGs.</S>
			<S sid ="42" ssid = "21">Joshi and VijayShanker (1999), and Kallmeyer and Joshi (1999), describe the semantics of a derivation tree as a set of attach­ ments of trees.</S>
			<S sid ="43" ssid = "22">The semantics of these attachments is given as a conjunction of formulae in a flat seman­ tic representation.</S>
			<S sid ="44" ssid = "23">They provide a specific method­ ology for composing semantic representations n.mch like Candito and Kahane (1998), where the direc­ tionality of dominance in the derivation tree should be interpreted according to the operations used to build it.</S>
			<S sid ="45" ssid = "24">Kallmeyer and Joshi also use a flat semantic representation to handle scope phenomena involv­ ing quantifiers.</S>
	</SECTION>
	<SECTION title="Description of the verb lexicon. " number = "4">
			<S sid ="46" ssid = "1">VerbNet can be viewed in both a static and a dy­ namic way.</S>
			<S sid ="47" ssid = "2">The static aspect refers to the verb and class entries and how they are organized, providing the characteristic descriptions of a verb sense or a verb class (Kipper et a!., 2000).</S>
			<S sid ="48" ssid = "3">The dynamic as­ pect of the lexicon constrains the entries to allow a compositional interpretation in LTAG derivation trees, representing extended verb meanings by in­ corporating adjuncts.</S>
			<S sid ="49" ssid = "4">Verb classes allow us to capture generalizations about verb behavim: Each verb class lists the the­ matic roles that the predicate-argument stmcture of its members allows, and provides descriptions of the syntactic frames conesponding to licensed con­ stmctions, with selectional restrictions defined for each argument in each frame.</S>
			<S sid ="50" ssid = "5">1 Each frame also includes semantic predicates describing the partic­ ipants at various stages of the event described by the frame.</S>
			<S sid ="51" ssid = "6">Verb classes are hierarchically organized, ensur­ ing that each class is coherent -that is, all its mem­ bers have common semantic elements and share a common set of thematic roles and basic syntactic frames.</S>
			<S sid ="52" ssid = "7">This requires some manual restmcturing of the original Levin classes, which is facilitated by us­ ing intersective Levin classes.</S>
	</SECTION>
	<SECTION title="Compositional Semantics. " number = "5">
			<S sid ="53" ssid = "1">We use TAG elementary trees for the description of allowable frames and associate semantic predi­ cates with each tree, as was done by Stone and Do­ ran.</S>
			<S sid ="54" ssid = "2">The semantic predicates are primitive enough so that many may be reused in different trees.</S>
			<S sid ="55" ssid = "3">By using TAGs we get the additional benefit of an ex­ isting parser that yields derivations and derived trees from which we can construct the compositional se­ mantics of a given sentence.</S>
			<S sid ="56" ssid = "4">We decompose each event E into a tripar­ tite structure in a manner similar to Moens and Steedman (1988), introducing a time function for each predicate to specify whether the predicate is true in the preparatory (during(E)), culmination (end(E)), or consequent (result(E)) stage of an event.</S>
			<S sid ="57" ssid = "5">Initial trees capture the semantics of the basic senses of verbs in each class.</S>
			<S sid ="58" ssid = "6">For example, many &apos;These restrictions arc more like preferences that generate a preferred reading of a sentence.</S>
			<S sid ="59" ssid = "7">They may be relaxed depend­ ing on the domain of a particular application.</S>
			<S sid ="60" ssid = "8">S [ cvcnt=E] NP&quot;&quot;Yl1- VI&apos; [ cvcnt=E] [ +animate ] I v I run mof;ion(dm·ing(E), Xargl) S [ cvent=E2 ] NPa,.uo1- VI&apos; [ cvcnt=El ] [+animate]V NP&quot;&quot;!ill 1 [ +animate ] run cau.se(during(E2), Xm·go, El)/\ rnotion(dur·ing(El), Xm·gl) Figure 1: Induced action alternation for the Run verbs verbs in the Run class can occur in the induced ac­ tion alternation, in which the subject of the intransi­ tive sentence has the same thematic role as the direct object in the transitive sentence.</S>
			<S sid ="61" ssid = "9">Figure 1 shows the initial trees for the transitive and intransitive vari­ ants for the Run class, along with their semantic predicates.</S>
			<S sid ="62" ssid = "10">The entity in motion is given by argl, associated with the syntactic subject of the intransi­ tive tree and the direct object of the transitive tree.</S>
			<S sid ="63" ssid = "11">The event denoted by the transitive variant is a com­ position of two subevents: Hl refers to the event of ar·gl running, and E2 refers to the event of an entity (ar·gO) causing event El.</S>
			<S sid ="64" ssid = "12">Predicates are associated with not only the verb trees, but also the auxiliary trees.</S>
			<S sid ="65" ssid = "13">We use a flat semantic representation like that of Kallmeyer and Joshi, and the semantics of a sentence is the con­ junction of the semantic predicates of the trees used to derive the sentence.</S>
			<S sid ="66" ssid = "14">Figure 2 shows an auxiliary tree for a path prepositional phrase headed by &quot;to&quot;, along with its associated semantic predicate.</S>
			<S sid ="67" ssid = "15">When the PP tree for &quot;to the park&quot; is adjoined into the intransitive tree for &quot;John ran&quot;, the semantic in­ terpretation is the conjunction of the two predicates motion( during( E ),john) 1\ goal( end( E ),john, park); adjunction into the transitive tree for &quot;Bill ran the horse&quot; yields cause(durin[i(E2),bill,EI) 1\ nw­ tion( during( El ),horse) 1\ goal( end( E1 ),horse, park).</S>
			<S sid ="68" ssid = "16">In both cases, the argument Xm·.qO.argl (john or horse) for the auxiliary tree is nonlocal and comes from the adjunction site.2 The arguments are re­ covered from the derivation tree, following Candito and Kahane.</S>
			<S sid ="69" ssid = "17">When an initial tree is substituted into another tree, the dependency mirrors the derivation structure, so the variables associated with the sub 2 X,,.</S>
			<S sid ="70" ssid = "18">o.a,.</S>
			<S sid ="71" ssid = "19">I is the variable associated with the entity in mo­ stituting tree can be referenced as arguments in the host tree&apos;s predicates.</S>
			<S sid ="72" ssid = "20">When an auxiliary tree is adjoined, the dependency for the adjunction is re­ versed, so that variables associated with the host tree can be referenced as arguments in the adjoin­ ing tree&apos;s predicates.</S>
			<S sid ="73" ssid = "21">VI&apos; VP&quot;&apos;&apos;f 1o* I&apos;P [cvcnt=E] I&apos; NP&quot;,.Yd to Figure 2: Auxiliary path PP tree The tripartite event structure allows us to express the semantics of classes of verbs like change of state verbs whose description requires reference to a complex event structure.</S>
			<S sid ="74" ssid = "22">In the case of a verb such as &quot;break&quot;, it is important to make a distinc­ tion between the state of the object before the end of the action and the new state that results after­ wards.</S>
			<S sid ="75" ssid = "23">This event structure also handles the cona­ tive construction, in which there is an intention of a goal during the event, that is not achieved at the end of the event.</S>
			<S sid ="76" ssid = "24">The example of the cona­ tive construction shown in Figure 3 expresses the intention of hitting something.</S>
			<S sid ="77" ssid = "25">Because the in­ tention is not satisfied the semantics do not in­ clude the predicates manner( end( E),force.fitl,Xm·go) 1\ contact( end( E),Xargo.Xm·gl), that express the completion of the contact with impact event.</S>
			<S sid ="78" ssid = "26">The ability of verbs to take on extended senses 9 9 tion (m·gl) in the tree to which the PP adjoins (nrgO).</S>
			<S sid ="79" ssid = "27">in sentences based on their adjuncts is captured in a S [ cvent=E] NPa,.9o-!- VI&apos; [ cvcnl=E]V NPa.·vl-l 1 hit S [ cvcnt=E] NPargo+ V I&apos; V VP I hit V PI&apos; IP NPa,.gl-!</S>
			<S sid ="80" ssid = "28">1 a t manner(during(E), directedmotion, Xm·go)l\ contact(end(E), Xa1·gO, Xm·gl)l\ manneT(dm·ing(E), directedmotion, Xargo) manneT(end(E), forceful, Xa1·go) Figure 3: Syntax and semantics of transitive and conative construction for Hit verbs natural way by the TAG operation of adjunction and our conjunction of semantic predicates.</S>
			<S sid ="81" ssid = "29">The orig­ inal Hit verb class does not include movement of the direct object as part of the meaning of hit; only sudden contact has to be established.</S>
			<S sid ="82" ssid = "30">By adjoining a path PP such as &quot;across NP&quot;, we get an extended meaning, and a change in Levin class membership to the Throw class.</S>
			<S sid ="83" ssid = "31">Figure 4 shows the class-specific auxiliary tree anchored by the preposition &quot;across&quot; together with its semantic predicates, introducing a motion event that immediately follows (meets) the contact event.</S>
			<S sid ="84" ssid = "32">VP [ evcnt=E ] on the LTAG formalism, for which we already have a large English grammar.</S>
			<S sid ="85" ssid = "33">Palmer et a!.</S>
			<S sid ="86" ssid = "34">(1998) de­ fined compositional semantics for classes of verbs implemented in LTAG, representing general seman­ tic components (e.g., motion, manner) as features on the nodes of the trees.</S>
			<S sid ="87" ssid = "35">Our use of separate log­ ical forms gives a more detailed semantics for the sentence, so that for an event involving motion, it is possible to know not only that the event has a motion semantic component, but also which entity is actu­ ally in motion.</S>
			<S sid ="88" ssid = "36">This level of detail is necessary for applications such as animation of natural language instructions (Bindiganavale et a!., 2000).</S>
			<S sid ="89" ssid = "37">Another important contribution of this work is that by divid­ ing each event into a tripartite structure, we permit a more precise definition of the associated semantics.</S>
			<S sid ="90" ssid = "38">VPa,.9o&apos;1 cvcnt=Ea,.9 o] PP P NPargd I a c r o s s meets(Em·go, E.)</S>
			<S sid ="91" ssid = "39">I\ Finally, the operation of adjunction in TAGs pro­ vides a principled approach to representing the type of regular polysemy that has been a major obstacle in building verb lexicons.</S>
			<S sid ="92" ssid = "40">Researching whether a TAG grammar for Verb­ motion( during( E), Xm·gO.a1·gi)I\ via(dm·ing(E), XargO.a1·gl, Xargt) Figure 4: Auxiliary tree for &quot;across&quot;</S>
	</SECTION>
	<SECTION title="Conclusion. " number = "6">
			<S sid ="93" ssid = "1">We have presented a class-based approach to build­ ing a verb lexicon that makes explicit and imple­ ments the close association between syntax and se­ mantics, as postulated by Levin.</S>
			<S sid ="94" ssid = "2">The power of the lexicon comes from its dynamic aspect that is based Net can be automatically constructed by using de­ velopment tools such as Xi a eta!.</S>
			<S sid ="95" ssid = "3">(1999) or Candito (1996) is part of our next step.</S>
			<S sid ="96" ssid = "4">We also expect to be able to factor out some class-specific auxiliary trees to be used across several verb classes.</S>
	</SECTION>
	<SECTION title="Acknowledgments. " number = "7">
			<S sid ="97" ssid = "1">The authors would like to thank the anonymous re­ viewers for their valuable comments.</S>
			<S sid ="98" ssid = "2">This research was partially supported by NSF grants IIS9800658 and IIS9900297 and CAPES grant 091495.</S>
	</SECTION>
</PAPER>
