<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper presents a trainable rule-based algorithm for performing word segmen­ tation.</S>
		<S sid ="2" ssid = "2">The algorithm provides a sim­ ple, language-independent alternative to large-scale lexical-based segmenters requir­ ing large amounts of knowledge engineer­ ing.</S>
		<S sid ="3" ssid = "3">As a stand-alone segmenter, we show our algorithm to produce high performance Chinese segmentation.</S>
		<S sid ="4" ssid = "4">In addition, we show the transformation-based algorithm to be effective in improving the output of several existing word segmentation algo­ rithms in three different languages.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="5" ssid = "5">This paper presents a trainable rule-based algorithm for performing word segmentation.</S>
			<S sid ="6" ssid = "6">Our algorithm is effective both as a high-accuracy stand-alone seg­ menter and as a postprocessor that improves the output of existing word segmentation algorithms.</S>
			<S sid ="7" ssid = "7">In the writing systems of many languages, includ­ ing Chinese, Japanese, and Thai, words are not de­ limited by spaces.</S>
			<S sid ="8" ssid = "8">Determining the word bound­ aries, thus tokenizing the text, is usually one of the first necessary processing steps, making tasks such as part-of-speech tagging and parsing possible.</S>
			<S sid ="9" ssid = "9">A vari­ ety of methods have recently been developed to per­ form word segmentation and the results have been published widely.</S>
			<S sid ="10" ssid = "10">1 A major difficulty in evaluating segmentation al­ gorithms is that there are no widely-accepted guide­ lines as to what constitutes a word, and there is therefore no agreement on how to &quot;correctly&quot; seg­ ment a text in an unsegmented language.</S>
			<S sid ="11" ssid = "11">It is 1Most published segmentation work has been done for Chinese.</S>
			<S sid ="12" ssid = "12">For a discussion of recent Chinese segmentation work, see Sproat et al. {1996).</S>
			<S sid ="13" ssid = "13">frequently mentioned in segmentation papers that native speakers of a language do not always agree about the &quot;correct&quot; segmentation and that the same text could be segmented into several very different (and equally correct) sets of words by different na­ tive speakers.</S>
			<S sid ="14" ssid = "14">Sproat et al.(l996) and Wu and Fung (1994) give empirical results showing that an agree­ ment rate between native speakers as low as 75% is common.</S>
			<S sid ="15" ssid = "15">Consequently, an algorithm which scores extremely well compared to one native segmentation may score dismally compared to other, equally &quot;cor­ rect&quot; segmentations.</S>
			<S sid ="16" ssid = "16">We will discuss some other is­ sues in evaluating word segmentation in Section 3.1.</S>
			<S sid ="17" ssid = "17">One solution to the problem of multiple correct segmentations might be to establish specific guide­ lines for what is and is not a word in unsegmented languages.</S>
			<S sid ="18" ssid = "18">Given these guidelines, all corpora could theoretically be uniformly segmented according to the same conventions, and we could directly compare existing methods on the same corpora.</S>
			<S sid ="19" ssid = "19">While this approach has been successful in driving progress in NLP tasks such as part-of-speech tagging and pars­ ing, there are valid arguments against adopting it for word segmentation.</S>
			<S sid ="20" ssid = "20">For example, since word seg­ mentation is merely a preprocessing task for a wide variety of further tasks such as parsing, information extraction, and information retrieval, different seg­ mentations can be useful or even essential for the different tasks.</S>
			<S sid ="21" ssid = "21">In this sense, word segmentation is similar to speech recognition, in which a system must be robust enough to adapt to and recognize the mul­ tiple speaker-dependent &quot;correct&quot; pronunciations of words.</S>
			<S sid ="22" ssid = "22">In some cases, it may also be necessary to allow multiple &quot;correct&quot; segmentations of the same text, depending on the requirements of further pro­ cessing steps.</S>
			<S sid ="23" ssid = "23">However, many algorithms use exten­ sive domain-specific word lists and intricate name recognition routines as well as hard-coded morpho­ logical analysis modules to produce a predetermined segmentation output.</S>
			<S sid ="24" ssid = "24">Modifying or retargeting an existing segmentation algorithm to produce a differ­ ent segmentation can be difficult, especially if it is not clear what and where the systematic differences in segmentation are.</S>
			<S sid ="25" ssid = "25">It is widely reported in word segmentation papers,2 that the greatest barrier to accurate word segmentation is in recognizing words that are not in the lexicon of the segmenter.</S>
			<S sid ="26" ssid = "26">Such a problem is de­ pendent both on the source of the lexicon as well as the correspondence (in vocabulary) between the text in question and the lexicon.</S>
			<S sid ="27" ssid = "27">Wu and Fung (1994) demonstrate that segmentation accuracy is signifi­ cantly higher when the lexicon is constructed using the same type of corpus as the corpus on which it is tested.</S>
			<S sid ="28" ssid = "28">We argue that rather than attempting to construct a single exhaustive lexicon or even a series of domain-specific lexica, it is more practical to de­ velop a robust trainable means of compensating for lexicon inadequacies.</S>
			<S sid ="29" ssid = "29">Furthermore, developing such an algorithm will allow us to perform segmentation in many different languages without requiring ex­ tensive morphological resources and domain-specific lexica in any single language.</S>
			<S sid ="30" ssid = "30">For these reasons, we address the problem of word segmentation from a different direction.</S>
			<S sid ="31" ssid = "31">We intro­ duce a rule-based algorithm which can produce an accurate segmentation of a text, given a rudimentary initial approximation to the segmentation.</S>
			<S sid ="32" ssid = "32">Recog­ nizing the utility of multiple correct segmentations of the same text, our algorithm also allows the output of a wide variety of existing segmentation algorithms to be adapted to different segmentation schemes.</S>
			<S sid ="33" ssid = "33">In addition, our rule-based algorithm can also be used to supplement the segmentation of an existing al­ gorithm in order to compensate for an incomplete lexicon.</S>
			<S sid ="34" ssid = "34">Our algorithm is trainable and language in­ dependent, so it can be used with any unsegmented l .nguage.</S>
	</SECTION>
	<SECTION title="Transformation-based. " number = "2">
			<S sid ="35" ssid = "1">Segmentation The key component of our trainable segmenta­ tion algorithm is Transformation-based Error-driven Learning, the corpus-based language processing method introduced by Brill (1993a).</S>
			<S sid ="36" ssid = "2">This technique provides a simple algorithm for learning a sequence of rules that can be applied to various NLP tasks.</S>
			<S sid ="37" ssid = "3">It differs from other common corpus-based methods in several ways.</S>
			<S sid ="38" ssid = "4">For one, it is weakly statistical, but not probabilistic; transformation-based approaches conseop11tly require far less training data than most &quot; e .i.i:;tical approaches.</S>
			<S sid ="39" ssid = "5">It is rule-based, but relies on 2 See, for example, Sproat et al.</S>
			<S sid ="40" ssid = "6">(1996)..</S>
			<S sid ="41" ssid = "7">machine learning to acquire the rules, rather than expensive manual knowledge engineering.</S>
			<S sid ="42" ssid = "8">The rules produced can be inspected, which is useful for gain­ ing insight into the nature of the rule sequence and for manual improvement and debugging of the se­ quence.</S>
			<S sid ="43" ssid = "9">The learning algorithm also considers the entire training set at all learning steps, rather than decreasing the size of the training data as learning progresses, such as is the case in decision-tree in­ duction (Quinlan, 1986).</S>
			<S sid ="44" ssid = "10">For a thorough discussion of transformation-based learning, see Ramshaw and Marcus (1996).</S>
			<S sid ="45" ssid = "11">Brill&apos;s work provides a proof of viability of transformation-based techniques in the form of a number of processors, including a (widely­ distributed) part-of-speech tagger (Brill, 1994), a procedure for prepositional phrase attachment (Brill and Resnik, 1994), and a bracketing parser (Brill, 1993b).</S>
			<S sid ="46" ssid = "12">All of these provided performance comparable to or better than previous attempts.</S>
			<S sid ="47" ssid = "13">Transformation-based learning has also been suc­ cessfully applied to text chunking (Ramshaw and Marcus, 1995), morphological disambiguation (Oflazer and Tur, 1996), and phrase parsing (Vilain and Day, 1996).</S>
			<S sid ="48" ssid = "14">2.1 Training.</S>
			<S sid ="49" ssid = "15">Word segmentation can easily be cast as a transformation-based problem, which requires an initial model, a goal state into which we wish to transform the initial model (the &quot;gold standard&quot;), and a series of transformations to effect this improve­ ment.</S>
			<S sid ="50" ssid = "16">The transformation-based algorithm involves applying and scoring all the possible rules to train­ ing data and determining which rule improves the model the most.</S>
			<S sid ="51" ssid = "17">This rule is then applied to all ap­ plicable sentences, and the process is repeated until no rule improves the score of the training data.</S>
			<S sid ="52" ssid = "18">In this manner a sequence of rules is built for iteratively improving the initial model.</S>
			<S sid ="53" ssid = "19">Evaluation of the rule sequence is carried out on a test set of data which is independent of the training data.</S>
			<S sid ="54" ssid = "20">If we treat the output of an existing segmentation algorithm3 as the initial state and the desired seg­ mentation as the goal state, we can perform a series of transformations on the initial state - removing ex­ traneous boundaries and inserting new boundaries - to obtain a more accurate approximation of the goal state.</S>
			<S sid ="55" ssid = "21">We therefore need only define an appropriate rule syntax for transforming this initial approxima 3 The &quot;existing&quot; algorithm does not need to be a large or even accurate system; the algorithm can be arbi­ trarily simple as long as it assigns some form of initial segmentation.</S>
			<S sid ="56" ssid = "22">tion and prepare appropriate training data.</S>
			<S sid ="57" ssid = "23">For our experiments, we obtained corpora which had been manually segmented by native or near­ native speakers of Chinese and Thai.</S>
			<S sid ="58" ssid = "24">We divided the hand-segmented data randomly into training and test sets.</S>
			<S sid ="59" ssid = "25">Roughly 80% of the data was used to train the segmentation algorithm, and 20% was used as a blind test set to score the rules learned from the training data.</S>
			<S sid ="60" ssid = "26">In addition to Chinese and Thai, we also performed segmentation experiments using a large corpus of English in which all the spaces had been removed from the texts.</S>
			<S sid ="61" ssid = "27">Most of our English experiments were performed using training and test sets with roughly the same 8020 ratio, but in Sec­ tion 3.4.3 we discuss results of English experiments with different amounts of training data.</S>
			<S sid ="62" ssid = "28">Unfortu­ nately, we could not repeat these experiments with Chinese and Thai due to the small amount of hand­ segmented data available.</S>
			<S sid ="63" ssid = "29">2.2 Rule syntax.</S>
			<S sid ="64" ssid = "30">There are three main types of transformations which can act on the current state of an imperfect segmen­ tation: • Insert - place a new boundary between two char­ acters 3.1 Evaluation of segmentation.</S>
			<S sid ="65" ssid = "31">Despite the number of papers on the topic, the eval­ uation and comparison of existing segmentation al­ gorithms is virtually impossible.</S>
			<S sid ="66" ssid = "32">In addition to the problem of multiple correct segmentations of the same texts, the comparison of algorithms is diffi­ cult because of the lack of a single metric for re­ porting scores.</S>
			<S sid ="67" ssid = "33">Two common measures of perfor­ mance are recall and precision, where recall is de­ fined as the percent of words in the hand-segmented text identified by the segmentation algorithm, and precision is defined as the percentage of words re­ turned by the algorithm that also occurred in the hand-segmented text in the same position.</S>
			<S sid ="68" ssid = "34">The com­ ponent recall and precision scores are then used to calculate an F-measure (Rijsbergen, 1979), where F = (1 + f3)P R/(/3P + R).</S>
			<S sid ="69" ssid = "35">In this paper we will report all scores as a balanced F-measure (precision and recall weighted equally) with /3 = 1, such that F = 2PR/(P+ R) 3.2 Chinese.</S>
			<S sid ="70" ssid = "36">For our Chinese experiments, the training set con­ sisted of 2000 sentences (60187 words) from a Xin­ hua news agency corpus; the test set was a separate set of 560 sentences (18783 words) from the same 5 • Delete - remove an existing boundary between corpus.</S>
			<S sid ="71" ssid = "37">We ran four experiments using this corpus, two characters • Slide- move an existing boundary from its cur­ rent location between two characters to a loca­ tion 1, 2, or 3 characters to the left or right4 In our syntax, Insert and Delete transformations can be triggered by any two adjacent characters (a bigram) and one character to the left or right of the bigram.</S>
			<S sid ="72" ssid = "38">Slide transformations can be triggered by a sequence of one, two, or three characters over which the boundary is to be moved.</S>
			<S sid ="73" ssid = "39">Figure 1 enumerates the 22 segmentation transformations we define.</S>
	</SECTION>
	<SECTION title="Results. " number = "3">
			<S sid ="74" ssid = "1">With the above algorithm in place, we can use the training data to produce a rule sequence to augment an initial segmentation approximation in order to obtain a better approximation of the desired segmen­ tation.</S>
			<S sid ="75" ssid = "2">Furthermore, since all the rules are purely character-based, a sequence can be learned for any character set and thus any language.</S>
			<S sid ="76" ssid = "3">We used our rule-based algorithm to improve the word segmen­ tation rate for several segmentation algorithms in three languages.</S>
			<S sid ="77" ssid = "4">•Note that a Slide transformation is equivalent to a Delete plus an Insert.</S>
			<S sid ="78" ssid = "5">with four different algorithms providing the starting point for the learning of the segmentation transfor­ mations.</S>
			<S sid ="79" ssid = "6">In each case, the rule sequence learned from the training set resulted in a significant im­ provement in the segmentation of the test set.</S>
			<S sid ="80" ssid = "7">3.2.1 Character-as-word (CAW) A very simple initial segmentation for Chinese is to consider each character a distinct word.</S>
			<S sid ="81" ssid = "8">Since the average word length is quite short in Chinese, with most words containing only 1 or 2 characters,6 this character-as-word segmentation correctly iden­ tified many one-character words and produced an initial segmentation score of F=40.3.</S>
			<S sid ="82" ssid = "9">While this is a low segmentation score, this segmentation algo­ rithm identifies enough words to provide a reason­ able initial segmentation approximation.</S>
			<S sid ="83" ssid = "10">In fact, the CAW algorithm alone has been shown (Buckley et al., 1996; Broglio et al., 1996) to be adequate to be used successfully in Chinese information retrieval.</S>
			<S sid ="84" ssid = "11">Our algorithm learned 5903 transformations from the 2000 sentence training set.</S>
			<S sid ="85" ssid = "12">The 5903 transfor­ mations applied to the test set improved the score from F=40.3 to 78.1, a 63.3% reduction in the error 5The Chinese texts were prepared by Tom Keenan.</S>
			<S sid ="86" ssid = "13">6 The average length of a word in our Chinese data was 1.60 characters.</S>
			<S sid ="87" ssid = "14">R u l e Bo un da ry Ac tio n Tri gg eri ng Co nte xt A B &lt; = &gt; A B Ins ert (de let e) bet we en A an d B an y x B &lt; = &gt; X B Ins ert (de let e) bef ore an y B an y A y &lt; = &gt; A y Ins ert (de let e) aft er an y A an y A B C &lt; = &gt; A B c Ins ert (de let e) bet we en A an d B A N D Ins ert (de let e) bet we en Ba nd C an y J A B &lt; = &gt; J A B Ins ert (de let e) bet we en A an d B J to left of A . J A B &lt; = &gt; . J A B Ins ert (de let e) bet we en A an d B no J to lef t of A A B K &lt; = &gt; A B K Ins ert (de let e) bet we en A an d B K to rig ht of B A B . K &lt;=&gt; A B-.K Ins ert (de let e) bet we en A an d B no K to rig ht of B x A y &lt; = &gt; X A y M ov e fro m aft er A to be for e A an y x A B y &lt;=&gt; X ABy M ov e fro m aft er bi gr a m A B to be for e A B an y xA B C y {:::::} X ABCy M ov e fro m aft er tri gr a m A B C to be for e A B C an y Figure 1: Possible transformations.</S>
			<S sid ="88" ssid = "15">A, B, C, J, and K are specific characters; x and y can be any character.</S>
			<S sid ="89" ssid = "16">-,J and -.K can be any character except J and K, respectively.</S>
			<S sid ="90" ssid = "17">rate.</S>
			<S sid ="91" ssid = "18">This is a very surprising and encouraging re­ sult, in that, from a very naive initial approximation using no lexicon except that implicit from the train­ ing data, our rule-based algorithm is able to produce a series of transformations with a high segmentation accuracy.</S>
			<S sid ="92" ssid = "19">3.2.2 Maximum matching (greedy) algorithm A common approach to word segmentation is to use a variation of the maximum matching algorithm, frequently referred to as the &quot;greedy algorithm.&quot;</S>
			<S sid ="93" ssid = "20">The greedy algorithm starts at the first character in a text and, using a word list for the language be­ ing segmented, attempts to find the longest word in the list starting with that character.</S>
			<S sid ="94" ssid = "21">If a word is found, the maximum-matching algorithm marks a boundary at the end of the longest word, then be­ gins the same longest match search starting at the character following the match.</S>
			<S sid ="95" ssid = "22">If no match is found in the word list, the greedy algorithm simply skips that character and begins the search starting at the next character.</S>
			<S sid ="96" ssid = "23">In this manner, an initial segmen­ tation can be obtained that is more informed than a simple character-as-word approach.</S>
			<S sid ="97" ssid = "24">We applied the maximum matching algorithm to the test set using a list of 57472 Chinese words from the NMSU CHSEG segmenter (described in the next section).</S>
			<S sid ="98" ssid = "25">This greedy algorithm produced an initial score of F=64.4.</S>
			<S sid ="99" ssid = "26">A sequence of 2897 transformations was learned · from the training set; applied to the test set, they improved the score from F=64.4 to 84.9, a 57.8% error reduction.</S>
			<S sid ="100" ssid = "27">From a simple Chinese word list, the rule-based algorithm was thus able to produce a. segmentation score comparable to segmentation al­ gorithms developed with a large amount of domain knowledge (as we will see in the next section).</S>
			<S sid ="101" ssid = "28">This score was improved further when combin­ ing the character-as-word (CAW) and the maximum matching algorithms.</S>
			<S sid ="102" ssid = "29">In the maximum matching al­ gorithm described above, when a sequence of char­ acters occurred in the text, and no subset of the sequence was present in the word list, the entire sequence was treated as a single word.</S>
			<S sid ="103" ssid = "30">This of­ ten resulted in words containing 10 or more char­ acters, which is very unlikely in Chinese.</S>
			<S sid ="104" ssid = "31">In this experiment, when such a sequence of characters was encountered, each of the characters was treated as a separate word, as in the CAW algorithm above.</S>
			<S sid ="105" ssid = "32">This variation of the greedy algorithm, using the same list of 57472 words, produced an initial score of F=82.9.</S>
			<S sid ="106" ssid = "33">A sequence of 2450 transformations was learned from the training set; applied to the test set, they improved the score from F=82.9 to 87.7, a 28.1% error reduction.</S>
			<S sid ="107" ssid = "34">The score produced using this variation of the maximum matching algorithm combined with a rule sequence (87.7) is nearly equal to the score produced by the NMSU segmenter seg­ menter (87.9) discussed in the next section.</S>
			<S sid ="108" ssid = "35">3.2.3 NMSU segmenter The previous three experiments showed that our rule sequence algorithm can produce excellent seg­ mentation results given very simple initial segmen­ tation algorithms.</S>
			<S sid ="109" ssid = "36">However, assisting in the adapta­ tion of an existing algorithm to different segmenta­ tion schemes, as discussed in Section 1, would most likely be performed with an already accurate, fully­ developed algorithm.</S>
			<S sid ="110" ssid = "37">In this experiment we demon strate that our algorithm can also improve the out­ put of such a system.</S>
			<S sid ="111" ssid = "38">The Chinese segmenter CHSEG developed at the Computing Research Laboratory at New Mexico State University is a complete system for high­ accuracy Chinese segmentation (Jin, 1994).</S>
			<S sid ="112" ssid = "39">In ad­ dition to an initial segmentation module that finds words in a text based on a list of Chinese words, CHSEG additionally contains specific modules for recognizing idiomatic expressions, derived words, Chinese person names, and foreign proper names.</S>
			<S sid ="113" ssid = "40">The accuracy of CHSEG on an 8.6MB corpus has been independently reported as F=84.0 (Ponte and Croft, 1996).</S>
			<S sid ="114" ssid = "41">(For reference, Ponte and Croft re­ port scores of F=86.1 and 83.6 for their probabilis­ tic Chinese segmentation algorithms trained on over 100MB of data.)</S>
			<S sid ="115" ssid = "42">On our test set, CHSEG produced a segmentation score of F=87.9.</S>
			<S sid ="116" ssid = "43">Our rule-based algorithm learned a sequence of 1755 transformations from the training set; applied to the test set, they improved the score from 87.9 to 89.6, a 14.0% reduction in the error rate.</S>
			<S sid ="117" ssid = "44">Our rule-based algorithm is thus able to produce an improvement to an existing high-performance sys­ tem.</S>
			<S sid ="118" ssid = "45">Table 1 shows a summary of the four Chinese ex­ periments.</S>
			<S sid ="119" ssid = "46">3.3 Thai.</S>
			<S sid ="120" ssid = "47">While Thai is also an unsegmented language, the Thai writing system is alphabetic and the average word length is greater than Chinese.7 We would therefore expect that our character-based transfor­ mations would not work as well with Thai, since a context of more than one character is necessary in many cases to make many segmentation decisions in alphabetic languages.</S>
			<S sid ="121" ssid = "48">The Thai corpus consisted of texts8 from the Thai News Agency via NECTEC in Thailand.</S>
			<S sid ="122" ssid = "49">For our experiment, the training set consisted of 3367 sen­ tences ( 40937 words); the test set was a separate set of 1245 sentences (13724 words) from the same corpus.</S>
			<S sid ="123" ssid = "50">The initial segmentation was performed using the maximum matching algorithm, with a lexicon of 9933 Thai words from the word separation filter.</S>
			<S sid ="124" ssid = "51">in Cttex,· a Thai language Latex package.</S>
			<S sid ="125" ssid = "52">This greedy algorithm gave an initial segmentation score of F=48.2 on the test set.</S>
			<S sid ="126" ssid = "53">7 The average length of a word in our Thai data was.</S>
			<S sid ="127" ssid = "54">5.01 characters.</S>
			<S sid ="128" ssid = "55">8The Thai texts were manually segmented by Jo Tyler.</S>
			<S sid ="129" ssid = "56">Our rule-based algorithm learned a sequence of 731 transformations which improved the score from 48.2 to 63.6, a 29.7% error reduction.</S>
			<S sid ="130" ssid = "57">While the alphabetic system is obviously harder to segment, we still see a significant reduction in the segmenter error rate using the transformation-based algorithm.</S>
			<S sid ="131" ssid = "58">Nevertheless, it is doubtful that a segmentation with a score of 63.6 would be useful in too many appli­ cations, and this result will need to be significantly improved.</S>
			<S sid ="132" ssid = "59">3.4 De-segmented English.</S>
			<S sid ="133" ssid = "60">Although English is not an unsegmented language, the writing system is alphabetic like Thai and the average word length is similar.9 Since English lan­ guage resources (e.g. word lists and morphological analyzers) are more readily available, it is instruc­ tive to experiment with a de-segmented English cor­ pus, that is, English texts in which the spaces have been removed and word boundaries are not explic­ itly indicated.</S>
			<S sid ="134" ssid = "61">The following shows an example of an English sentence and its de-segmented version: About 20,000 years ago the last ice age ended.</S>
			<S sid ="135" ssid = "62">About20,000yearsagothelasticeageended.</S>
			<S sid ="136" ssid = "63">The results of such experiments can help us deter­ mine which resources need to be compiled in order to develop a high-accuracy segmentation algorithm in unsegmented alphabetic languages such as Thai.</S>
			<S sid ="137" ssid = "64">In addition, we are also able to provide a more detailed error analysis of the English segmentation (since the author can read English but not Thai).</S>
			<S sid ="138" ssid = "65">Our English experiments were performed using a corpus of texts from the Wall Street Journal (WSJ).</S>
			<S sid ="139" ssid = "66">The training set consisted of 2675 sentences (64632 words) in which all the spaces had been removed; the test set was a separate set of 700 sentences (16318 words) from the same corpus (also with all spaces removed).</S>
			<S sid ="140" ssid = "67">3.4.1 Maximum matching experiment For an initial experiment, segmentation was per­ formed using the maximum matching algorithm, with a large lexicon of 34272 English words com­ piled from the WSJ .10 In contrast to the low initial Thai score, the greedy algorithm gave an initial En­ glish segmentation score of F=73.2.</S>
			<S sid ="141" ssid = "68">Our rule-based algorithm learned a sequence of800 transformations, 9 The average length of a word in our English data was 4.46.</S>
			<S sid ="142" ssid = "69">characters, compared to 5.01 for Thai and 1.60 for Chinese.</S>
			<S sid ="143" ssid = "70">10 Note that the portion of the WSJ corpus used to compile the word list was independent of both the train­ ing and test sets used in the segmentation experiments.</S>
			<S sid ="144" ssid = "71">Ini tia l al go rit h m Ini tia l sc or e Ru les lea rn ed Im pr ov ed sc or e Er ro r re du cti on Ch ar acteras w or d M ax im u m m atc hi ng M ax im u m m atc hi ng + C A W N M SU se g m en ter 40 .3 64 .4 82 .9 87 .9 59 03 28 97 24 50 17 55 78 .1 84 .9 87 .7 89 .6 63 .3 % 57 .8 % 28 .1 % 14 .0 % Table 1: Chinese results.</S>
			<S sid ="145" ssid = "72">which improved the score from 73.2 to 79.0, a 21.6% error reduction.</S>
			<S sid ="146" ssid = "73">The difference in the greedy scores for English and Thai demonstrates the dependence on the word list in the greedy algorithm.</S>
			<S sid ="147" ssid = "74">For example, an exper­ iment in which we randomly removed half of the words from the English list reduced the performance of the greedy algorithm from 73.2 to 32.3; although this reduced English word list was nearly twice the size of the Thai word list (17136 vs. 9939), the longest match segmentation utilizing the list was much lower (32.3 vs. 48.2).</S>
			<S sid ="148" ssid = "75">Successive experiments in which we removed different random sets of half the words from the original list resulted in greedy algorithm performance of 39.2, 35.1, and 35.5.</S>
			<S sid ="149" ssid = "76">Yet, despite the disparity in initial segmentation scores, the transformation sequences effect a significant er­ ror reduction in all cases, which indicates that the transformation sequences are effectively able to com­ pensate (to some extent) for weaknesses in the lexi­ con.</S>
			<S sid ="150" ssid = "77">Table 2 provides a summary of the results using the greedy algorithm for each of the three languages.</S>
			<S sid ="151" ssid = "78">3.4.2 Basic morphological segmentation experiment As mentioned above, lexical resources are more readily available for English than for Thai.</S>
			<S sid ="152" ssid = "79">We can use these resources to provide an informed ini­ tial segmentation approximation separate from the greedy algorithm.</S>
			<S sid ="153" ssid = "80">Using our native knowledge of English as well as a short list of common English prefixes and suffixes, we developed a simple al­ gorithm for initial segmentation of English which placed boundaries after any of the suffixes and before any of the prefixes, as well as segmenting punctua­ tion characters.</S>
			<S sid ="154" ssid = "81">In most cases, this simple approach was able to locate only one of the two necessary boundaries for recognizing full words, and the ini­ tial score was understandably low, F=29.8.</S>
			<S sid ="155" ssid = "82">Never­ theless, even from this flawed initial approximation, our rule-based algorithm learned a sequence of 632 transformations which nearly doubled the word re­ call, improving the score from 29.8 to 53.3, a 33.5% error reduction.</S>
			<S sid ="156" ssid = "83">3.4.3 Amount of training data Since we had a large amount of English data, we also performed a classic experiment to determine the effect the amount of training data had on the abil­ ity of the rule sequences to improve segmentation.</S>
			<S sid ="157" ssid = "84">We started with a training set only slightly larger than the test set, 872 sentences, and repeated the maximum matching experiment described in Section 3.4.1.</S>
			<S sid ="158" ssid = "85">We then incrementally increased the amount of training data and repeated the experiment.</S>
			<S sid ="159" ssid = "86">The results, summarized in Table 3, clearly indicate (not surprisingly) that more training sentences produce both a longer rule sequence and a larger error re­ duction in the test data.</S>
			<S sid ="160" ssid = "87">T ra in in g se nte nc es R u l e s le ar ne d Im pr ov ed s c o r e E r r o r re du cti on 8 7 2 1 7 3 1 2 6 7 5 3 5 7 2 4 5 2 2 4 3 6 6 5 3 8 0 0 9 0 2 1 0 1 5 7 8 . 2 7 8 . 9 7 9 . 0 7 9 . 4 8 0 . 3 1 8 . 9 % 2 1 . 3 % 2 1 . 6 % 2 3 . 1 % 2 6 . 5 % Table 3: English training set sizes.</S>
			<S sid ="161" ssid = "88">Initial score of test data (700 sentences) was 73.2.</S>
			<S sid ="162" ssid = "89">3.4.4 Error analysis Upon inspection of the English segmentation er­ rors produced by both the maximum matching algo­ rithm and the learned transformation sequences, one major category of errors became clear.</S>
			<S sid ="163" ssid = "90">Most appar­ ent was the fact that the limited context transforma­ tions were unable to recover from many errors intro­ duced by the naive maximum matching algorithm.</S>
			<S sid ="164" ssid = "91">For example, because the greedy algorithm always looks for the longest string of characters which can be a word, given the character sequence &quot;economicsi­ tuation&quot;, the greedy algorithm first recognized &quot;eco­ nomics&quot; and several shorter words, segmenting the sequence as &quot;economics it u at io n&quot;.</S>
			<S sid ="165" ssid = "92">Since our transformations consider only a single character of context, the learning algorithm was unable to patch the smaller segments back together to produce the desired output &quot;economic situation&quot;.</S>
			<S sid ="166" ssid = "93">In some cases, La ng ua ge Le xic on S l Z e Ini tia l s c o re R u l e s le ar ne d Im pr ov ed s c o r e Er ro r re du cti on Ch ine se C hi ne se ( w it h C A W ) T h ai En gli sh 5 7 4 7 2 5 7 4 7 2 9 9 3 9 3 4 2 7 2 6 4 . 4 8 2 . 9 4 8 . 2 7 3 . 2 2 8 9 7 2 4 5 0 7 3 1 8 0 0 8 4 . 9 8 7 . 7 6 3 . 6 7 9 . 0 57 .8 % 28 .1 % 29 .7 % 21 .6 % Table 2: Summary of maximum matching results.</S>
			<S sid ="167" ssid = "94">the transformations were able to recover some of the word, but were rarely able to produce the full desired output.</S>
			<S sid ="168" ssid = "95">For example, in one case the greedy algo­ rithm segmented &quot;humanactivity&quot; as &quot;humana c ti vi ty&quot;.</S>
			<S sid ="169" ssid = "96">The rule sequence was able to transform this into &quot;humana ctivity&quot;, but was not able to produce the desired &quot;human activity&quot;.</S>
			<S sid ="170" ssid = "97">This suggests that both the greedy algorithm and the transformation learning algorithm need to have a more global word model, with the ability to recognize the impact of placing a boundary on the longer sequences of char­ acters surrounding that point.</S>
	</SECTION>
	<SECTION title="Discussion. " number = "4">
			<S sid ="171" ssid = "1">The results of these experiments demonstrate that a transformation-based rule sequence, supplement­ ing a rudimentary initial approximation, can pro­ duce accurate segmentation.</S>
			<S sid ="172" ssid = "2">In addition, they are able to improve the performance of a wide range of segmentation algorithms, without requiring expen­ sive knowledge engineering.</S>
			<S sid ="173" ssid = "3">Learning the rule se­ quences can be achieved in a few hours and requires no language-specific knowledge.</S>
			<S sid ="174" ssid = "4">As discussed in Sec­ tion 1, this simple algorithm could be used to adapt the output of an existing segmentation algorithm to different segmentation schemes as well as compen­ sating for incomplete segmenter lexica, without re­ quiring modifications to segmenters themselves.</S>
			<S sid ="175" ssid = "5">The rule-based algorithm we developed to improve word segmentation is very effective for segment­ ing Chinese; in fact, the rule sequences combined with a very simple initial segmentation, such as that from a maximum matching algorithm, produce performance comparable to manually-developed seg­ menters.</S>
			<S sid ="176" ssid = "6">As demonstrated by the experiment with the NMSU segmenter, the rule sequence algorithm can also be used to improve the output of an already highly-accurate segmenter, thus producing one of the best segmentation results reported in the litera­ ture.</S>
			<S sid ="177" ssid = "7">In addition to the excellent overall results in Chi­ nese segmentation, we also showed the rule sequence algorithm to be very effective in improving segmen­ tation in Thai, an alphabetic language.</S>
			<S sid ="178" ssid = "8">While the scores themselves were not as high as the Chinese performance, the error reduction was nevertheless very high, which is encouraging considering the sim­ ple rule syntax used.</S>
			<S sid ="179" ssid = "9">The current state of our algo­ rithm, in which only three characters are considered at a time, will understandably perform better with a language like Chinese than with an alphabetic lan­ guage like Thai, where average word length is much greater.</S>
			<S sid ="180" ssid = "10">The simple syntax described in Section 2.2 can, however, be easily extended to consider larg r contexts to the left and the right of boundaries; this extension would necessarily come at a corresponding cost in learning speed since the size of the rule space searched during training would grow accordingly.</S>
			<S sid ="181" ssid = "11">In the future, we plan to further investigate the ap­ plication of our rule-based algorithm to alphabetic languages.</S>
			<S sid ="182" ssid = "12">Acknowledgements This work would not have been possible without the assistance and encour­ agement of all the members of the MITRE Natural Language Group.</S>
			<S sid ="183" ssid = "13">This paper benefited greatly from discussions with and comments from Marc Vilain, Lynette Hirschman, Sam Bayer, and the anonymous rev1ewers.</S>
	</SECTION>
</PAPER>
