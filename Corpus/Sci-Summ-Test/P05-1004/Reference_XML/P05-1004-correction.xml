<PAPER>
<S sid="0">Supersense Tagging of Unknown Nouns using Semantic Similarity</S>
	<ABSTRACT>
		<S sid="1" ssid="1">The limited coverage of lexical-semantic resources is a significant problem for NLP systems which can be alleviated by automatically classifying the unknown words . </S>
		<S sid="2" ssid="2">Superdense tagging assigns unknown nouns one of 26 broad semantic categories used by lexicographers to organize their manual insertion into WORDNET . </S>
		<S sid="3" ssid="3">Carmita and Johnson ( 2003 ) present a tagger which uses synonym set glosses as annotated training examples . </S>
		<S sid="4" ssid="4">We describe an unsupervised approach , based on vector-space similarity , which does not require annotated examples but significantly outperforms their tagger . </S>
		<S sid="5" ssid="5">We also demonstrate the use of an extremely large shallow-parsed corpus for calculating vector-space semantic similarity . </S>
	</ABSTRACT>
	<SECTION number="1" title="Introduction">
			<S sid="6" ssid="6">Lexical-semantic resources have been applied successful to a wide range of Natural Language Processing ( NLP ) problems ranging from collocation extraction ( Pearce , 2001 ) and class-based smoothing ( Clark and Weir , 2002 ) , to text classification ( Baker and McCallum , 1998 ) and question answering ( Pasca and Harabagiu , 2001 ) . </S>
			<S sid="7" ssid="7">In particular , WORDNET ( Fellbaum , 1998 ) has significantly influenced research in NLP . </S>
			<S sid="8" ssid="8">Unfortunately , these resource are extremely time- consuming and labour-intensive to manually develop and maintain , requiring considerable linguistic and domain expertise . </S>
			<S sid="9" ssid="9">Lexicographers can not possibly keep pace with language evolution : sense distinctions are continually made and merged , words are coined or become obsolete , and technical terms migrate into the vernacular . </S>
			<S sid="10" ssid="10">Technical domains , such as medicine , require separate treatment since common words often take on special meanings , and a significant proportion of their vocabulary does not overlap with everyday vocabulary . </S>
			<S sid="11" ssid="11">Bur- gun and Bodenreider ( 2001 ) compared an alignment of WORDNET with the UMLS medical resource and found only a very small degree of overlap . </S>
			<S sid="12" ssid="12">Also , lexical- semantic resources suffer from : bias towards concepts and senses from particular topics . </S>
			<S sid="13" ssid="13">Some specialist topics are better covered in WORD- NET than others , e.g . dog has finer-grained distinctions than cat and worm although this does not reflect finer distinctions in reality ; limited coverage of infrequent words and senses . </S>
			<S sid="14" ssid="14">Carmita and Johnson ( 2003 ) found that common nouns missing from WORDNET 1.6 occurred every 8 sentences in the BLLIP corpus . </S>
			<S sid="15" ssid="15">By WORDNET 2.0 , coverage has improved but the problem of keeping up with language evolution remains difficult . </S>
			<S sid="16" ssid="16">consistency when classifying similar words into categories . </S>
			<S sid="17" ssid="17">For instance , the WORDNET lexicographer file for ionosphere ( location ) is different to exo- sphere and stratosphere ( object ) , two other layers of the earthiness atmosphere . </S>
			<S sid="18" ssid="18">These problems demonstrate the need for automatic or semiautomatic methods for the creation and maintenance of lexical-semantic resources . </S>
			<S sid="19" ssid="19">Broad semantic classification is currently used by lexicographers to or- anise the manual insertion of words into WORDNET , and is an experimental precursor to automatically inserting words directly into the WORDNET hierarchy . </S>
			<S sid="20" ssid="20">Carmita and Johnson ( 2003 ) call this superdense tagging and describe a multi-class perception tagger , which uses WORDNET&#226;&#128;&#153;s hierarchical structure to create many annotated training instances from the sunset glosses . </S>
			<S sid="21" ssid="21">This paper describes an unsupervised approach to superdense tagging that does not require annotated sentences . </S>
			<S sid="22" ssid="22">Instead , we use vector-space similarity to retrieve a number of synonyms for each unknown common noun . </S>
			<S sid="23" ssid="23">The super senses of these synonyms are then combined to determine the superdense . </S>
			<S sid="24" ssid="24">This approach significantly outperforms the multi-class perception on the same dataset based on WORDNET 1.6 and 1.7.1 . </S>
			<S sid="25" ssid="25">26 Proceedings of the 43rd Annual Meeting of the ACL , pages 26&#226;&#128;&#147;33 Ann Arbor , June 2005 . </S>
			<S sid="26" ssid="26">Qc 2005 Association for Computational Linguistics L E X -FI L E D E S C R I P T I O N act acts or actions animal animals artifact man-made objects attribute attributes of people and objects body body parts cognition cognitive processes and contents communication communicative processes and contents event natural events feeling feelings and emotions food foods and drinks group groupings of people or objects location spatial position motive goals object natural objects ( not man-made ) person people phenomenon natural phenomena plant plants possession possession and transfer of possession process natural processes quantity quantities and units of measure relation relations between people/things/ideas shape two and three dimensional shapes state stable states of affairs substance substances time time and temporal relations Table 1 : 25 noun lexicographer files in WORDNET </S>
	</SECTION>
	<SECTION number="2" title="Supersenses. ">
			<S sid="27" ssid="1">There are 26 broad semantic classes employed by lexicographers in the initial phase of inserting words into the WORDNET hierarchy , called lexicographer files ( lex- files ) . </S>
			<S sid="28" ssid="2">For the noun hierarchy , there are 25 lex-files and a file containing the top level nodes in the hierarchy called Tops . </S>
			<S sid="29" ssid="3">Other syntactic classes are also organized using lex-files : 15 for verbs , 3 for adjectives and 1 for adverbs . </S>
			<S sid="30" ssid="4">Lex-files form a set of coarse-grained sense distinctions within WORDNET . </S>
			<S sid="31" ssid="5">For example , company appears in the following lex-files in WORDNET 2.0 : group , which covers company in the social , commercial and troupe fine-grained senses ; and state , which covers companionship . </S>
			<S sid="32" ssid="6">The names and descriptions of the noun lex-files are shown in Table 1 . </S>
			<S sid="33" ssid="7">Some lex-files map directly to the top level nodes in the hierarchy , called unique beginners , while others are grouped together as homonyms of a unique beginner ( Fellbaum , 1998 , page 30 ) . </S>
			<S sid="34" ssid="8">For example , abstraction subsumes the lex-files attribute , quantity , relation , communication and time . </S>
			<S sid="35" ssid="9">Carmita and Johnson ( 2003 ) call the noun lex-file classes super senses . </S>
			<S sid="36" ssid="10">There are 11 unique beginners in the WORDNET noun hierarchy which could also be used as super senses . </S>
			<S sid="37" ssid="11">Carmita 2002 ) has produced a mini- WORDNET by manually reducing the WORDNET hierarchy to 106 broad categories . </S>
			<S sid="38" ssid="12">Carmita et al . </S>
			<S sid="39" ssid="13">( 2003 ) describe how the lex-files can be used as root nodes in a two level hierarchy with the WORDNET sunsets appear ing directly underneath . </S>
			<S sid="40" ssid="14">Other alternative sets of super senses can be created by an arbitrary cut through the WORDNET hierarchy near the top , or by using topics from a thesaurus such as Roget&#226;&#128;&#153;s ( Yarowsky , 1992 ) . </S>
			<S sid="41" ssid="15">These topic distinctions are coarser-grained than WORDNET senses , which have been criticized for being too difficult to distinguish even for experts . </S>
			<S sid="42" ssid="16">Carmita and Johnson ( 2003 ) believe that the key sense distinctions are still maintained by super senses . </S>
			<S sid="43" ssid="17">They suggest that superdense tagging is similar to named entity recognition , which also has a very small set of categories with similar granularity ( e.g . location and person ) for labeling predominantly unseen terms . </S>
			<S sid="44" ssid="18">Superdense tagging can provide automated or semi- automated assistance to lexicographers adding words to the WORDNET hierarchy . </S>
			<S sid="45" ssid="19">Once this task is solved successfully , it may be possible to insert words directly into the fine-grained distinctions of the hierarchy itself . </S>
			<S sid="46" ssid="20">Clearly , this is the ultimate goal , to be able to insert new terms into lexical resources , extending the structure where necessary . </S>
			<S sid="47" ssid="21">Superdense tagging is also interesting for many applications that use shallow semantics , e.g . information extraction and question answering . </S>
	</SECTION>
	<SECTION number="3" title="Previous Work. ">
			<S sid="48" ssid="1">A considerable amount of research addresses structurally and statistically manipulating the hierarchy of WORD- NET and the construction of new word nets using the concept structure from English . </S>
			<S sid="49" ssid="2">For lexical FreeNet , Beefer- man ( 1998 ) adds over 350 000 collocation pairs ( trigger pairs ) extracted from a 160 million word corpus of broadcast news using mutual information . </S>
			<S sid="50" ssid="3">The co-occurrence window was 500 words which was designed to approximate average document length . </S>
			<S sid="51" ssid="4">Caracalla and Charniak ( 1999 ) have explored determining noun specificity from raw text . </S>
			<S sid="52" ssid="5">They find that simple frequency counts are the most effective way of determining the parent-child ordering , achieving 83 % accuracy over types of vehicle , food and occupation . </S>
			<S sid="53" ssid="6">The other measure they found to be successful was the entropy of the conditional distribution of surrounding words given the noun . </S>
			<S sid="54" ssid="7">Specificity ordering is a necessary step for building a noun hierarchy . </S>
			<S sid="55" ssid="8">However , this approach clearly can not build a hierarchy alone . </S>
			<S sid="56" ssid="9">For instance , entity is less frequent than many concepts it subsumes . </S>
			<S sid="57" ssid="10">This suggests it will only be possible to add words to an existing abstract structure rather than create categories right up to the unique beginners . </S>
			<S sid="58" ssid="11">Hearst and Schu&#194;&#168; tze ( 1993 ) flatten WORDNET into 726 categories using an algorithm which attempts to minimize the variance in category size . </S>
			<S sid="59" ssid="12">These categories are used to label paragraphs with topics , effectively repeating Yarowsky&#226;&#128;&#153;s ( 1992 ) experiments using the their categories rather than Roget&#226;&#128;&#153;s thesaurus . </S>
			<S sid="60" ssid="13">Schu&#194;&#168; Tzeltal 1992 ) WordSpace system was used to add topical links , such as between ball , racket and game ( the tennis problem ) . </S>
			<S sid="61" ssid="14">Further , they also use the same vector-space techniques to label previously unseen words using the most common class assigned to the top 20 synonyms for that word . </S>
			<S sid="62" ssid="15">Windows 2003 ) uses a similar technique to insert words into the WORDNET hierarchy . </S>
			<S sid="63" ssid="16">He first extracts synonyms for the unknown word using vector-space similarity measures based on Latent Semantic Analysis and then searches for a location in the hierarchy nearest to these synonyms . </S>
			<S sid="64" ssid="17">This same technique as is used in our approach to superdense tagging . </S>
			<S sid="65" ssid="18">Carmita and Johnson ( 2003 ) implement a super- sense tagger based on the multi-class perception classifier ( Crammer and Singer , 2001 ) , which uses the standard collocation , spelling and syntactic features common in WSD and named entity recognition systems . </S>
			<S sid="66" ssid="19">Their insight was to use the WORDNET glosses as annotated training data and massively increase the number of training instances using the noun hierarchy . </S>
			<S sid="67" ssid="20">They developed an efficient algorithm for estimating the model over hierarchical training data . </S>
	</SECTION>
	<SECTION number="4" title="Evaluation. ">
			<S sid="68" ssid="1">Carmita and Johnson ( 2003 ) propose a very natural evaluation for superdense tagging : inserting the extra common nouns that have been added to a new version of WORDNET . </S>
			<S sid="69" ssid="2">They use the common nouns that have been added to WORDNET 1.7.1 since WORDNET 1.6 and compare this evaluation with a standard cross-validation approach that uses a small percentage of the words from their WORDNET 1.6 training set for evaluation . </S>
			<S sid="70" ssid="3">Their results suggest that the WORDNET 1.7.1 test set is significantly harder because of the large number of abstract category nouns , e.g . communication and cognition , that appear in the 1.7.1 data , which are difficult to classify . </S>
			<S sid="71" ssid="4">Our evaluation will use exactly the same test sets as Ciaramita and Johnson ( 2003 ) . </S>
			<S sid="72" ssid="5">The WORDNET 1.7.1 test set consists of 744 previously unseen nouns , the majority of which ( over 90 % ) have only one sense . </S>
			<S sid="73" ssid="6">The WORD- NET 1.6 test set consists of several cross-validation sets of 755 nouns randomly selected from the BLLIP training set used by Ciaramita and Johnson ( 2003 ) . </S>
			<S sid="74" ssid="7">They have kindly supplied us with the WORDNET 1.7.1 test set and one cross-validation run of the WORDNET 1.6 test set . </S>
			<S sid="75" ssid="8">Our development experiments are performed on the WORDNET 1.6 test set with one final run on the WORD- NET 1.7.1 test set . </S>
			<S sid="76" ssid="9">Some examples from the test sets are given in Table 2 with their super senses . </S>
	</SECTION>
	<SECTION number="5" title="Corpus. ">
			<S sid="77" ssid="1">We have developed a 2 billion word corpus , shallow- parsed with a statistical NLP pipeline , which is by far the Table 2 : Example nouns and their super senses largest NLP processed corpus described in published re search . </S>
			<S sid="78" ssid="2">The corpus consists of the British National Corpus ( BNC ) , the Reuters Corpus Volume 1 ( RCV1 ) , and most of the Linguistic Data Consortium&#226;&#128;&#153;s news text collected since 1987 : Continuous Speech Recognition III ( CSRIII ) ; North American News Text Corpus ( NANTC ) ; the NANTC Supplement ( NANTS ) ; and the ACQUAINT Corpus . </S>
			<S sid="79" ssid="3">The components and their sizes including punctuation are given in Table 3 . </S>
			<S sid="80" ssid="4">The LDC has recently released the English Gigaword corpus which includes most of the corpora listed above . </S>
			<S sid="81" ssid="5">C O R P U S D O C S . S E N T S . WO R D S B N C 4 1 2 4 6 . 2 M 1 1 4 M R C V1 8 0 6 7 9 1 8 . 1 M 2 0 7 M C S R -I I I 4 9 1 3 4 9 9 . 3 M 2 2 6 M NA N T C 9 3 0 3 6 7 2 3 . </S>
			<S sid="82" ssid="6">2 M 5 5 9 M NA N T S 9 4 2 1 6 7 2 5 . </S>
			<S sid="83" ssid="7">2 M 5 0 7 M AC QU A I N T 1 03 3 46 1 2 1 . </S>
			<S sid="84" ssid="8">3 M 4 9 1 M Table 3 : 2 billion word corpus statistics We have tokenized the text using the Grok OpenNLP tokenized Morton , 2002 ) and split the sentences using MXTerminator ( Reynar and Ratnaparkhi , 1997 ) . </S>
			<S sid="85" ssid="9">Any sentences less than 3 words or more than 100 words long were rejected , along with sentences containing more than 5 numbers or more than 4 brackets , to reduce noise . </S>
			<S sid="86" ssid="10">The rest of the pipeline is described in the next section . </S>
	</SECTION>
	<SECTION number="6" title="Semantic. ">
			<S sid="87" ssid="1">Similarity Vector-space models of similarity are based on the distributional hypothesis that similar words appear in similar contexts . </S>
			<S sid="88" ssid="2">This hypothesis suggests that semantic similarity can be measured by comparing the contexts each word appears in . </S>
			<S sid="89" ssid="3">In vector-space models each headword is represented by a vector of frequency counts recording the contexts that it appears in . </S>
			<S sid="90" ssid="4">The key parameters are the context extraction method and the similarity measure used to compare context vectors . </S>
			<S sid="91" ssid="5">Our approach to vector-space similarity is based on the SEXTANT system described in Grefenstette ( 1994 ) . </S>
			<S sid="92" ssid="6">Curran and Moens ( 2002b compared several context extraction methods and found that the shallow pipeline and grammatical relation extraction used in SEXTANT was both extremely fast and produced high-quality results . </S>
			<S sid="93" ssid="7">SEXTANT extracts relation tuples ( w , r , wt ) for each noun , where w is the headword , r is the relation type and wt is the other word . </S>
			<S sid="94" ssid="8">The efficiency of the SEXTANT approach makes the extraction of contextual information from over 2 billion words of raw text feasible . </S>
			<S sid="95" ssid="9">We describe the shallow pipeline in detail below . </S>
			<S sid="96" ssid="10">Curran and Moens ( 2002a compared several different similarity measures and found that Grefenstette&#226;&#128;&#153;s weighted JACCARD measure performed the best : R E L AT I O N D E S C R I P T I O N adj adjectival modifier relation obj object relation obj object relation nn pronounced modifier relation preppy head relation subj subjective relation Table 4 : Grammatical relations from SEXTANT against the CELEX lexical database ( Minnen et al. , 2001 ) &#226;&#128;&#147; and is very efficient , analysis over 80 000 words per second . </S>
			<S sid="97" ssid="11">morph often maintains sense distinctions between singular and plural nouns ; for instance : spectacles is not reduced to spectacle , but fails to do so in other cases : glasses is converted to glass . </S>
			<S sid="98" ssid="12">This inconsistent L min ( wgt ( w1 , &#226;&#136;&#151;r &#226;&#136;&#151;wI ) , wgt ( w2 , &#226;&#136;&#151;r &#226;&#136;&#151;wI ) ) L max ( wgt ( w1 , &#226;&#136;&#151;r &#226;&#136;&#151;wI ) , wgt ( w2 , &#226;&#136;&#151;r &#226;&#136;&#151;wI ) ) ( 1 ) ency is problematic when using morphological analysis to smooth vector-space models . </S>
			<S sid="99" ssid="13">However , morphological smoothing still produces better results in practice . </S>
			<S sid="100" ssid="14">where wgt ( w , r , wt ) is the weight function for relation ( w , r , wt ) . </S>
			<S sid="101" ssid="15">Curran and Moens ( 2002a introduced the TTEST weight function , which is used in collocation extraction . </S>
			<S sid="102" ssid="16">Here , the t-test compares the joint and product probability distributions of the headword and context : 6.3 Grammatical Relation Extraction . </S>
			<S sid="103" ssid="17">After the raw text has been POS tagged and chunked , the grammatical relation extraction algorithm is run over the chunks . </S>
			<S sid="104" ssid="18">This consists of five passes over each sentence that first identify noun and verb phrase heads and p ( w , r , wt ) &#226;&#136;&#146; p ( &#226;&#136;&#151; , r , wt ) p ( w , &#226;&#136;&#151; , &#226;&#136;&#151; ) p ( &#226;&#136;&#151; , r , wt ) p ( w , &#226;&#136;&#151; , &#226;&#136;&#151; ) ( 2 ) then collect grammatical relations between each common noun and its modifiers and verbs . </S>
			<S sid="105" ssid="19">A global list of grammatical relations generated by each pass is maintained where &#226;&#136;&#151; indicates a global sum over that element of the relation tuple . </S>
			<S sid="106" ssid="20">JACCARD and TTEST produced better quality synonyms than existing measures in the literature , so we use Curran and Moen&#226;&#128;&#153;s configuration for our super- sense tagging experiments . </S>
			<S sid="107" ssid="21">6.1 Part of Speech Tagging and Chunking . </S>
			<S sid="108" ssid="22">Our implementation of SEXTANT uses a maximum entropy POS tagger designed to be very efficient , tagging at around 100 000 words per second ( Curran and Clark , 2003 ) , trained on the entire Penn Treebank ( Marcus et al. , 1994 ) . </S>
			<S sid="109" ssid="23">The only similar performing tool is the Trigrams &#226;&#128;&#152;n&#226;&#128;&#153; Tags tagger ( Brants , 2000 ) which uses a much simpler statistical model . </S>
			<S sid="110" ssid="24">Our implementation uses a maximum entropy hunker which has similar feature types to Koeling ( 2000 ) and is also trained on chunks extracted from the entire Penn Treebank using the CoNLL 2000 script . </S>
			<S sid="111" ssid="25">Since the Penn Treebank separates PPs and conjunctions from NPs , they are concatenated to match Grefenstette&#226;&#128;&#153;s table-based results , i.e . the SEXTANT always prefers noun attachment . </S>
			<S sid="112" ssid="26">6.2 Morphological Analysis . </S>
			<S sid="113" ssid="27">Our implementation uses morph the Sussex morphological analysis Minnen et al. , 2001 ) , which is implemented using lex grammars for both affix splitting and generation . </S>
			<S sid="114" ssid="28">morph has wide coverage &#226;&#128;&#147; nearly 100 % across the passes . </S>
			<S sid="115" ssid="29">The global list is used to determine if a word is already attached . </S>
			<S sid="116" ssid="30">Once all five passes have been completed this association list contains all of the noun- modifier pairs which have been extracted from the sentence . </S>
			<S sid="117" ssid="31">The types of grammatical relation extracted by SEXTANT are shown in Table 4 . </S>
			<S sid="118" ssid="32">For relations between nouns ( nn and preppy , we also create inverse relations ( wt , rt , w ) representing the fact that wt can modify w. The 5 passes are described below . </S>
			<S sid="119" ssid="33">Pass 1 : Noun Pre-modifiers This pass scans NPs , left to right , creating adjectival ( adj ) and nominal ( nn ) pre-modifier grammatical relations ( GRs ) with every noun to the pre-modifier&#226;&#128;&#153;s right , up to a preposition or the phrase end . </S>
			<S sid="120" ssid="34">This corresponds to assuming right-branching noun compounds . </S>
			<S sid="121" ssid="35">Within each NP only the NP and PP heads remain unattached . </S>
			<S sid="122" ssid="36">Pass 2 : Noun Post-modifiers This pass scans NPs , right to left , creating post-modifier GRs between the unattached heads of NPs and PPs . </S>
			<S sid="123" ssid="37">If a preposition is encountered between the noun heads , a prepositional noun ( preppy GR is created , otherwise an prepositional noun ( nn ) GR is created . </S>
			<S sid="124" ssid="38">This corresponds to assuming right-branching PP attachment . </S>
			<S sid="125" ssid="39">After this phrase only the NP head remains unattached . </S>
			<S sid="126" ssid="40">Tense Determination The rightmost verb in each VP is considered the head . </S>
			<S sid="127" ssid="41">A VP is initially categorized as active . </S>
			<S sid="128" ssid="42">If the head verb is a form of be then the VP becomes attributive . </S>
			<S sid="129" ssid="43">Otherwise , the algorithm scans the VP from right to left : if an auxiliary verb form of be is encountered the VP becomes passive ; if a progressive verb ( except being ) is encountered the VP becomes active . </S>
			<S sid="130" ssid="44">Only the noun heads on either side of VPs remain unattached . </S>
			<S sid="131" ssid="45">The remaining three passes attach these to the verb heads as either subjects or objects depending on the voice of the VP . </S>
			<S sid="132" ssid="46">Pass 3 : Verb Pre-Attachment This pass scans sentences , right to left , associating the first NP head to the left of the VP with its head . </S>
			<S sid="133" ssid="47">If the VP is active , a subject ( subj ) relation is created ; otherwise , a direct object ( obj relation is created . </S>
			<S sid="134" ssid="48">For example , antigen is the subject of represent . </S>
			<S sid="135" ssid="49">Pass 4 : Verb Post-Attachment This pass scans sentences , left to right , associating the first NP or PP head to the right of the VP with its head . </S>
			<S sid="136" ssid="50">If the VP was classed as active and the phrase is an NP then a direct object ( obj relation is created . </S>
			<S sid="137" ssid="51">If the VP was classed as passive and the phrase is an NP then a subject ( subj ) relation is created . </S>
			<S sid="138" ssid="52">If the following phrase is a PP then an indirect object ( obj relation is created . </S>
			<S sid="139" ssid="53">The interaction between the head verb and the preposition determine whether the noun is an indirect object of a transitive verb or alternatively the head of a PP that is modifying the verb . </S>
			<S sid="140" ssid="54">However , SEXTANT always attaches the PP to the previous phrase . </S>
			<S sid="141" ssid="55">Pass 5 : Verb Progressive Participles The final step of the process is to attach progressive verbs to subjects and objects ( without concern for whether they are already attached ) . </S>
			<S sid="142" ssid="56">Progressive verbs can function as nouns , verbs and adjectives and once again a na&#194;&#168;&#196;&#177;ve approximation to the correct attachment is made . </S>
			<S sid="143" ssid="57">Any progressive verb which appears after a determiner or quantifier is considered a noun . </S>
			<S sid="144" ssid="58">Otherwise , it is a verb and passes 3 and 4 are repeated to attach subjects and objects . </S>
			<S sid="145" ssid="59">Finally , SEXTANT collapses the nn , preppy and adj relations together into a single broad noun-modifier grammatical relation . </S>
			<S sid="146" ssid="60">Defenestrate 1994 ) claims this extractor has a grammatical relation accuracy of 75 % after man ally checking 60 sentences . </S>
	</SECTION>
	<SECTION number="7" title="Approach. ">
			<S sid="147" ssid="1">Our approach uses voting across the known super senses of automatically extracted synonyms , to select a super- sense for the unknown nouns . </S>
			<S sid="148" ssid="2">This technique is similar to Hearst and Schu&#194;&#168; tze ( 1993 ) and Widdows ( 2003 ) . </S>
			<S sid="149" ssid="3">However , sometimes the unknown noun does not appear in our 2 billion word corpus , or at least does not appear frequently enough to provide sufficient contextual information to extract reliable synonyms . </S>
			<S sid="150" ssid="4">In these cases , our SUFFIX EXAMPLE SUPERSENSEness remoteness attribute -tion , -ment annulment act -ist , -man statesman person -ing , -ion bowling act -ity viscosity attribute -ics , -ism electronics cognition -ene , -ane , -ine arsine substance -er , -or , -ic , -ee , -an mariner person -gy entomology cognition Table 5 : Hand-coded rules for superdense guessing fall-back method is a simple hand-coded classifier which examines the unknown noun and makes a guess based on simple morphological analysis of the suffix . </S>
			<S sid="151" ssid="5">These rules were created by inspecting the suffixes of rare nouns in WORDNET 1.6 . </S>
			<S sid="152" ssid="6">The superdense guessing rules are given in Table 5 . </S>
			<S sid="153" ssid="7">If none of the rules match , then the default superdense artifact is assigned . </S>
			<S sid="154" ssid="8">The problem now becomes how to convert the ranked list of extracted synonyms for each unknown noun into a single superdense selection . </S>
			<S sid="155" ssid="9">Each extracted synonym votes for its one or more super senses that appear in WORDNET 1.6 . </S>
			<S sid="156" ssid="10">There are many parameters to consider : &#226;&#128;&#162; how many extracted synonyms to use ; &#226;&#128;&#162; how to weight each synonyms vote ; &#226;&#128;&#162; whether unreliable synonyms should be filtered out ; &#226;&#128;&#162; how to deal with polygamous synonyms . </S>
			<S sid="157" ssid="11">The experiments described below consider a range of options for these parameters . </S>
			<S sid="158" ssid="12">In fact , these experiments are so quick to run we have been able to exhaustively test many combinations of these parameters . </S>
			<S sid="159" ssid="13">We have experimented with up to 200 voting extracted synonyms . </S>
			<S sid="160" ssid="14">There are several ways to weight each synonyms contribution . </S>
			<S sid="161" ssid="15">The simplest approach would be to give each synonym the same weight . </S>
			<S sid="162" ssid="16">Another approach is to use the scores returned by the similarity system . </S>
			<S sid="163" ssid="17">Alternatively , the weights can use the ranking of the extracted synonyms . </S>
			<S sid="164" ssid="18">Again these options have been considered below . </S>
			<S sid="165" ssid="19">A related question is whether to use all of the extracted synonyms , or perhaps filter out synonyms for which a small amount of contextual information has been extracted , and so might be unreliable . </S>
			<S sid="166" ssid="20">The final issue is how to deal with polygamy . </S>
			<S sid="167" ssid="21">Does every superdense of each extracted synonym get the whole weight of that synonym or is it distributed evenly between the super senses like Resnik ( 1995 ) ? </S>
			<S sid="168" ssid="22">Another alternative is to only consider unambiguous synonyms with a single superdense in WORDNET . </S>
			<S sid="169" ssid="23">A disadvantage of this similarity approach is that it requires full synonym extraction , which compares the unknown word against a large number of words when , in S Y S T E M W N 1.6 W N 1.7 .1 Cia ra mit a an d Joh nso n bas eli ne 2 1 % 2 8 % Cia ra mit a an d Joh nso n per cep tro n 5 3 % 5 3 % Si mil art y bas ed res ult s 6 8 % 6 3 % Table 6 : Summary of superdense tagging accuracies fact , we want to calculate the similarity to a small number of super senses . </S>
			<S sid="170" ssid="24">This inefficiency could be reduced significantly if we consider only very high frequency words , but even this is still expensive . </S>
	</SECTION>
	<SECTION number="8" title="Results. ">
			<S sid="171" ssid="1">We have used the WORDNET 1.6 test set to experiment with different parameter settings and have kept the WORDNET 1.7.1 test set as a final comparison of best results with Ciaramita and Johnson ( 2003 ) . </S>
			<S sid="172" ssid="2">The experiments were performed by considering all possible configurations of the parameters described above . </S>
			<S sid="173" ssid="3">The following voting options were considered for each superdense of each extracted synonym : the initial voting weight for a superdense could either be a constant ( IDENTITY ) or the similarity score ( SCORE ) of the synonym . </S>
			<S sid="174" ssid="4">The initial weight could then be divided by the number of super senses to share out the weight ( SHARED ) . </S>
			<S sid="175" ssid="5">The weight could also be divided by the rank ( RANK ) to penalize further down the list . </S>
			<S sid="176" ssid="6">The best performance on the 1.6 test set was achieved with the SCORE voting , without sharing or ranking penalties . </S>
			<S sid="177" ssid="7">The extracted synonyms are filtered before contributing to the vote with their superdense s ) . </S>
			<S sid="178" ssid="8">This filtering involves checking that the synonyms frequency and number of contexts are large enough to ensure it is reliable . </S>
			<S sid="179" ssid="9">We have experimented with a wide range of cutoffs and the best performance on the 1.6 test set was achieved using a minimum cutoff of 5 for the synonyms frequency and the number of contexts it appears in . </S>
			<S sid="180" ssid="10">The next question is how many synonyms are considered . </S>
			<S sid="181" ssid="11">We considered using just the nearest unambiguous synonym , and the top 5 , 10 , 20 , 50 , 100 and 200 synonyms . </S>
			<S sid="182" ssid="12">All of the top performing configurations used 50 synonyms . </S>
			<S sid="183" ssid="13">We have also experimented with filtering out highly polygamous nouns by eliminating words with two , three or more synonyms . </S>
			<S sid="184" ssid="14">However , such a filter turned out to make little difference . </S>
			<S sid="185" ssid="15">Finally , we need to decide when to use the similarity measure and when to fall-back to the guessing rules . </S>
			<S sid="186" ssid="16">This is determined by looking at the frequency and number of attributes for the unknown word . </S>
			<S sid="187" ssid="17">Not surprisingly , the similarity system works better than the guessing rules if it has any information at all . </S>
			<S sid="188" ssid="18">The results are summarized in Table 6 . </S>
			<S sid="189" ssid="19">The accuracy of the best-performing configurations was 68 % on the Table 7 : Breakdown of results by superdense 1.6 test set with several other parameter combinations described above performing nearly as well . </S>
			<S sid="190" ssid="20">On the previously unused WORDNET 1.7.1 test set , our accuracy is 63 % using the best system on the WORDNET 1.6 test set . </S>
			<S sid="191" ssid="21">By optimizing the parameters on the 1.7.1 test set we can increase that to 64 % , indicating that we have not excessively over-tuned on the 1.6 test set . </S>
			<S sid="192" ssid="22">Our results significantly outperform Ciaramita and Johnson ( 2003 ) on both test sets even though our system is unsupervised . </S>
			<S sid="193" ssid="23">The large difference between our 1.6 and 1.7.1 test set accuracy demonstrates that the 1.7.1 set is much harder . </S>
			<S sid="194" ssid="24">Table 7 shows the breakdown in performance for each superdense . </S>
			<S sid="195" ssid="25">The columns show the number of instances of each superdense with the precision , recall and f-score measures as percentages . </S>
			<S sid="196" ssid="26">The most frequent super senses in both test sets were person , attribute and act . </S>
			<S sid="197" ssid="27">Of the frequent categories , person is the easiest superdense to get correct in both the 1.6 and 1.7.1 test sets , followed by food , artifact and substance . </S>
			<S sid="198" ssid="28">This is not surprising since these concrete words tend to have very fewer other senses , well constrained contexts and a relatively high frequency . </S>
			<S sid="199" ssid="29">These factors are conducive for extracting reliable synonyms . </S>
			<S sid="200" ssid="30">These results also support Ciaramita and Johnson&#226;&#128;&#153;s view that abstract concepts like communication , cognition and state are much harder . </S>
			<S sid="201" ssid="31">We would expect the location superdense to perform well since it is quite concrete , but unfortunately our synonym extraction system does not incorporate proper nouns , so many of these words were classified using the hand-built classifier . </S>
			<S sid="202" ssid="32">Also , in the data from Ciaramita and Johnson all of the words are in lower case , so no sensible guessing rules could help . </S>
	</SECTION>
	<SECTION number="9" title="Other Alternatives and Future Work. ">
			<S sid="203" ssid="1">An alternative approach worth exploring is to create context vectors for the superdense categories themselves and compare these against the words . </S>
			<S sid="204" ssid="2">This has the advantage of producing a much smaller number of vectors to compare against . </S>
			<S sid="205" ssid="3">In the current system , we must compare a word against the entire vocabulary ( over 500 000 headwords ) , which is much less efficient than a comparison against only 26 superdense context vectors . </S>
			<S sid="206" ssid="4">The question now becomes how to construct vectors of super senses . </S>
			<S sid="207" ssid="5">The most obvious solution is to sum the context vectors across the words which have each superdense . </S>
			<S sid="208" ssid="6">However , our early experiments suggest that this produces extremely large vectors which do not match well against the much smaller vectors of each unseen word . </S>
			<S sid="209" ssid="7">Also , the same questions arise in the construction of these vectors . </S>
			<S sid="210" ssid="8">How are words with multiple super senses handled ? </S>
			<S sid="211" ssid="9">Our preliminary experiments suggest that only combining the vectors for unambiguous words produces the best results . </S>
			<S sid="212" ssid="10">One solution would be to take the intersection between vectors across words for each superdense i.e . to find the common contexts that these words appear in ) . </S>
			<S sid="213" ssid="11">However , given the sparseness of the data this may not leave very large context vectors . </S>
			<S sid="214" ssid="12">A final solution would be to consider a large set of the canonical attributes ( Curran and Moens , 2002a to represent each superdense . </S>
			<S sid="215" ssid="13">Canonical attributes summarize the key contexts for each headword and are used to improve the efficiency of the similarity comparisons . </S>
			<S sid="216" ssid="14">There are a number of problems our system does not currently handle . </S>
			<S sid="217" ssid="15">Firstly , we do not include proper names in our similarity system which means that location entities can be very difficult to identify correctly ( as the results demonstrate ) . </S>
			<S sid="218" ssid="16">Further , our similarity system does not currently incorporate multi-word terms . </S>
			<S sid="219" ssid="17">We overcome this by using the synonyms of the last word in the multi-word term . </S>
			<S sid="220" ssid="18">However , there are 174 multi-word terms ( 23 % ) in the WORDNET 1.7.1 test set which we could probably tag more accurately with synonyms for the whole multi-word term . </S>
			<S sid="221" ssid="19">Finally , we plan to implement a supervised machine learner to replace the fall- back method , which currently has an accuracy of 37 % on the WORDNET 1.7.1 test set . </S>
			<S sid="222" ssid="20">We intend to extend our experiments beyond the Ciaramita and Johnson ( 2003 ) set to include previous and more recent versions of WORDNET to compare their difficulty , and also perform experiments over a range of corpus sizes to determine the impact of corpus size on the quality of results . </S>
			<S sid="223" ssid="21">We would like to move onto the more difficult task of insertion into the hierarchy itself and compare against the initial work by Widdows ( 2003 ) using latent semantic analysis . </S>
			<S sid="224" ssid="22">Here the issue of how to combine vectors is even more interesting since there is the additional structure of the WORDNET inheritance hierarchy and the small synonym sets that can be used for more fine-grained combination of vectors . </S>
	</SECTION>
	<SECTION number="10" title="Conclusion. ">
			<S sid="225" ssid="1">Our application of semantic similarity to superdense tagging follows earlier work by Hearst and Schu&#194;&#168; tze ( 1993 ) and Widdows ( 2003 ) . </S>
			<S sid="226" ssid="2">To classify a previously unseen common noun our approach extracts synonyms which vote using their super senses in WORDNET 1.6 . </S>
			<S sid="227" ssid="3">We have experimented with several parameters finding that the best configuration uses 50 extracted synonyms , filtered by frequency and number of contexts to increase their reliability . </S>
			<S sid="228" ssid="4">Each synonym votes for each of its super senses from WORDNET 1.6 using the similarity score from our synonym extractor . </S>
			<S sid="229" ssid="5">Using this approach we have significantly outperformed the supervised multi-class perception and Johnson ( 2003 ) . </S>
			<S sid="230" ssid="6">This paper also demonstrates the use of a very efficient shallow NLP pipeline to process a massive corpus . </S>
			<S sid="231" ssid="7">Such a corpus is needed to acquire reliable contextual information for the often very rare nouns we are attempting to superdense tag . </S>
			<S sid="232" ssid="8">This application of semantic similarity demonstrates that an unsupervised methods can outperform supervised methods for some NLP tasks if enough data is available . </S>
	</SECTION>
	<SECTION title="Acknowledgements">
			<S sid="233" ssid="9">We would like to thank Massi Ciaramita for supplying his original data for these experiments and answering our queries , and to Stephen Clark and the anonymous reviewers for their helpful feedback and corrections . </S>
			<S sid="234" ssid="10">This work has been supported by a Commonwealth scholarship , Sydney University Travelling Scholarship and Australian Research Council Discovery Project DP0453131 . </S>
	</SECTION>
</PAPER>