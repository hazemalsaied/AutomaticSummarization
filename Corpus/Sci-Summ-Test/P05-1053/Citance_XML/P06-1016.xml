<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper proposes a novel hierarchical learning strategy to deal with the data sparseness problem in relation extraction by modeling the commonality among related classes.</S>
		<S sid ="2" ssid = "2">For each class in the hierarchy either manually predefined or automatically clustered, a linear dis- criminative function is determined in a top- down way using a perceptron algorithm with the lower-level weight vector derived from the upper-level weight vector.</S>
		<S sid ="3" ssid = "3">As the upper-level class normally has much more positive training examples than the lower-level class, the corresponding linear discriminative function can be determined more reliably.</S>
		<S sid ="4" ssid = "4">The upper- level discriminative function then can effectively guide the discriminative function learning in the lower-level, which otherwise might suffer from limited training data.</S>
		<S sid ="5" ssid = "5">Evaluation on the ACE RDC 2003 corpus shows that the hierarchical strategy much improves the performance by 5.6 and 5.1 in F-measure on least- and medium- frequent relations respectively.</S>
		<S sid ="6" ssid = "6">It also shows that our system outperforms the previous best-reported system by 2.7 in F-measure on the 24 subtypes using the same feature set.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="7" ssid = "7">With the dramatic increase in the amount of textual information available in digital archives and the WWW, there has been growing interest in techniques for automatically extracting information from text.</S>
			<S sid ="8" ssid = "8">Information Extraction (IE) is such a technology that IE systems are expected to identify relevant information (usually of predefined types) from text documents in a certain domain and put them in a structured format.</S>
			<S sid ="9" ssid = "9">According to the scope of the ACE program (ACE 20002005), current research in IE has three main objectives: Entity Detection and Tracking (EDT), Relation Detection and Characterization (RDC), and Event Detection and Characterization (EDC).</S>
			<S sid ="10" ssid = "10">This paper will focus on the ACE RDC task, which detects and classifies various semantic relations between two entities.</S>
			<S sid ="11" ssid = "11">For example, we want to determine whether a person is at a location, based on the evidence in the context.</S>
			<S sid ="12" ssid = "12">Extraction of semantic relationships between entities can be very useful for applications such as question answering, e.g. to answer the query “Who is the president of the United States?”.</S>
			<S sid ="13" ssid = "13">One major challenge in relation extraction is due to the data sparseness problem (Zhou et al 2005).</S>
			<S sid ="14" ssid = "14">As the largest annotated corpus in relation extraction, the ACE RDC 2003 corpus shows that different subtypes/types of relations are much unevenly distributed and a few relation subtypes, such as the subtype “Founder” under the type “ROLE”, suffers from a small amount of annotated data.</S>
			<S sid ="15" ssid = "15">Further experimentation in this paper (please see Figure 2) shows that most relation subtypes suffer from the lack of the training data and fail to achieve steady performance given the current corpus size.</S>
			<S sid ="16" ssid = "16">Given the relative large size of this corpus, it will be time-consuming and very expensive to further expand the corpus with a reasonable gain in performance.</S>
			<S sid ="17" ssid = "17">Even if we can somehow expend the corpus and achieve steady performance on major relation subtypes, it will be still far beyond practice for those minor sub- types given the much unevenly distribution among different relation subtypes.</S>
			<S sid ="18" ssid = "18">While various machine learning approaches, such as generative modeling (Miller et al 2000), maximum entropy (Kambhatla 2004) and support vector machines (Zhao and Grisman 2005; Zhou et al 2005), have been applied in the relation extraction task, no explicit learning strategy is proposed to deal with the inherent data sparseness problem caused by the much uneven distribution among different relations.</S>
			<S sid ="19" ssid = "19">This paper proposes a novel hierarchical learning strategy to deal with the data sparseness problem by modeling the commonality among related classes.</S>
			<S sid ="20" ssid = "20">Through organizing various classes hierarchically, a linear discriminative function is determined for each class in a top- down way using a perceptron algorithm with the lower-level weight vector derived from the upper-level weight vector.</S>
			<S sid ="21" ssid = "21">Evaluation on the ACE RDC 2003 corpus shows that the hierarchical 121 Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 121–128, Sydney, July 2006.</S>
			<S sid ="22" ssid = "22">Qc 2006 Association for Computational Linguistics strategy achieves much better performance than the flat strategy on least- and medium-frequent relations.</S>
			<S sid ="23" ssid = "23">It also shows that our system based on the hierarchical strategy outperforms the previous best-reported system.</S>
			<S sid ="24" ssid = "24">The rest of this paper is organized as follows.</S>
			<S sid ="25" ssid = "25">Section 2 presents related work.</S>
			<S sid ="26" ssid = "26">Section 3 describes the hierarchical learning strategy using the perceptron algorithm.</S>
			<S sid ="27" ssid = "27">Finally, we present experimentation in Section 4 and conclude this paper in Section 5.</S>
	</SECTION>
	<SECTION title="Related Work. " number = "2">
			<S sid ="28" ssid = "1">The relation extraction task was formulated at MUC7(1998).</S>
			<S sid ="29" ssid = "2">With the increasing popularity of ACE, this task is starting to attract more and more researchers within the natural language processing and machine learning communities.</S>
			<S sid ="30" ssid = "3">Typical works include Miller et al (2000), Zelenko et al (2003), Culotta and Sorensen (2004), Bunescu and Mooney (2005a), Bunescu and Mooney (2005b), Zhang et al (2005), Roth and Yih (2002), Kambhatla (2004), Zhao and Grisman (2005) and Zhou et al (2005).</S>
			<S sid ="31" ssid = "4">Miller et al (2000) augmented syntactic full parse trees with semantic information of entities and relations, and built generative models to integrate various tasks such as POS tagging, named entity recognition, template element extraction and relation extraction.</S>
			<S sid ="32" ssid = "5">The problem is that such integration may impose big challenges, e.g. the need of a large annotated corpus.</S>
			<S sid ="33" ssid = "6">To overcome the data sparseness problem, generative models typically applied some smoothing techniques to integrate different scales of contexts in parameter estimation, e.g. the back-off approach in Miller et al (2000).</S>
			<S sid ="34" ssid = "7">Zelenko et al (2003) proposed extracting relations by computing kernel functions between parse trees.</S>
			<S sid ="35" ssid = "8">Culotta and Sorensen (2004) extended this work to estimate kernel functions between augmented dependency trees and achieved F- measure of 45.8 on the 5 relation types in the ACE RDC 2003 corpus1.</S>
			<S sid ="36" ssid = "9">Bunescu and Mooney (2005a) proposed a shortest path dependency kernel.</S>
			<S sid ="37" ssid = "10">They argued that the information to model a relationship between two entities can be typically captured by the shortest path between them in the dependency graph.</S>
			<S sid ="38" ssid = "11">It achieved the F plied it in protein interaction and ACE relation extraction tasks.</S>
			<S sid ="39" ssid = "12">Zhang et al (2005) adopted clustering algorithms in unsupervised relation extraction using tree kernels.</S>
			<S sid ="40" ssid = "13">To overcome the data sparseness problem, various scales of sub-trees are applied in the tree kernel computation.</S>
			<S sid ="41" ssid = "14">Although tree kernel-based approaches are able to explore the huge implicit feature space without much feature engineering, further research work is necessary to make them effective and efficient.</S>
			<S sid ="42" ssid = "15">Comparably, feature-based approaches achieved much success recently.</S>
			<S sid ="43" ssid = "16">Roth and Yih (2002) used the SNoW classifier to incorporate various features such as word, part-of-speech and semantic information from WordNet, and proposed a probabilistic reasoning approach to integrate named entity recognition and relation extraction.</S>
			<S sid ="44" ssid = "17">Kambhatla (2004) employed maximum entropy models with features derived from word, entity type, mention level, overlap, dependency tree, parse tree and achieved F- measure of 52.8 on the 24 relation subtypes in the ACE RDC 2003 corpus.</S>
			<S sid ="45" ssid = "18">Zhao and Grisman (2005) 2 combined various kinds of knowledge from tokenization, sentence parsing and deep dependency analysis through support vector machines and achieved F-measure of 70.1 on the 7 relation types of the ACE RDC 2004 corpus3 . Zhou et al (2005) further systematically explored diverse lexical, syntactic and semantic features through support vector machines and achieved F- measure of 68.1 and 55.5 on the 5 relation types and the 24 relation subtypes in the ACE RDC 2003 corpus respectively.</S>
			<S sid ="46" ssid = "19">To overcome the data sparseness problem, feature-based approaches normally incorporate various scales of contextsinto the feature vector extensively.</S>
			<S sid ="47" ssid = "20">These ap proaches then depend on adopted learning algorithms to weight and combine each feature effectively.</S>
			<S sid ="48" ssid = "21">For example, an exponential model and a linear model are applied in the maximum entropy models and support vector machines respectively to combine each feature via the learned weight vector.</S>
			<S sid ="49" ssid = "22">In summary, although various approaches have been employed in relation extraction, they implicitly attack the data sparseness problem by using features of different contexts in feature- based approaches or including different sub measure of 52.5 on the 5 relation types in the ACE RDC 2003 corpus.</S>
			<S sid ="50" ssid = "23">Bunescu and Mooney(2005b) proposed a subsequence kernel and ap 1 The ACE RDC 2003 corpus defines 5/24 relation.</S>
			<S sid ="51" ssid = "24">types/subtypes between 4 entity types.</S>
			<S sid ="52" ssid = "25">2 Here, we classify this paper into feature-based ap-.</S>
			<S sid ="53" ssid = "26">proaches since the feature space in the kernels of Zhao and Grisman (2005) can be easily represented by an explicit feature vector.</S>
	</SECTION>
	<SECTION title="The ACE RDC 2004 corpus defines 7/27 relation. " number = "3">
			<S sid ="54" ssid = "1">types/subtypes between 7 entity types.</S>
			<S sid ="55" ssid = "2">structures in kernel-based approaches.</S>
			<S sid ="56" ssid = "3">Until now, there are no explicit ways to capture the hierarchical topology in relation extraction.</S>
			<S sid ="57" ssid = "4">Currently, all the current approaches apply the flat learning 3.1 Perceptron Algorithm.</S>
			<S sid ="58" ssid = "5">Input: the initial weight vector w , the training example sequence strategy which equally treats training examples ( xt , yt ) ∈ X × Y , t = 1,2...,T and the number of in different relations independently and ignore the commonality among different relations.</S>
			<S sid ="59" ssid = "6">This paper proposes a novel hierarchical learning the maximal iterations N (e.g. 10 in this paper) of the training sequence4 Output: the weight vector w for the linear strategy to resolve this problem by considering the relatedness among different relations and discriminative function BEGIN w1 = w f = w ⋅ xcapturing the commonality among related rela tions.</S>
			<S sid ="60" ssid = "7">By doing so, the data sparseness problem REPEAT for t=1,2,…,T*N 1.</S>
			<S sid ="61" ssid = "8">Receive the instance x ∈ Rn.</S>
			<S sid ="62" ssid = "9">can be well dealt with and much better performance can be achieved, especially for those rela 2.</S>
			<S sid ="63" ssid = "10">Compute the output ot.</S>
			<S sid ="64" ssid = "11">∧ = wt ⋅ xt tions with small amounts of annotated examples.</S>
			<S sid ="65" ssid = "12">3.</S>
			<S sid ="66" ssid = "13">Give the prediction.</S>
			<S sid ="67" ssid = "14">y t = sign(ot )</S>
	</SECTION>
	<SECTION title="Receive the desired label. " number = "4">
			<S sid ="68" ssid = "1">yt ∈{−1,+1} 3 Hierarchical Learning Strategy.</S>
	</SECTION>
	<SECTION title="Update the hypothesis according to. " number = "5">
			<S sid ="69" ssid = "1">Traditional classifier learning approaches apply wt +1 = wt + δt yt xt where δt = 0 if the margin of wt (1) at the the flat learning strategy.</S>
			<S sid ="70" ssid = "2">That is, they equally given example ( xt , yt ) yt wt ⋅ xt &gt; 0 treat training examples in different classes independently and ignore the commonality among related classes.</S>
			<S sid ="71" ssid = "3">The flat strategy will not and δt = 1 otherwise END REPEAT N cause any problem when there are a large amount of training examples for each class, since, in this Return w = END BEGIN ∑ wT *i +1 / 5 i = N −4 case, a classifier learning approach can always learn a nearly optimal discriminative function for each class against the remaining classes.</S>
			<S sid ="72" ssid = "4">However, such flat strategy may cause big problems Figure 1: the perceptron algorithm This section first deals with binary classification using linear classifiers.</S>
			<S sid ="73" ssid = "5">Assume an instance space when there is only a small amount of training X = Rn and a binary label space Y = {−1,+1} . examples for some of the classes.</S>
			<S sid ="74" ssid = "6">In this case, a With any weight vector w ∈ Rn and a given classifier learning approach may fail to learn areliable (or nearly optimal) discriminative func instance x ∈ R n , we associate a linear classifier 5 hw with a linear discriminative function tion for a class with a small amount of trainingexamples, and, as a result, may significantly af f ( x) = w ⋅ x by hw ( x) = sign(w ⋅ x) , where fect the performance of the class or even the sign(w ⋅ x) = −1 if w ⋅ x &lt; 0 and sign(w ⋅ x) = +1 overall performance.</S>
			<S sid ="75" ssid = "7">otherwise.</S>
			<S sid ="76" ssid = "8">Here, the margin of w at ( xt , yt ) is To overcome the inherent problems in the defined as yt w ⋅ xt . Then if the margin is positive, flat strategy, this paper proposes a hierarchical learning strategy which explores the inherent we have a correct prediction with hw ( x) = yt , and if the margin is negative, we have an error with commonality among related classes through a hw ( x) ≠ yt . Therefore, given a sequence of.</S>
			<S sid ="77" ssid = "9">class hierarchy.</S>
			<S sid ="78" ssid = "10">In this way, the training exam training examples ( xt , yt ) ∈ X × Y , t = 1,2...,T , ples of related classes can help in learning a reliable discriminative function for a class with only a small amount of training examples.</S>
			<S sid ="79" ssid = "11">To reduce computation time and memory requirements, we will only consider linear classifiers and apply the simple and widely-used perceptron algorithm for this purpose with more options open for future research.</S>
			<S sid ="80" ssid = "12">In the following, we will first introduce the perceptron algorithm in linear classifier learning, followed by the hierarchical learning strategy using the perceptron algorithm.</S>
			<S sid ="81" ssid = "13">Finally, we will consider several ways in building the linear classifier learning attemps to find a weight vector w that achieves a positive margin on as many examples as possible.</S>
			<S sid ="82" ssid = "14">4 The training example sequence is feed N times for.</S>
			<S sid ="83" ssid = "15">better performance.</S>
			<S sid ="84" ssid = "16">Moreover, this number can control the maximal affect a training example can pose.</S>
			<S sid ="85" ssid = "17">This is similar to the regulation parameter C in SVM, which affects the trade-off between complexity and proportion of non-separable examples.</S>
			<S sid ="86" ssid = "18">As a result, it can be used to control over-fitting and robustness.</S>
			<S sid ="87" ssid = "19">class hierarchy.</S>
			<S sid ="88" ssid = "20">5 (w ⋅ x) denotes the dot product of the weight vector w ∈ Rn and a given instance x ∈ R n . The well-known perceptron algorithm, as shown in Figure 1, belongs to online learning of linear classifiers, where the learning algorithm represents its t -th hyposthesis by a weight vector which builds K classifiers so as to separate one class from all others.</S>
			<S sid ="89" ssid = "21">However, the outputs for the perceptron algorithms of different classes may be not directly comparable since any wt ∈ R . At trial.</S>
			<S sid ="90" ssid = "22">t , an online algorith m receives positive scalar multiple of the weight vector will an instance ∧ x ∈ Rn , makes its prediction not affect the actual prediction of a perceptron algorithm.</S>
			<S sid ="91" ssid = "23">For comparabilit y, we map the perceptron algorithm output into the probability = sign(wt ⋅ xt ) and receives the desired label by using an additional sigmoid model: yt ∈{−1,+1} . What distinguishes different online 1 algorithms is how they update wt into wt +1 based p( y = 1 | f ) = 1 + exp( Af + B) (2) on the example ( xt , yt ) received at trial t . In where f = w ⋅ x is the output of a perceptron particular, the perceptron algorithm updates the hypothesis by adding a scalar multiple of the instance, as shown in Equation 1 of Figure 1, when there is an error.</S>
			<S sid ="92" ssid = "24">Normally, the tradictional perceptron algorithm initializes the hypothesis as the zero vector w1 = 0 . This is usually the most natural choice, lacking any other preference.</S>
			<S sid ="93" ssid = "25">Smoothing In order to further improve the performance, we iteratively feed the training examples for a possi ble better discriminative function.</S>
			<S sid ="94" ssid = "26">In this paper, we have set the maximal iteration number to 10 for both efficiency and stable performance and the final weight vector in the discriminative function is averaged over those of the discriminative functions in the last few iterations (e.g. 5 in this paper).</S>
			<S sid ="95" ssid = "27">Bagging One more problem with any online classifier learning algorithm, including the perceptron al gorithm, is that the learned discriminative function somewhat depends on the feeding order of the training examples.</S>
			<S sid ="96" ssid = "28">In order to eliminate such dependence and further improve the perform ance, an ensemble technique, called bagging (Breiman 1996), is applied in this paper.</S>
			<S sid ="97" ssid = "29">In bagging, the bootstrap technique is first used to build M (e.g. 10 in this paper) replicate sample sets by randomly re-sampling with replacement from the given training set repeatedly.</S>
			<S sid ="98" ssid = "30">Then, each training sample set is used to train a certain discriminative function.</S>
			<S sid ="99" ssid = "31">Finally, the final weight vector in the discriminative function is averaged over those of the M discriminative functions in the ensemble.</S>
			<S sid ="100" ssid = "32">Multi-Class Classification Basically, the perceptron algorithm is only for binary classification.</S>
			<S sid ="101" ssid = "33">Therefore, we must extend the perceptron algorithms to multi-class classification, such as the ACE RDC task.</S>
			<S sid ="102" ssid = "34">For efficiency, we apply the one vs. others strategy, algorithm and the coefficients A &amp; B are to be trained using the model trust alorithm as described in Platt (1999).</S>
			<S sid ="103" ssid = "35">The final decision of an instance in multi-class classification is determined by the class which has the maximal probability from the corresponding perceptron algorithm.</S>
			<S sid ="104" ssid = "36">3.2 Hierarchical Learning Strategy using the.</S>
			<S sid ="105" ssid = "37">Perceptron Algorithm Assume we have a class hierarchy for a task, e.g. the one in the ACE RDC 2003 corpus as shown in Table 1 of Section 4.1.</S>
			<S sid ="106" ssid = "38">The hierarchical learning strategy explores the inherent commonality among related classes in a top-down way.</S>
			<S sid ="107" ssid = "39">For each class in the hierarchy, a linear discriminative function is determined in a top-down way with the lower-level weight vector derived from the upper-level weight vector iteratively.</S>
			<S sid ="108" ssid = "40">This is done by initializing the weight vector in training the linear discriminative function for the lower- level class as that of the upper-level class.</S>
			<S sid ="109" ssid = "41">That is, the lower-level discriminative function has the preference toward the discriminative function of its upper-level class.</S>
			<S sid ="110" ssid = "42">For an example, let’s look at the training of the “Located” relation subtype in the class hierarchy as shown in Table 1: 1) Train the weight vector of the linear discriminative function for the “YES” relation vs. the “NON” relation with the weight vector initialized as the zero vector.</S>
			<S sid ="111" ssid = "43">2) Train the weight vector of the linear discriminative function for the “AT” relation type vs. all the remaining relation types (including the “NON” relation) with the weight vector initialized as the weight vector of the linear discriminative function for the “YES” relation vs. the “NON” relation.</S>
			<S sid ="112" ssid = "44">3) Train the weight vector of the linear discriminative function for the “Located” relation subtype vs. all the remaining relation subtypes under all the relation types (including the “NON” relation) with the weight vector initialized as the weight vector of the linear discriminative function for the “AT” relation type vs. all the remaining relation types.</S>
			<S sid ="113" ssid = "45">4) Return the above trained weight vector as the discriminatie function for the “Located” relation subtype.</S>
			<S sid ="114" ssid = "46">In this way, the training examples in different classes are not treated independently any more, and the commonality among related classes can be captured via the hierarchical learning strategy.</S>
			<S sid ="115" ssid = "47">The intuition behind this strategy is that the upper-level class normally has more positive training examples than the lower-level class so that the corresponding linear discriminative function can be determined more reliably.</S>
			<S sid ="116" ssid = "48">In this way, the training examples of related classes can help in learning a reliable discriminative function for a class with only a small amount of training examples in a top-down way and thus alleviate its data sparseness problem.</S>
			<S sid ="117" ssid = "49">3.3 Building the Class Hierarchy.</S>
			<S sid ="118" ssid = "50">We have just described the hierarchical learning strategy using a given class hierarchy.</S>
			<S sid ="119" ssid = "51">Normally, a rough class hierarchy can be given manually according to human intuition, such as the one in the ACE RDC 2003 corpus.</S>
			<S sid ="120" ssid = "52">In order to explore more commonality among sibling classes, we make use of binary hierarchical clustering for sibling classes at both lowest and all levels.</S>
			<S sid ="121" ssid = "53">This can be done by first using the flat learning strategy to learn the discriminative functions for individual classes and then iteratively combining the two most related classes using the cosine similarity function between their weight vectors in a bottom-up way.</S>
			<S sid ="122" ssid = "54">The intuition is that related classes should have similar hyper-planes to separate from other classes and thus have similar weight vectors.</S>
			<S sid ="123" ssid = "55">• Lowest-level hybrid: Binary hierarchical clustering is only done at the lowest level while keeping the upper-level class hierarchy.</S>
			<S sid ="124" ssid = "56">That is, only sibling classes at the lowest level are hierarchically clustered.• All-level hybrid: Binary hierarchical cluster ing is done at all levels in a bottom-up way.</S>
			<S sid ="125" ssid = "57">That is, sibling classes at the lowest level are hierarchically clustered first and then sibling classes at the upper-level.</S>
			<S sid ="126" ssid = "58">In this way, the bi nary class hierarchy can be built iteratively in a bottom-up way.</S>
			<S sid ="127" ssid = "59">4 Experimentation This paper uses the ACE RDC 2003 corpus provided by LDC to train and evaluate the hierarchical learning strategy.</S>
			<S sid ="128" ssid = "60">Same as Zhou et al (2005), we only model explicit relations and explicitly model the argument order of the two mentions involved.</S>
			<S sid ="129" ssid = "61">4.1 Experimental.</S>
			<S sid ="130" ssid = "62">Setting Type Subtype Freq Bin Type AT Based-In 347 Medium Located 2126 Large Residence 308 Medium Other 6 Small ROLE Affiliate-Partner 204 Medium Citizen-Of 328 Medium Client 144 Small Founder 26 Small General-Staff 1331 Large Management 1242 Large Member 1091 Large Owner 232 Medium Other 158 Small Table 1: Statistics of relation types and subtypes in the training data of the ACE RDC 2003 corpus (Note: According to frequency, all the subtypes are divided into three bins: large/ middle/ small, with 400 as the lower threshold for the large bin and 200 as the upper threshold for the small bin).</S>
			<S sid ="131" ssid = "63">The training data consists of 674 documents (~300k words) with 9683 relation examples while the held-out testing data consists of 97 documents (~50k words) with 1386 relation examples.</S>
			<S sid ="132" ssid = "64">All the experiments are done five times on the 24 relation subtypes in the ACE corpus, except otherwise specified, with the final performance averaged using the same re-sampling with replacement strategy as the one in the bagging technique.</S>
			<S sid ="133" ssid = "65">Table 1 lists various types and subtypes of relations for the ACE RDC 2003 corpus, along with their occurrence frequency in the training data.</S>
			<S sid ="134" ssid = "66">It shows that this corpus suffers from a small amount of annotated data for a few subtypes such as the subtype “Founder” under the type “ROLE”.</S>
			<S sid ="135" ssid = "67">For comparison, we also adopt the same feature set as Zhou et al (2005): word, entity type, mention level, overlap, base phrase chunking, dependency tree, parse tree and semantic information.</S>
			<S sid ="136" ssid = "68">4.2 Experimental Results.</S>
			<S sid ="137" ssid = "69">Table 2 shows the performance of the hierarchical learning strategy using the existing class hierarchy in the given ACE corpus and its comparison with the flat learning strategy, using the perceptron algorithm.</S>
			<S sid ="138" ssid = "70">It shows that the pure hierarchical strategy outperforms the pure flat strategy by 1.5 (56.9 vs. 55.4) in F-measure.</S>
			<S sid ="139" ssid = "71">It also shows that further smoothing and bagging improve the performance of the hierarchical and flat strategies by 0.6 and 0.9 in F-measure respectively.</S>
			<S sid ="140" ssid = "72">As a result, the final hierarchical strategy achieves F-measure of 57.8 and outper forms the final flat strategy by 1.8 in F-measure.</S>
			<S sid ="141" ssid = "73">Strategies P R F hierarchical learning strategy when a rough class hierarchy is not available and difficult to determine manually, we also experiment using entirely automatically built class hierarchy (using the traditional binary hierarchical clustering algorithm and the cosine similarity measurement) without considering the existing class hierarchy.</S>
			<S sid ="142" ssid = "74">Table 3 shows that using automatically built class hierarchy performs comparably with using only the existing one.</S>
			<S sid ="143" ssid = "75">With the major goal of resolving the data sparseness problem for the classes with a small amount of training examples, Table 4 compares the best-performed hierarchical and flat learning strategies on the relation subtypes of different training data sizes.</S>
			<S sid ="144" ssid = "76">Here, we divide various relation subtypes into three bins: large/middle/small, according to their available training data sizes.</S>
			<S sid ="145" ssid = "77">For the ACE RDC 2003 corpus, we use 400 as Flat+Both 59.1 53.2 56.0 Hierarchical 61.9 52.6 56.9 Hierarchical+Smoothing 62.7 53.1 57.5 Hierarchical+Bagging 62.9 53.1 57.6 Hierarchical+Both 63.0 53.4 57.8 Table 2: Performance of the hierarchical learning strategy using the existing class hierarchy and its comparison with the flat learning strategy Class Hierarchies P R F All-level Hybrid 63.6 53.6 58.2 Table 3: Performance of the hierarchical learning strategy using different class hierarchies Table 3 compares the performance of the hierarchical learning strategy using different class hierarchies.</S>
			<S sid ="146" ssid = "78">It shows that, the lowest-level hybrid approach, which only automatically updates the existing class hierarchy at the lowest level, improves the performance by 0.3 in F-measure while further updating the class hierarchy at upper levels in the all-level hybrid approach only has very slight effect.</S>
			<S sid ="147" ssid = "79">This is largely due to the fact that the major data sparseness problem occurs at the lowest level, i.e. the relation subtype level in the ACE corpus.</S>
			<S sid ="148" ssid = "80">As a result, the final hierarchical learning strategy using the class hierarchy built with the all-level hybrid approach achieves F-measure of 58.2 in F-measure, which outperforms the final flat strategy by 2.2 in F- measure.</S>
			<S sid ="149" ssid = "81">In order to justify the usefulness of our relation subtypes, respectively.</S>
			<S sid ="150" ssid = "82">Please see Table 1 for details.</S>
			<S sid ="151" ssid = "83">Table 4 shows that the hierarchical strategy outperforms the flat strategy by 1.0/5.1/5.6 in F-measure on the large/middle/small bin respectively.</S>
			<S sid ="152" ssid = "84">This indicates that the hierarchical strategy performs much better than the flat strategy for those classes with a small or medium amount of annotated examples although the hierarchical strategy only performs slightly better by 1.0 and 2.2 in F- measure than the flat strategy on those classes with a large size of annotated corpus and on all classes as a whole respectively.</S>
			<S sid ="153" ssid = "85">This suggests that the proposed hierarchical strategy can well deal with the data sparseness problem in the ACE RDC 2003 corpus.</S>
			<S sid ="154" ssid = "86">An interesting question is about the similarity between the linear discriminative functions learned using the hierarchical and flat learning strategies.</S>
			<S sid ="155" ssid = "87">Table 4 compares the cosine similarities between the weight vectors of the linear dis- criminative functions using the two strategies for different bins, weighted by the training data sizes tion subtype in the ACE RC 2003 corpus has training examples in between 400 and 900.</S>
			<S sid ="156" ssid = "88">7 A few minor relation subtypes only have very few examples in the testing set.</S>
			<S sid ="157" ssid = "89">The reason to choose this threshold is to guarantee a reasonable number of testing examples in the small bin.</S>
			<S sid ="158" ssid = "90">For the ACE RC 2003 corpus, using 200 as the upper threshold will fill the small bin with about 100 testing examples while using 100 will include too few testing examples for reasonable performance evaluation.</S>
			<S sid ="159" ssid = "91">of different relation subtypes.</S>
			<S sid ="160" ssid = "92">It shows that the linear discriminative functions learned using the two strategies are very similar (with the cosine similarity 0.98) for the relation subtypes belonging to the large bin while the linear discriminative functions learned using the two strategies are not for the relation subtypes belonging to the medium/small bin with the cosine similarity 0.92/0.81 respectively.</S>
			<S sid ="161" ssid = "93">This means that the use of the hierarchical strategy over the flat strategyonly has very slight change on the linear dis criminative functions for those classes with a large amount of annotated examples while its effect on those with a small amount of annotated examples is obvious.</S>
			<S sid ="162" ssid = "94">This contributes to and explains (the degree of) the performance difference between the two strategies on the different training data sizes as shown in Table 4.</S>
			<S sid ="163" ssid = "95">Due to the difficulty of building a large annotated corpus, another interesting question is about the learning curve of the hierarchical learning strategy and its comparison with the flat learning strategy.</S>
			<S sid ="164" ssid = "96">Figure 2 shows the effect of different training data sizes for some major relation subtypes while keeping all the training examples of remaining relation subtypes.</S>
			<S sid ="165" ssid = "97">It shows that the hierarchical strategy performs much better than the flat strategy when only a small amount of training examples is available.</S>
			<S sid ="166" ssid = "98">It also shows that the hierarchical strategy can achieve stable performance much faster than the flat strategy.</S>
			<S sid ="167" ssid = "99">Finally, it shows that the ACE RDC 2003 task suffers from the lack of training examples.</S>
			<S sid ="168" ssid = "100">Among the three major relation subtypes, only the subtype “Located” achieves steady performance.</S>
			<S sid ="169" ssid = "101">Finally, we also compare our system with the previous best-reported systems, such as Kambhatla (2004) and Zhou et al (2005).</S>
			<S sid ="170" ssid = "102">Table 5 shows that our system outperforms the previous best-reported system by 2.7 (58.2 vs. 55.5) in F- measure, largely due to the gain in recall.</S>
			<S sid ="171" ssid = "103">It indicates that, although support vector machines and maximum entropy models always perform better than the simple perceptron algorithm in most (if not all) applications, the hierarchical learning strategy using the perceptron algorithm can easily overcome the difference and outperforms the flat learning strategy using the overwhelming support vector machines and maximum entropy models in relation extraction, at least on the ACE RDC 2003 corpus.</S>
			<S sid ="172" ssid = "104">Bin Type(cosine similarity) Large Bin (0.98) Midd le Bin (0.92) Smal l Bin (0.81) P R F P R F P R F Fl at Str ate gy 6 2.</S>
			<S sid ="173" ssid = "105">3 6 1.</S>
			<S sid ="174" ssid = "106">9 6 2.</S>
			<S sid ="175" ssid = "107">1 6 0.</S>
			<S sid ="176" ssid = "108">8 38 .7 4 7.</S>
			<S sid ="177" ssid = "109">3 3 3.</S>
			<S sid ="178" ssid = "110">0 21 .7 2 6.</S>
			<S sid ="179" ssid = "111">2 Hi era rc hic al Str ate gy 6 6.</S>
			<S sid ="180" ssid = "112">4 6 0.</S>
			<S sid ="181" ssid = "113">2 6 3.</S>
			<S sid ="182" ssid = "114">1 6 7.</S>
			<S sid ="183" ssid = "115">6 42 .7 5 2.</S>
			<S sid ="184" ssid = "116">4 4 0.</S>
			<S sid ="185" ssid = "117">2 26 .3 3 1.</S>
			<S sid ="186" ssid = "118">8Table 4: Comparison of the hierarchical and flat learning strategies on the relation subtypes of differ ent training data sizes.</S>
			<S sid ="187" ssid = "119">Notes: the figures in the parentheses indicate the cosine similarities between the weight vectors of the linear discriminative functions learned using the two strategies.</S>
			<S sid ="188" ssid = "120">HS: General-Staff 60 FS: General-Staff 50 HS: Part-Of 40 FS: Part-Of 30 20 HS: Located.</S>
			<S sid ="189" ssid = "121">10 FS: Located.</S>
			<S sid ="190" ssid = "122">Training Data Size Figure 2: Learning curve of the hierarchical strategy and its comparison with the flat strategy for some major relation subtypes (Note: FS for the flat strategy and HS for the hierarchical strategy) System P e r f o r m a n c e P R F Our: Perceptron Algorithm + Hierarchical Strategy 63.6 53.6 58.2 Zhou et al (2005): SVM + Flat Strategy 63.1 49.5 55.5 Kambhatla (2004): Maximum Entropy + Flat Strategy 63.5 45.2 52.8 Table 5: Comparison of our system with other best-reported systems 5 Conclusion.</S>
			<S sid ="191" ssid = "123">This paper proposes a novel hierarchical learning strategy to deal with the data sparseness problem in relation extraction by modeling the common- ality among related classes.</S>
			<S sid ="192" ssid = "124">For each class in a class hierarchy, a linear discriminative function is determined in a top-down way using the per- ceptron algorithm with the lower-level weight vector derived from the upper-level weight vector.</S>
			<S sid ="193" ssid = "125">In this way, the upper-level discriminative function can effectively guide the lower-level discriminative function learning.</S>
			<S sid ="194" ssid = "126">Evaluation on the ACE RDC 2003 corpus shows that the hierarchical strategy performs much better than the flat strategy in resolving the critical data sparseness problem in relation extraction.</S>
			<S sid ="195" ssid = "127">In the future work, we will explore the hierarchical learning strategy using other machine learning approaches besides online classifier learning approaches such as the simple perceptron algorithm applied in this paper.</S>
			<S sid ="196" ssid = "128">Moreover, just as indicated in Figure 2, most relation sub- types in the ACE RDC 2003 corpus (arguably the largest annotated corpus in relation extraction) suffer from the lack of training examples.</S>
			<S sid ="197" ssid = "129">Therefore, a critical research in relation extraction is how to rely on semi-supervised learning approaches (e.g. bootstrap) to alleviate its dependency on a large amount of annotated training examples and achieve better and steadier performance.</S>
			<S sid ="198" ssid = "130">Finally, our current work is done when NER has been perfectly done.</S>
			<S sid ="199" ssid = "131">Therefore, it would be interesting to see how imperfect NER affects the performance in relation extraction.</S>
			<S sid ="200" ssid = "132">This will be done by integrating the relation extraction system with our previously developed NER system as described in Zhou and Su (2002).</S>
	</SECTION>
</PAPER>
