<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">Creating labeled training data for relation extraction is expensive.</S>
		<S sid ="2" ssid = "2">In this paper, we study relation extraction in a special weakly-supervised setting when we have only a few seed instances of the target relation type we want to extract but we also have a large amount of labeled instances of other relation types.</S>
		<S sid ="3" ssid = "3">Observing that different relation types can share certain common structures, we propose to use a multi-task learning method coupled with human guidance to address this weakly-supervised relation extraction problem.</S>
		<S sid ="4" ssid = "4">The proposed framework models the commonality among different relation types through a shared weight vector, enables knowledge learned from the auxiliary relation types to be transferred to the target relation type, and allows easy control of the tradeoff between precision and recall.</S>
		<S sid ="5" ssid = "5">Empirical evaluation on the ACE 2004 data set shows that the proposed method substantially improves over two baseline methods.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="6" ssid = "6">Relation extraction is the task of detecting and characterizing semantic relations between entities from free text.</S>
			<S sid ="7" ssid = "7">Recent work on relation extraction has shown that supervised machine learning coupled with intelligent feature engineering or kernel design provides state-of-the-art solutions to the problem (Culotta and Sorensen, 2004; Zhou et al., 2005; Bunescu and Mooney, 2005; Qian et al., 2008).</S>
			<S sid ="8" ssid = "8">However, supervised learning heavily relies on a sufficient amount of labeled data for training, which is not always available in practice due to the labor-intensive nature of human annotation.</S>
			<S sid ="9" ssid = "9">This problem is especially serious for relation ex traction because the types of relations to be extracted are highly dependent on the application domain.</S>
			<S sid ="10" ssid = "10">For example, when working in the financial domain we may be interested in the employment relation, but when moving to the terrorism domain we now may be interested in the ethnic and ideology affiliation relation, and thus have to create training data for the new relation type.</S>
			<S sid ="11" ssid = "11">However, is the old training data really useless?</S>
			<S sid ="12" ssid = "12">Inspired by recent work on transfer learning and domain adaptation, in this paper, we study how we can leverage labeled data of some old relation types to help the extraction of a new relation type in a weakly-supervised setting, where only a few seed instances of the new relation type are available.</S>
			<S sid ="13" ssid = "13">While transfer learning was proposed more than a decade ago (Thrun, 1996; Caruana, 1997), its application in natural language processing is still a relatively new territory (Blitzer et al., 2006; Daume III, 2007; Jiang and Zhai, 2007a; Arnold et al., 2008; Dredze and Crammer, 2008), and its application in relation extraction is still unexplored.</S>
			<S sid ="14" ssid = "14">Our idea of performing transfer learning is motivated by the observation that different relation types share certain common syntactic structures, which can possibly be transferred from the old types to the new type.</S>
			<S sid ="15" ssid = "15">We therefore propose to use a general multi-task learning framework in which classification models for a number of related tasks are forced to share a common model component and trained together.</S>
			<S sid ="16" ssid = "16">By treating classification of different relation types as related tasks, the learning framework can naturally model the common syntactic structures among different relation types in a principled manner.</S>
			<S sid ="17" ssid = "17">It also allows us to introduce human guidance in separating the common model component from the type-specific components.</S>
			<S sid ="18" ssid = "18">The framework naturally transfers the knowledge learned from the old relation types to the new relation type and helps improve the recall of the relation extractor.</S>
			<S sid ="19" ssid = "19">We also exploit ad 1012 Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 1012–1020, Suntec, Singapore, 27 August 2009.</S>
			<S sid ="20" ssid = "20">Qc 2009 ACL and AFNLP ditional human knowledge about the entity type constraints on the relation arguments, which can usually be derived from the definition of a relation type.</S>
			<S sid ="21" ssid = "21">Imposing these constraints further improves the precision of the final relation extractor.</S>
			<S sid ="22" ssid = "22">Empirical evaluation on the ACE 2004 data set shows that our proposed method largely outperforms two baseline methods, improving the average F1 measure from 0.1532 to 0.4132 when only 10 seed instances of the new relation type are used.</S>
	</SECTION>
	<SECTION title="Related work. " number = "2">
			<S sid ="23" ssid = "1">Recent work on relation extraction has been dominated by feature-based and kernel-based supervised learning methods.</S>
			<S sid ="24" ssid = "2">Zhou et al.</S>
			<S sid ="25" ssid = "3">(2005) and Zhao and Grishman (2005) studied various features and feature combinations for relation extraction.</S>
			<S sid ="26" ssid = "4">We systematically explored the feature space for relation extraction (Jiang and Zhai, 2007b) . Kernel methods allow a large set of features to be used without being explicitly extracted.</S>
			<S sid ="27" ssid = "5">A number of relation extraction kernels have been proposed, including dependency tree kernels (Culotta and Sorensen, 2004), shortest dependency path kernels (Bunescu and Mooney, 2005) and more recently convolution tree kernels (Zhang et al., 2006; Qian et al., 2008).</S>
			<S sid ="28" ssid = "6">However, in both feature-based and kernel-based studies, availability of sufficient labeled training data is always assumed.</S>
			<S sid ="29" ssid = "7">Chen et al.</S>
			<S sid ="30" ssid = "8">(2006) explored semi-supervised learning for relation extraction using label propagation, which makes use of unlabeled data.</S>
			<S sid ="31" ssid = "9">Zhou et al.</S>
			<S sid ="32" ssid = "10">(2008) proposed a hierarchical learning strategy to address the data sparseness problem in relation extraction.</S>
			<S sid ="33" ssid = "11">They also considered the commonality among different relation types, but compared with our work, they had a different problem setting and a different way of modeling the commonality.</S>
			<S sid ="34" ssid = "12">Banko and Etzioni (2008) studied open domain relation extraction, for which they manually identified several common relation patterns.</S>
			<S sid ="35" ssid = "13">In contrast, our method obtains common patterns through statistical learning.</S>
			<S sid ="36" ssid = "14">Xu et al.</S>
			<S sid ="37" ssid = "15">(2008) studied the problem of adapting a rule-based relation extraction system to new domains, but the types of relations to be extracted remain the same.</S>
			<S sid ="38" ssid = "16">Transfer learning aims at transferring knowledge learned from one or a number of old tasks to a new task.</S>
			<S sid ="39" ssid = "17">Domain adaptation is a spe of data changes.</S>
			<S sid ="40" ssid = "18">There has been an increasing amount of work on transfer learning and domain adaptation in natural language processing recently.</S>
			<S sid ="41" ssid = "19">Blitzer et al.</S>
			<S sid ="42" ssid = "20">(2006) proposed a structural correspondence learning method for domain adaptation and applied it to part-of-speech tagging.</S>
			<S sid ="43" ssid = "21">Daume III (2007) proposed a simple feature augmentation method to achieve domain adaptation.</S>
			<S sid ="44" ssid = "22">Arnold et al.</S>
			<S sid ="45" ssid = "23">(2008) used a hierarchical prior structure to help transfer learning and domain adaptation for named entity recognition.</S>
			<S sid ="46" ssid = "24">Dredze and Crammer (2008) proposed an online method for multi-domain learning and adaptation.</S>
			<S sid ="47" ssid = "25">Multi-task learning is another learning paradigm in which multiple related tasks are learned simultaneously in order to achieve better performance for each individual task (Caruana, 1997; Evgeniou and Pontil, 2004).</S>
			<S sid ="48" ssid = "26">Although it was not originally proposed to transfer knowledge to a particular new task, it can be naturally used to achieve this goal because it models the common- ality among tasks, which is the knowledge that should be transferred to a new task.</S>
			<S sid ="49" ssid = "27">In our work, transfer learning is done through a multi-task learning framework similar to Evgeniou and Pontil (2004).</S>
	</SECTION>
	<SECTION title="Task definition. " number = "3">
			<S sid ="50" ssid = "1">Our study is conducted using data from the Automatic Content Extraction (ACE) program1.</S>
			<S sid ="51" ssid = "2">We focus on extracting binary relation instances between two relation arguments occurring in the same sentence.</S>
			<S sid ="52" ssid = "3">Some example relation instances and their corresponding relation types as defined by ACE can be found in Table 1.</S>
			<S sid ="53" ssid = "4">We consider the following weakly-supervised problem setting.</S>
			<S sid ="54" ssid = "5">We are interested in extractinginstances of a target relation type T , but this re lation type is only specified by a small set of seed instances.</S>
			<S sid ="55" ssid = "6">We may possibly have some additional knowledge about the target type not in the form of labeled instances.</S>
			<S sid ="56" ssid = "7">For example, we may be given the entity type restrictions on the two relation arguments.</S>
			<S sid ="57" ssid = "8">In addition to such limited information about the target relation type, we also have a large amount of labeled instances for K auxiliary relation types A1, . . .</S>
			<S sid ="58" ssid = "9">, AK . Our goal is to learn a re lation extractor for T , leveraging all the data and information we have.</S>
			<S sid ="59" ssid = "10">cial case of transfer learning where the learning task remains the same but the distribution 1 http://projects.ldc.upenn.edu/ace/ leNNaPdNBer 1 NPIoNf3 PPgoveN2NrPnNBment2 Table 1: Examples of similar syntactic structures across different relation types.</S>
			<S sid ="60" ssid = "11">The head words of the first and the second arguments are shown in italic and bold, respectively.</S>
			<S sid ="61" ssid = "12">Before introducing our transfer learning solution, let us first briefly explain our basic classification approach and the features we use, as well as two baseline solutions.</S>
			<S sid ="62" ssid = "13">PER 1 0 ORG 2 3.1 Feature configuration.</S>
			<S sid ="63" ssid = "14">We treat relation extraction as a classification problem.</S>
			<S sid ="64" ssid = "15">Each pair of entities within a single sentence is considered a candidate relation instance, and the task becomes predicting whether or not each candidate is a true instance of T . We usefeature-based logistic regression classifiers.</S>
			<S sid ="65" ssid = "16">Fol lowing our previous work (Jiang and Zhai, 2007b), we extract features from a sequence representation and a parse tree representation of each relation instance.</S>
			<S sid ="66" ssid = "17">Each node in the sequence or the parse tree is augmented by an argument tag that indicates whether the node subsumes arg1, arg 2, both or neither.</S>
			<S sid ="67" ssid = "18">Nodes that represent the arguments are also labeled with the entity type, subtype and mention type as defined by ACE.</S>
			<S sid ="68" ssid = "19">Based on the findings of Qian et al.</S>
			<S sid ="69" ssid = "20">(2008), we trim the parse tree of a relation instance so that it contains only the most essential components.</S>
			<S sid ="70" ssid = "21">We extract uni- gram features (consisting of a single node) and bi- gram features (consisting of two connected nodes) from the graphic representations.</S>
			<S sid ="71" ssid = "22">An example of the graphic representation of a relation instance is shown in Figure 1 and some features extracted from this instance are shown in Table 2.</S>
			<S sid ="72" ssid = "23">This feature configuration gives state-of-the-art performance (F1 = 0.7223) on the ACE 2004 data set in a standard setting with sufficient data for training.</S>
			<S sid ="73" ssid = "24">3.2 Baseline solutions.</S>
			<S sid ="74" ssid = "25">We consider two baseline solutions to the weakly- supervised relation extraction problem.</S>
			<S sid ="75" ssid = "26">In the first Figure 1: The combined sequence and parse tree representation of the relation instance “leader of a minority government.” The non essential nodes for “a” and for “minority” are removed based on the algorithm from Qian et al.</S>
			<S sid ="76" ssid = "27">(2008).</S>
			<S sid ="77" ssid = "28">F e a t u r e E x p l a n a t i o n O R G 2 of 0 g o v er n m e nt 2 N P 3 → P P 2 arg 2 is an O R G en tit y. a r g 2 is “g o v er n m e nt ” a n d fo ll o w s th e w or d “ o f. ” T h e r e is a n o u n p hr a s e c o nt ai ni n g b ot h ar g u m e nt s, w it h a r g 2 c o nt ai n e d in a pr e p o si ti o n al p hr a s e in si d e th e n o u n p h r a s e . Table 2: Examples of unigram and bigram features extracted from Figure 1.</S>
			<S sid ="78" ssid = "29">baseline, we use only the few seed instances of the target relation type together with labeled negative relation instances (i.e. pairs of entities within the same sentence but having no relation) to train a binary classifier.</S>
			<S sid ="79" ssid = "30">In the second baseline, we take the union of the positive instances of both the target relation type and the auxiliary relation types as our positive training set, and together with the negative instances we train a binary classifier.</S>
			<S sid ="80" ssid = "31">Note that the second baseline method essentially learns a classifier for any relation type.</S>
			<S sid ="81" ssid = "32">Another existing solution to weakly-supervised learning problems is semi-supervised learning, e.g. bootstrapping.</S>
			<S sid ="82" ssid = "33">However, because our proposed transfer learning method can be combined with semi-supervised learning, here we do not include semi-supervised learning as a baseline.</S>
	</SECTION>
	<SECTION title="A multi-task transfer learning solution" number = "4">
			<S sid ="83" ssid = "1">We now present a multi-task transfer learning solution to the weakly-supervised relation extraction problem, which makes use of the labeled data from the auxiliary relation types.</S>
			<S sid ="84" ssid = "2">4.1 Syntactic similarity between relation.</S>
			<S sid ="85" ssid = "3">types To see why the auxiliary relation types may help the identification of the target relation type, let us first look at how different relation types may be related and even similar to each other.</S>
			<S sid ="86" ssid = "4">Based on our inspection of a sample of the ACE data, we find that instances of different relation types can share certain common syntactic structures.</S>
			<S sid ="87" ssid = "5">For example, the syntactic pattern “arg1 of arg2” strongly indicates that there exists some relation between the two arguments, although the nature of the relation may be well dependent on the semantic meanings of the two arguments.</S>
			<S sid ="88" ssid = "6">More examples are shown in Table 1.</S>
			<S sid ="89" ssid = "7">This observation suggests that some of the syntactic patterns learned from the auxiliary relation types may be transferable to the target relation type, making it easier to learn the target relation type and thus alleviating the insufficient train to the target relation type.</S>
			<S sid ="90" ssid = "8">4.2 Statistical learning model.</S>
			<S sid ="91" ssid = "9">As we have discussed, we want to force the linear classifiers for different relation types to share their model weights for those features that are related to the common syntactic patterns.</S>
			<S sid ="92" ssid = "10">Formally, we consider the following statistical learning model.</S>
			<S sid ="93" ssid = "11">Let ωk denote the weight vector of the linear classifier that separates positive instances of aux iliary type Ak from negative instances, and let ωT denote a similar weight vector for the target type T . If different relation types are totally unrelated, these weight vectors should also be independent of each other.</S>
			<S sid ="94" ssid = "12">But because we observe similar syntactic structures across different relation types, we now assume that these weight vectors are related through a common component ν: ωT = µT + ν, ωk = µk + ν for k = 1, . . .</S>
			<S sid ="95" ssid = "13">, K. If we assume that only weights of certain general features can be shared between different relation types, we can force certain dimensions of ν to be 0.</S>
			<S sid ="96" ssid = "14">We express this constraint by introducing a matrix F and setting F ν = 0.</S>
			<S sid ="97" ssid = "15">Here F is a square matrix with all entries set to 0 except that Fi,i = 1 if we want to force νi = 0.</S>
			<S sid ="98" ssid = "16">Now we can learn these weight vectors in a multi-task learning framework.</S>
			<S sid ="99" ssid = "17">Let x represent the feature vector of a candidate relation instance, and y ∈ {+1, −1} represent a class label.</S>
			<S sid ="100" ssid = "18">Let NT ing data problem with the target type.</S>
			<S sid ="101" ssid = "19">DT = {(xT , yT )} denote the set of labeled i i i=1 How can we incorporate this desired knowledge transfer process into our learning method?</S>
			<S sid ="102" ssid = "20">While instances for the target type T .</S>
			<S sid ="103" ssid = "21">(Note that the number of positive instances in DT is very small.)</S>
			<S sid ="104" ssid = "22">Nkone can make explicit use of these general syntac And let Dk = {(xk , yk )} denote the labeled i i i=1tic patterns in a rule-based relation extraction sys tem, here we restrict our attention to feature-based instances for the auxiliary type Ak . We learn the optimal weight vectors {µˆk }K ,linear classifiers.</S>
			<S sid ="105" ssid = "23">We note that in feature-based lin µˆT and νˆ by optimizing the following objective ear classifiers, a useful syntactic pattern is translated into large weights for features related to the syntactic pattern.</S>
			<S sid ="106" ssid = "24">For example, if “arg1 of arg2” function: k K T \ is a useful pattern, in the learned linear classifier we should have relatively large weights for features such as “the word of occurs before arg2” or {µˆ }k=1 , µˆ = arg min , νˆ r L(DT , µT + ν) k T “a preposition occurs before arg2,” or even more {µ },µ K ,ν,F ν=0 complex features such as “there is a prepositional phrase containing arg2 attached to arg1.” It is the weights of these generally useful features that + ) L(Dk , µk + ν) k=1 K l are transferable from the auxiliary relation types +λµ µT 2 ) µ k=1 .</S>
			<S sid ="107" ssid = "25">(1) The objective function follows standard empirical risk minimization with regularization.</S>
			<S sid ="108" ssid = "26">Here L(D, ω) is the aggregated loss of labeling x with y for all (x, y) in D, using weight vector ω.</S>
			<S sid ="109" ssid = "27">In logistic regression models, the loss function is the negative log likelihood, that is, Human guidance Another way to select the general features is to follow some guidance from human knowledge.</S>
			<S sid ="110" ssid = "28">Recall that in Section 4.1 we find that the common- ality among different relation types usually lies in the syntactic structures between the two arguments.</S>
			<S sid ="111" ssid = "29">This observation gives some intuition L(D, ω) = − ) (x,y)∈D log p(y|x, ω), about how to separate general features from type- specific features.</S>
			<S sid ="112" ssid = "30">In particular, here we consider p(y|x, ω) = λT k exp(ωy · x) . y! ∈{+1,−1} exp(ωy! · x) two hypotheses regarding the generality of different kinds of features.</S>
			<S sid ="113" ssid = "31">µ , λµ and λν are regularization parameters.By adjusting their values, we can control the de gree of weight sharing among the relation types.</S>
			<S sid ="114" ssid = "32">The larger the ratio λT /λν (or λk /λν ) is, the more Argument word features: We hypothesize that the head words of the relation arguments are more likely to be strong indicators of specific relation µ µ types rather than any relation type.</S>
			<S sid ="115" ssid = "33">For example, if we believe that the model for T (or Ak ) should conform to the common model, and the smaller the type-specific weight vector µT (or µk ) will be.</S>
			<S sid ="116" ssid = "34">The model presented above is based on our previous work (Jiang and Zhai, 2007c), which bears the same spirit of some other recent work on multi- task learning (Ando and Zhang, 2005; Evgeniou and Pontil, 2004; Daume III, 2007).</S>
			<S sid ="117" ssid = "35">It is general for any transfer learning problem with auxiliary labeled data from similar tasks.</S>
			<S sid ="118" ssid = "36">Here we are mostly interested in the model’s applicability and effectiveness on the relation extraction problem.</S>
			<S sid ="119" ssid = "37">4.3 Feature separation.</S>
			<S sid ="120" ssid = "38">Recall that we impose a constraint F ν = 0 when optimizing the objective function.</S>
			<S sid ="121" ssid = "39">This constraint gives us the freedom to force only the weights of a subset of the features to be shared among different relation types.</S>
			<S sid ="122" ssid = "40">A remaining question is how to set this matrix F , that is, how to determine the set of general features to use.</S>
			<S sid ="123" ssid = "41">We propose two ways of setting this matrix F . Automatically setting F One way is to fix the number of nonzero entries in ν to be a predefined number H of general features, and allow F to change during the optimization process.</S>
			<S sid ="124" ssid = "42">This can be done by repeating the following two steps until F converges: 1.</S>
			<S sid ="125" ssid = "43">Fix F , and optimize the objective function as.</S>
			<S sid ="126" ssid = "44">in Equation (1).</S>
			<S sid ="127" ssid = "45">2.</S>
			<S sid ="128" ssid = "46">Fix µT + ν and µk + ν , and search for.</S>
			<S sid ="129" ssid = "47">µT , {µk } and ν that minimizes λT µT + an argument has the head word “sister,” it strongly indicates a family relation.</S>
			<S sid ="130" ssid = "48">We refer to the set of features that contain any head word of an argument as “arg-word” features.</S>
			<S sid ="131" ssid = "49">Entity type features: We hypothesize that the entity types and subtypes of the relation arguments are also more likely to be associated with specific relation types.</S>
			<S sid ="132" ssid = "50">For example, arguments that are location entities may be strongly correlated with physical proximity relations.</S>
			<S sid ="133" ssid = "51">We refer to the set of features that contain the entity type or subtype of an argument as “argNE” features.</S>
			<S sid ="134" ssid = "52">We hypothesize that the arg-word and argNE features are type-specific and therefore should be excluded from the set of general features.</S>
			<S sid ="135" ssid = "53">We can force the weights of these hypothesized type- specific features to be 0 in the shared weight vector ν, i.e. we can set the matrix F to achieve this feature separation.</S>
			<S sid ="136" ssid = "54">Combined method We can also combine the automatic way of setting F with human guidance.</S>
			<S sid ="137" ssid = "55">Specifically, we still follow the first automatic procedure to choose general features, but we then filter out any hypothesized type-specific feature from the set of general features chosen by the automatic procedure.</S>
			<S sid ="138" ssid = "56">4.4 Imposing entity type constraints.</S>
			<S sid ="139" ssid = "57">Finally, we consider how we can exploit additional human knowledge about the target relation type T to further improve the classifier.</S>
			<S sid ="140" ssid = "58">We note that usually when a relation type is defined, we often have k=1 λk k 2 + λν ν 2 , subject to the strong preferences or even hard constraints on the constraint that at most H zero.</S>
			<S sid ="141" ssid = "59">entries of νare non types of entities that can possibly be the two rela tion arguments.</S>
			<S sid ="142" ssid = "60">These type constraints can help us Targ et Type T B L BL A TL a ut o TL g ui de TL co m b TL N E P h y s i c a l P R F 0.</S>
			<S sid ="143" ssid = "61">0 0 0 0 0.</S>
			<S sid ="144" ssid = "62">0 0 0 0 0.</S>
			<S sid ="145" ssid = "63">0 0 0 0 0.</S>
			<S sid ="146" ssid = "64">16 92 0.</S>
			<S sid ="147" ssid = "65">08 48 0.</S>
			<S sid ="148" ssid = "66">11 30 0 . 2 9 2 0 0 . 1 6 9 6 0 . 2 1 4 6 0 . 2 9 3 4 0 . 1 7 2 2 0 . 2 1 7 0 0 . 3 3 2 5 0 . 2 3 8 3 0 . 2 7 7 7 0.</S>
			<S sid ="149" ssid = "67">5 0 5 6 0.</S>
			<S sid ="150" ssid = "68">2 3 1 6 0.</S>
			<S sid ="151" ssid = "69">3 1 7 6 P e r s o n a l / S o c i a l P R F 1.</S>
			<S sid ="152" ssid = "70">0 0 0 0 0.</S>
			<S sid ="153" ssid = "71">0 3 8 6 0.</S>
			<S sid ="154" ssid = "72">0 7 4 3 0.</S>
			<S sid ="155" ssid = "73">08 04 0.</S>
			<S sid ="156" ssid = "74">17 08 0.</S>
			<S sid ="157" ssid = "75">10 93 0 . 1 0 0 5 0 . 1 5 9 8 0 . 1 2 3 4 0 . 3 0 6 9 0 . 7 2 4 5 0 . 4 3 1 1 0 . 3 2 1 4 0 . 7 6 8 6 0 . 4 5 3 3 0.</S>
			<S sid ="158" ssid = "76">6 4 1 2 0.</S>
			<S sid ="159" ssid = "77">7 6 3 1 0.</S>
			<S sid ="160" ssid = "78">6 9 6 9 E m pl o y m e nt /M e m be rs hi p / S u b si di a r y P R F 0.</S>
			<S sid ="161" ssid = "79">9 2 3 1 0.</S>
			<S sid ="162" ssid = "80">0 0 7 5 0.</S>
			<S sid ="163" ssid = "81">0 1 4 8 0.</S>
			<S sid ="164" ssid = "82">35 61 0.</S>
			<S sid ="165" ssid = "83">18 50 0.</S>
			<S sid ="166" ssid = "84">24 35 0 . 5 2 3 0 0 . 2 6 1 7 0 . 3 4 8 8 0 . 5 4 2 8 0 . 2 6 4 8 0 . 3 5 5 9 0 . 5 9 7 3 0 . 3 6 3 2 0 . 4 5 1 8 0.</S>
			<S sid ="167" ssid = "85">7 1 4 5 0.</S>
			<S sid ="168" ssid = "86">3 6 0 1 0.</S>
			<S sid ="169" ssid = "87">4 7 8 9 A g e n t A r t i f a c t P R F 0.</S>
			<S sid ="170" ssid = "88">8 7 5 0 0.</S>
			<S sid ="171" ssid = "89">0 3 4 3 0.</S>
			<S sid ="172" ssid = "90">0 6 6 0 0.</S>
			<S sid ="173" ssid = "91">06 03 0.</S>
			<S sid ="174" ssid = "92">23 53 0.</S>
			<S sid ="175" ssid = "93">09 60 0 . 1 8 1 3 0 . 6 4 7 1 0 . 2 8 3 3 0 . 1 8 2 5 0 . 6 2 2 5 0 . 2 8 2 2 0 . 1 8 3 5 0 . 6 4 2 2 0 . 2 8 5 4 0.</S>
			<S sid ="176" ssid = "94">1 9 6 7 0.</S>
			<S sid ="177" ssid = "95">6 3 7 3 0.</S>
			<S sid ="178" ssid = "96">3 0 0 6 P E R / O R G A f fi li a ti o n P R F 0.</S>
			<S sid ="179" ssid = "97">8 8 8 9 0.</S>
			<S sid ="180" ssid = "98">0 5 6 7 0.</S>
			<S sid ="181" ssid = "99">1 0 6 7 0.</S>
			<S sid ="182" ssid = "100">08 38 0.</S>
			<S sid ="183" ssid = "101">49 65 0.</S>
			<S sid ="184" ssid = "102">14 34 0 . 1 5 1 0 0 . 6 9 5 0 0 . 2 4 8 1 0 . 1 5 9 2 0 . 8 3 6 9 0 . 2 6 7 6 0 . 1 6 6 7 0 . 8 7 9 4 0 . 2 8 0 2 0.</S>
			<S sid ="185" ssid = "103">1 8 4 4 0.</S>
			<S sid ="186" ssid = "104">8 7 2 3 0.</S>
			<S sid ="187" ssid = "105">3 0 4 5 G P E A f f i l i a t i o n P R F 1.</S>
			<S sid ="188" ssid = "106">0 0 0 0 0.</S>
			<S sid ="189" ssid = "107">0 0 7 7 0.</S>
			<S sid ="190" ssid = "108">0 1 5 3 0.</S>
			<S sid ="191" ssid = "109">25 30 0.</S>
			<S sid ="192" ssid = "110">45 09 0.</S>
			<S sid ="193" ssid = "111">32 41 0 . 3 9 0 4 0 . 6 4 1 6 0 . 4 8 5 4 0 . 3 6 0 4 0 . 5 9 9 2 0 . 4 5 0 1 0 . 3 5 6 0 0 . 6 1 6 6 0 . 4 5 1 3 0.</S>
			<S sid ="194" ssid = "112">5 8 2 4 0.</S>
			<S sid ="195" ssid = "113">6 1 2 7 0.</S>
			<S sid ="196" ssid = "114">5 9 7 2 D i s c o u r s e P R F 1.</S>
			<S sid ="197" ssid = "115">0 0 0 0 0.</S>
			<S sid ="198" ssid = "116">0 0 3 6 0.</S>
			<S sid ="199" ssid = "117">0 0 7 1 0.</S>
			<S sid ="200" ssid = "118">02 98 0.</S>
			<S sid ="201" ssid = "119">07 89 0.</S>
			<S sid ="202" ssid = "120">04 33 0 . 0 5 0 3 0 . 1 0 7 5 0 . 0 6 8 5 0 . 0 4 7 1 0 . 1 1 4 7 0 . 0 6 6 8 0 . 1 3 7 0 0 . 3 4 7 7 0 . 1 9 6 6 0.</S>
			<S sid ="203" ssid = "121">1 3 7 0 0.</S>
			<S sid ="204" ssid = "122">3 4 7 7 0.</S>
			<S sid ="205" ssid = "123">1 9 6 6 A v e r a g e P R F 0.</S>
			<S sid ="206" ssid = "124">8 1 2 4 0.</S>
			<S sid ="207" ssid = "125">0 2 1 2 0.</S>
			<S sid ="208" ssid = "126">0 4 0 6 0.</S>
			<S sid ="209" ssid = "127">14 75 0.</S>
			<S sid ="210" ssid = "128">24 32 0.</S>
			<S sid ="211" ssid = "129">15 32 0 . 2 4 1 2 0 . 3 8 3 2 0 . 2 5 3 2 0 . 2 7 0 3 0 . 4 7 6 4 0 . 2 9 5 8 0 . 2 9 9 2 0 . 5 5 0 9 0 . 3 4 2 3 0.</S>
			<S sid ="212" ssid = "130">4 2 3 1 0.</S>
			<S sid ="213" ssid = "131">5 4 6 4 0.</S>
			<S sid ="214" ssid = "132">4 1 3 2 Table 3: Comparison of different methods on ACE 2004 data set.</S>
			<S sid ="215" ssid = "133">P, R and F stand for precision, recall and F1, respectively.</S>
			<S sid ="216" ssid = "134">remove some false positive instances.</S>
			<S sid ="217" ssid = "135">We therefore manually identify the entity type constraints for each target relation type based on the definition of the relation type given in the ACE annotation guidelines, and impose these type constraints as a final refinement step on top of the predicted positive instances.</S>
	</SECTION>
	<SECTION title="Experiments. " number = "5">
			<S sid ="218" ssid = "1">5.1 Data set and experiment setup.</S>
			<S sid ="219" ssid = "2">We used the ACE 2004 data set to evaluate our proposed methods.</S>
			<S sid ="220" ssid = "3">There are seven relation types defined in ACE 2004.</S>
			<S sid ="221" ssid = "4">After data cleaning, we obtained 4290 positive instances among 48614 candidate relation instances.</S>
			<S sid ="222" ssid = "5">We took each relation type as the target type and used the remaining types as auxiliary types.</S>
			<S sid ="223" ssid = "6">This gave us seven sets of experiments.</S>
			<S sid ="224" ssid = "7">In each set of experiments for a single target relation type, we randomly divided all the data into five subsets, and used each subset for testing while using the other four subsets for training, i.e. each experiment was repeated five times with different training and test sets.</S>
			<S sid ="225" ssid = "8">Each time, we removed most of the positive instances of the target type from the training set except only a small number S of seed instances.</S>
			<S sid ="226" ssid = "9">This gave us the weakly-supervised setting.</S>
			<S sid ="227" ssid = "10">We kept all the positive instances of the target type in the test set.</S>
			<S sid ="228" ssid = "11">In order to concentrate on the classification accuracy for the target relation type, we removed the positive instances of the auxiliary relation types from the test set, although in practice we need to extract these auxiliary relation instances using learned classifiers for these relation types.</S>
			<S sid ="229" ssid = "12">5.2 Comparison of different methods.</S>
			<S sid ="230" ssid = "13">We first show the comparison of our proposed multi-task transfer learning methods with the two baseline methods described in Section 3.2.</S>
			<S sid ="231" ssid = "14">The performance on each target relation type and the average performance across seven types are shown in Table 3.</S>
			<S sid ="232" ssid = "15">BL refers to the first baseline and BLA refers to the second baseline which uses auxil TL-comb TL-auto BL-A Table 4: The average performance of TL-comb with different λT .</S>
			<S sid ="233" ssid = "16">(λk = 104 and λν = 1.)</S>
			<S sid ="234" ssid = "17">0.25 0.2 µ µ 0.15 0.1 100 1000 10000 iary relation instances.</S>
			<S sid ="235" ssid = "18">The four TL methods are all based on the multi-task transfer learning framework.</S>
			<S sid ="236" ssid = "19">TL-auto sets F automatically within the optimization problem itself.</S>
			<S sid ="237" ssid = "20">TL-guide chooses all features except arg-word and argNE features as general features and sets F accordingly.</S>
			<S sid ="238" ssid = "21">TL-comb combines TL-auto and TL-guide, as described in Section 4.3.</S>
			<S sid ="239" ssid = "22">Finally, TLNE builds on top of TL- comb and uses the entity type constraints to refine the predictions.</S>
			<S sid ="240" ssid = "23">In this set of experiments, the number of seed instances for each target relation type was set to 10.</S>
			<S sid ="241" ssid = "24">The parameters were H Figure 2: Performance of TL-comb and TL-auto as H changes.</S>
			<S sid ="242" ssid = "25">higher recall.</S>
			<S sid ="243" ssid = "26">These results make sense because the larger λT is, the more we penalize large weights of µT . As a result, the model for the target type is forced to conform to the shared model ν and prevented from overfitting the few seed target instances.</S>
			<S sid ="244" ssid = "27">λT is therefore a useful parameter set to their optimal values (λT λν = 1, and H = 500).</S>
			<S sid ="245" ssid = "28">= 104, λk = 104, to help us control the tradeoff between precision and recall for the target type.</S>
			<S sid ="246" ssid = "29">While varying λk As we can see from the table, first of all, BL generally has high precision but very low recall.</S>
			<S sid ="247" ssid = "30">BL-A performs better than BL in terms of F1 because it gives better recall.</S>
			<S sid ="248" ssid = "31">However, BL-A still cannot achieve as high recall as the TL methods.</S>
			<S sid ="249" ssid = "32">This is probably because the model learned by BL A still focuses more on type-specific features for each relation type rather than on the commonly useful general features, and therefore does not help much in classifying the target relation type.</S>
			<S sid ="250" ssid = "33">The four TL methods all outperform the two baseline methods.</S>
			<S sid ="251" ssid = "34">TL-comb performs better than both TL-auto and TL-guide, which shows that while we can either choose general features automatically by the learning algorithm or manually with human knowledge, it is more effective to combine human knowledge with the multi-task learning framework.</S>
			<S sid ="252" ssid = "35">Not surprisingly, TLNE improves the precision over TL-comb without hurting the recall much.</S>
			<S sid ="253" ssid = "36">Ideally, TLNE should not decrease recall if the type constraints are strictly observed in the data.</S>
			<S sid ="254" ssid = "37">We find that it is not always the case with the ACE data, leading to the small decrease of recall from TL-comb to TLNE.</S>
			<S sid ="255" ssid = "38">5.3 The effect of λT. Let us now take a look at the effect of using different λT . As we can see from Table 4, smaller µ gives higher precision while larger λµ gives µ also gives similar effect for type Ak , we found that setting λk to smaller values would not help T because in this case the auxiliary relation instances would be used more for training the type-specific component µk rather than the common component ν.</S>
			<S sid ="256" ssid = "39">5.4 Sensitivity of H. Another parameter in the multi-task transfer learning framework is the number of general features H , i.e. the number of nonzero entries in the shared weight vector ν.</S>
			<S sid ="257" ssid = "40">To see how the performance may vary as H changes, we plot the performance of TL-comb and TL-auto in terms of the average F1 across the seven target relation types, with H ranging from 100 to 50000.</S>
			<S sid ="258" ssid = "41">As we can see in Figure 2, the performance is relatively stable, and always above BL-A.</S>
			<S sid ="259" ssid = "42">This suggests that the performance of TL-comb and TL-auto is not very sensitive to the value of H . 5.5 Hypothesized type-specific features.</S>
			<S sid ="260" ssid = "43">In Section 4.3, we showed two sets of hypothesized type-specific features, namely, arg-word features and argNE features.</S>
			<S sid ="261" ssid = "44">We also experimented with each set separately to see whether both sets are useful.</S>
			<S sid ="262" ssid = "45">The comparison is shown in Table 5.</S>
			<S sid ="263" ssid = "46">As we can see, using either set of type- specific features in either TL-guide or TL-comb can improve the performance over BL-A, but the λT T arg w or d arg N E u ni o n TL gu id e TL co m b 0 . 2 0 9 5 0 . 2 2 1 5 0.</S>
			<S sid ="264" ssid = "47">2 9 8 3 0.</S>
			<S sid ="265" ssid = "48">3 3 3 1 0.</S>
			<S sid ="266" ssid = "49">29 58 0.</S>
			<S sid ="267" ssid = "50">34 23 B L A 0 . 1 5 3 2 Table 5: Average F1 using different hypothesized type-specific features.</S>
			<S sid ="268" ssid = "51">0.6 0.5 0.4 0.3 0.2</S>
	</SECTION>
	<SECTION title="Conclusions and future work. " number = "6">
			<S sid ="269" ssid = "1">In this paper, we applied multi-task transfer learning to solve a weakly-supervised relation extraction problem, leveraging both labeled instances of auxiliary relation types and human knowledge including hypotheses on feature generality and entity type constraints.</S>
			<S sid ="270" ssid = "2">In the multi-task learning framework that we introduced, different relation types are treated as different but related tasks that are learned together, with the common structures among the relation types modeled by a shared weight vector.</S>
			<S sid ="271" ssid = "3">The shared weight vector corre 0.1 0 T L N E ( 1 0 4 ) TL N E (1 02 ) B L B L A 10 100 1000 S sponds to the general features across different re lation types.</S>
			<S sid ="272" ssid = "4">We proposed to choose the general features either automatically inside the learning algorithm or guided by human knowledge.</S>
			<S sid ="273" ssid = "5">We also leveraged additional human knowledge about the Figure 3: Performance of TLNE, BL and BL-A as the number of seed instances S of the target type target relation type in the form of entity type constraints.</S>
			<S sid ="274" ssid = "6">Experiment results on the ACE 2004 data increases.</S>
			<S sid ="275" ssid = "7">(H = 500.</S>
			<S sid ="276" ssid = "8">λT was set to 104 and 102).</S>
			<S sid ="277" ssid = "9">show that the multi-task transfer learning method achieves the best performance when we combine human guidance with automatic general feature argNE features are probably more type-specific than arg-word features because they give better performance.</S>
			<S sid ="278" ssid = "10">Using the union of the two sets is still the best for TL-comb.</S>
			<S sid ="279" ssid = "11">5.6 Changing the number of seed instances.</S>
			<S sid ="280" ssid = "12">Finally, we compare TLNE with BL and BL-A when the number of seed instances increases.</S>
			<S sid ="281" ssid = "13">We set S from 5 up to 1000.</S>
			<S sid ="282" ssid = "14">When S is large, the problem becomes more like traditional supervised selection, followed by imposing the entity type constraints.</S>
			<S sid ="283" ssid = "15">The final method substantially outperforms two baseline methods, improving the average F1 measure from 0.1532 to 0.4132 when only 10 seed target instances are used.</S>
			<S sid ="284" ssid = "16">Our work is the first to explore transfer learning for relation extraction, and we have achieved very promising results.</S>
			<S sid ="285" ssid = "17">Because of the practical importance of transfer learning and adaptation for relation extraction due to lack of training data in new domains, we hope our study and findings will lead learning, and our setting of λT = 104 is no longer to further investigation into this problem.</S>
			<S sid ="286" ssid = "18">There optimal because we are now not afraid of overfit- ting the large set of seed target instances.</S>
			<S sid ="287" ssid = "19">Therefore we also included another TLNE experiment are still many issues that remain unsolved.</S>
			<S sid ="288" ssid = "20">For example, we have not looked at the degrees of re- latedness between different pairs of relation types.</S>
			<S sid ="289" ssid = "21">with λT set to 102.</S>
			<S sid ="290" ssid = "22">The.</S>
			<S sid ="291" ssid = "23">comparis on of the perfor Presuma bly, when adapting to a specific target re mance is shown in Figure 3.</S>
			<S sid ="292" ssid = "24">We see that as S increases, both BL and BL-A catch up, and BL overtakes BL-A when S is sufficiently large because BL uses positive training examples only from the target type.</S>
			<S sid ="293" ssid = "25">Overall, TLNE still outperforms the two baselines in most of the cases over the wide range of values of S, but the optimal value for λT decreases as S increases, as we have suspected.</S>
			<S sid ="294" ssid = "26">lation type, we want to choose the most similar auxiliary relation types to use.</S>
			<S sid ="295" ssid = "27">Our current study is based on ACE relation types.</S>
			<S sid ="296" ssid = "28">It would also be interesting to study similar problems in other domains, for example, the protein-protein interaction extraction problem in biomedical text mining.</S>
			<S sid ="297" ssid = "29">The results show that if λT is set appropriately,</S>
	</SECTION>
</PAPER>
