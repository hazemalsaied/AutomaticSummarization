<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">In this paper we compare pronoun resolution algorithms and introduce a centering algorithm (Left­ Right Centering) that adheres to the constraints and rules of centering theory and is an alternative to Brennan, Friedman, and Pollard&apos;s (1987) algorithm.</S>
		<S sid ="2" ssid = "2">We then use the Left-Right Centering algorithm to see if two psycholinguistic claims on Cf-list ranking will actually improve pronoun resolution accuracy.</S>
		<S sid ="3" ssid = "3">Our results from this investigation lead to the development of a new syntax­ based ranking of the Cf-list and corpus-based evidence that contradicts the psycholinguistic claims.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="4" ssid = "4">The aims of this paper are to compare implementations of pronoun resolution algo­ rithms automatically on a common corpus and to see if results from psycholinguistic experiments can be used to improve pronoun resolution.</S>
			<S sid ="5" ssid = "5">Many hand-tested corpus evaluations have been done in the past (e.g., Walker 1989; Strube 1998; Mitkov 1998; Strube and Hahn 1999), but these have the drawback of being carried out on small corpora.</S>
			<S sid ="6" ssid = "6">While manual evaluations have the advantage of allowing the researcher to examine the data closely, they are problematic because they can be time consuming, generally making it difficult to process corpora that are large enough to provide reli­ able, broadly based statistics.</S>
			<S sid ="7" ssid = "7">With a system that can run various pronoun resolution algorithms, one can easily and quickly analyze large amounts of data and generate more reliable results.</S>
			<S sid ="8" ssid = "8">In this study, this ability to alter an algorithm slightly and test its performance is central.</S>
			<S sid ="9" ssid = "9">We first show the attractiveness of the Left-Right Centering algorithm (henceforth LRC) (Tetreault 1999) given its incremental processing of utterances, psycholinguistic plausibility, and good performance in finding the antecedents of pronouns.</S>
			<S sid ="10" ssid = "10">The al­ gorithm is tested against three other leading pronoun resolution algorithms: Hobbs&apos;s naive algorithm (1978), S-list (Strube 1998), and BFP (Brennan, Friedman, and Pollard 1987).</S>
			<S sid ="11" ssid = "11">Next we use the conclusions from two psycholinguistic experiments on ranking the Cf-list, the salience of discourse entities in prepended phrases (Gordon, Grosz, and Gilliam 1993) and the ordering of possessor and possessed in complex NPs (Gordon et al. 1999), to try to improve the performance of LRC.</S>
			<S sid ="12" ssid = "12">We begin with a brief review of the four algorithms to be compared (Section 2).</S>
			<S sid ="13" ssid = "13">We then discuss the results of the corpus evaluation (Sections 3 and 4).</S>
			<S sid ="14" ssid = "14">Finally, we show that the results from two psycholinguistic experiments, thought to provide a better ordering of the Cf-list, do not improve LRC&apos;s performance when they are incorporated (Section 5).</S>
			<S sid ="15" ssid = "15">* Department of Computer Science, Rochester, NY 14627.</S>
			<S sid ="16" ssid = "16">Email: tetreaul@cs.rochester.edu © 2001 Association for Computational Linguistics</S>
	</SECTION>
	<SECTION title="Algorithms. " number = "2">
			<S sid ="17" ssid = "1">2.1 Hobbs&apos;s Algorithm.</S>
			<S sid ="18" ssid = "2">Hobbs (1978) presents two algorithms: a naive one based solely on syntax, and a more complex one that includes semantics in the resolution method.</S>
			<S sid ="19" ssid = "3">The naive one (hence­ forth, the Hobbs algorithm) is the one analyzed here.</S>
			<S sid ="20" ssid = "4">Unlike the other three algorithms analyzed in this project, the Hobbs algorithm does not appeal to any discourse models for resolution; rather, the parse tree and grammatical rules are the only information used in pronoun resolution.</S>
			<S sid ="21" ssid = "5">The Hobbs algorithm assumes a parse tree in which each NP node has an N type node below it as the parent of the lexical object.</S>
			<S sid ="22" ssid = "6">The algorithm is as follows: 1.</S>
			<S sid ="23" ssid = "7">Begin at the NP node immediately dominating the pronoun..</S>
			<S sid ="24" ssid = "8">2.</S>
			<S sid ="25" ssid = "9">Walk up the tree to the first NP or S encountered.</S>
			<S sid ="26" ssid = "10">Call this node X, and.</S>
			<S sid ="27" ssid = "11">call the path used to reach it p. 3.</S>
			<S sid ="28" ssid = "12">Traverse all branches below node X to the left of path p in a left-to­.</S>
			<S sid ="29" ssid = "13">right, breadth-first manner.</S>
			<S sid ="30" ssid = "14">Propose as the antecedent any NP node that is encountered which has an NP or S node between it and X. If no antecedent is found, proceed to Step 4.</S>
			<S sid ="31" ssid = "15">4. If node X is the highest S node in the sentence, traverse the surface parse.</S>
			<S sid ="32" ssid = "16">trees of previous sentences in order of recency, the most recent first; each tree is traversed in a left-to-right, breadth-first manner, and when an NP node is encountered, propose it as the antecedent.</S>
			<S sid ="33" ssid = "17">If X is not the highest S node in the sentence, continue to Step 5.</S>
			<S sid ="34" ssid = "18">5. From node X, go up the tree to the first NP or S node encountered.</S>
			<S sid ="35" ssid = "19">Call.</S>
			<S sid ="36" ssid = "20">this new node X, and call the path traversed to reach it p. 6.</S>
			<S sid ="37" ssid = "21">If X is an NP node and if the path p to X did not pass through the N. node that X immediately dominates, propose X as the antecedent.</S>
			<S sid ="38" ssid = "22">7.</S>
			<S sid ="39" ssid = "23">Traverse all branches below node X to the left of path p in a left-to­.</S>
			<S sid ="40" ssid = "24">right, breadth-first manner.</S>
			<S sid ="41" ssid = "25">Propose any NP node encountered as the antecedent.</S>
			<S sid ="42" ssid = "26">8.</S>
			<S sid ="43" ssid = "27">If X is an S node, traverse all branches of node X to the right of path p. in a left-to-right, breadth-first manner, but do not go below any NP or S node encountered.</S>
			<S sid ="44" ssid = "28">Propose any NP node encountered as the antecedent.</S>
			<S sid ="45" ssid = "29">9.</S>
			<S sid ="46" ssid = "30">Go to Step 4..</S>
			<S sid ="47" ssid = "31">A match is &quot;found&quot; when the NP in question matches the pronoun in number, gender, and person.</S>
			<S sid ="48" ssid = "32">The algorithm amounts to walking the parse tree from the pronoun in question by stepping through each NP and S on the path to the top S and running a breadth-first search on NP&apos;s children left of the path.</S>
			<S sid ="49" ssid = "33">If a referent cannot be found in the current utterance, then the breadth-first strategy is repeated on preceding utterances.</S>
			<S sid ="50" ssid = "34">Hobbs did a hand-based evaluation of his algorithm on three different texts: a history chapter, a novel, and a news article.</S>
			<S sid ="51" ssid = "35">Four pronouns were considered: he, she, it, and they.</S>
			<S sid ="52" ssid = "36">Cases where it refers to a nomecoverable entity (such as the time or weather) were not counted.</S>
			<S sid ="53" ssid = "37">The algorithm performed successfully on 88.3% of the 300 pronouns in the corpus.</S>
			<S sid ="54" ssid = "38">Accuracy increased to 91.7% with the inclusion of selectional constraints.</S>
			<S sid ="55" ssid = "39">2.2 Centering Theory and BFP&apos;s Algorithm.</S>
			<S sid ="56" ssid = "40">Centering theory is part of a larger theory of discourse structure developed by Grosz and Sidner (1986).</S>
			<S sid ="57" ssid = "41">These researchers assert that discourse structure has three compo nents: (1) a linguistic structure, which is the structure of the sequence of utterances; (2) the intentional structure, which is a structure of discourse-relevant purposes; and (3) the attentional state, which is the state of focus.</S>
			<S sid ="58" ssid = "42">The attentional state models the discourse participants&apos; focus of attention determined by the other two structures at any one time.</S>
			<S sid ="59" ssid = "43">Also, it has global and local components that correspond to the two levels of discourse coherence.</S>
			<S sid ="60" ssid = "44">Centering models the local component of attentional state-namely, how the speaker&apos;s choice of linguistic entities affects the inference load placed upon the hearer in discourse processing.</S>
			<S sid ="61" ssid = "45">For example, referring to an entity with a pronoun signals that the entity is more prominently in focus.</S>
			<S sid ="62" ssid = "46">As described by Brennan, Friedman, and Pollard (1987) (henceforth, BFP) and Walker, Iida, and Cote (1994), entities called centers link an utterance with other utter­ ances in the discourse segment.</S>
			<S sid ="63" ssid = "47">Each utterance within a discourse has one backward­ looking center (Cb) and a set of forward-looking centers (Cf).</S>
			<S sid ="64" ssid = "48">The Cf set for an utterance Uo is the set of discourse entities evoked by that utterance.</S>
			<S sid ="65" ssid = "49">The Cf set is ranked according to discourse salience; the most accepted ranking is by grammatical role (by subject, direct object, indirect object).</S>
			<S sid ="66" ssid = "50">The highest-ranked element of this list is called the preferred center (Cp).</S>
			<S sid ="67" ssid = "51">The Cb represents the most highly ranked element of the previous utterance that is found in the current utterance.</S>
			<S sid ="68" ssid = "52">Essentially, it serves as a link between utterances.</S>
			<S sid ="69" ssid = "53">Abrupt changes in discourse topic are reflected by a change of Cb between utterances.</S>
			<S sid ="70" ssid = "54">In discourses where the change of Cb is minimal, the Cp of the utterance represents a prediction of what the Cb will be in the next utterance.</S>
			<S sid ="71" ssid = "55">Grosz, Joshi, and Weinstein (1986, 1995) proposed the following constraints of centering theory: Constraints For each utterance U;, in a discourse segment D, consisting of utterances of U 1 ...</S>
			<S sid ="72" ssid = "56">Urn: 1.</S>
			<S sid ="73" ssid = "57">There is precisely one Cb..</S>
			<S sid ="74" ssid = "58">2.</S>
			<S sid ="75" ssid = "59">Every element of the Cf-list for U; must be realized in U;..</S>
			<S sid ="76" ssid = "60">3.</S>
			<S sid ="77" ssid = "61">The center, Cb(U;, D), is the highest-ranked element of Cf(U;_ 1,D) that is. realized in U;.</S>
			<S sid ="78" ssid = "62">In addition, they proposed the following rules: Rules For each utterance U;, in a discourse segment D, consisting of utterances of U1 ...</S>
			<S sid ="79" ssid = "63">Urn: 1.</S>
			<S sid ="80" ssid = "64">If some element of Cf(U;_1, D) is realized as a pronoun in U;, then so is. Cb(U;,D).</S>
			<S sid ="81" ssid = "65">2.</S>
			<S sid ="82" ssid = "66">Transition states (defined below) are ordered such that a sequence of.</S>
			<S sid ="83" ssid = "67">Continues is preferred over a sequence of Retains, which are preferred over sequences of Shifts.</S>
			<S sid ="84" ssid = "68">The relationship between the Cb and Cp of two utterances determines the co­ herence between the utterances.</S>
			<S sid ="85" ssid = "69">Centering theory ranks the coherence of adjacent utterances with transitions that are determined by the following criteria: 1.</S>
			<S sid ="86" ssid = "70">whether or not the Cb is the same from Un-l to Un; 2.</S>
			<S sid ="87" ssid = "71">whether or not this entity coincides with the Cp of Un.</S>
			<S sid ="88" ssid = "72">509 Table 1 Centering transition table.</S>
			<S sid ="89" ssid = "73">Cb(Un) = Cp(U,) Cb(Un) = Cp(Un1) Continue Retain Smooth Shift Rough Shift BFP and Walker, Iida, and Cote (1994) identified a finer gradation in the Shift tran­ sition, stating that Retains were preferred over Smooth Shifts, which were preferred over Rough Shifts.</S>
			<S sid ="90" ssid = "74">Table 1 shows the criteria for each transition.</S>
			<S sid ="91" ssid = "75">Given these constraints and rules, BFP proposed the following pronoun-binding algorithm based on centering: 1.</S>
			<S sid ="92" ssid = "76">Generate all possible CbCf combinations..</S>
			<S sid ="93" ssid = "77">2.</S>
			<S sid ="94" ssid = "78">Filter combinations by contraindices and centering rules..</S>
	</SECTION>
	<SECTION title="Rank  remaining combinations by transitions.. " number = "3">
			<S sid ="95" ssid = "1">Walker (1989) compared Hobbs and BFP on three small data sets using hand evaluation.</S>
			<S sid ="96" ssid = "2">The results indicated that the two algorithms performed equivalently over a fictional domain of 100 utterances; and Hobbs outperformed BFP over domains consisting of newspaper articles (89% to 79%) and a task domain (Tasks) (51% to 49%).</S>
			<S sid ="97" ssid = "3">2.3 The S-List Approach.</S>
			<S sid ="98" ssid = "4">The third approach (Strube 1998) discards the notions of backward- and forward­ looking centers but maintains the notion of modeling the attentional state.</S>
			<S sid ="99" ssid = "5">This method, the S-list (salience list), was motivated by the BFP algorithm&apos;s problems with mere­ mentality and computational overhead (it was also difficult to coordinate the algorithm with intrasentential resolution).</S>
			<S sid ="100" ssid = "6">2.3.1 The S-List.</S>
			<S sid ="101" ssid = "7">The model has one structure, the S-list, which &quot;describes the atten­ tional state of the hearer at any given point in processing a discourse&quot; (Strube 1998, page 1252).</S>
			<S sid ="102" ssid = "8">At first glance, this definition is quite similar to that of a Cf-list; however, the two differ in ranking and composition.</S>
			<S sid ="103" ssid = "9">First, the S-list can contain elements from both the current and previous utterance while the Cf-list contains elements from the previous utterance alone.</S>
			<S sid ="104" ssid = "10">Second, the S-list&apos;s elements are ranked not by grammatical role but by information status and then by surface order.</S>
			<S sid ="105" ssid = "11">The elements of the S-list are separated into three information sets-hearer-old discourse entities (OLD), mediated discourse entities (MED), and hearer-new dis­ course entities (NEW)-all of which are based on Prince&apos;s (1981) familiarity scale.</S>
			<S sid ="106" ssid = "12">The three sets are further subdivided: OLD consists of evoked and unused entities; MED consists of inferrables, containing inferrables, and anchored brand-new discourse intrasentential entities; NEW consists solely of brand-new entities.</S>
			<S sid ="107" ssid = "13">What sorts of NPs fall into these categories?</S>
			<S sid ="108" ssid = "14">Pronouns and other referring expres­ sions, as well as previously mentioned proper names, are evoked.</S>
			<S sid ="109" ssid = "15">Unused entities are proper names.</S>
			<S sid ="110" ssid = "16">Inferrables are entities that are linked to some other entity in the hearer&apos;s knowledge, but indirectly.</S>
			<S sid ="111" ssid = "17">Anchored brand-new discourse entities have as their anchor an entity that is OLD.</S>
			<S sid ="112" ssid = "18">The three sets are ordered by their information status.</S>
			<S sid ="113" ssid = "19">OLD entities are preferred over MED entities, which are preferred over NEW entities.</S>
			<S sid ="114" ssid = "20">Within each set, the or­ dering is by utterance and position in utterance.</S>
			<S sid ="115" ssid = "21">Basically, an entity of utterance x is preferred over an entity of utterance y if utterance x follows utterance y. If the entities are in the same utterance, they are ranked by position in the sentence: an entity close to the beginning of the sentence is preferred over one that is farther away.</S>
			<S sid ="116" ssid = "22">2.3.2 Algorithm.</S>
			<S sid ="117" ssid = "23">The resolution algorithm presented here comes from Strube (1998) and personal communication with Michael Strube.</S>
			<S sid ="118" ssid = "24">For each utterance (U1 ...</S>
			<S sid ="119" ssid = "25">UN): for each entity within U;: 1.</S>
			<S sid ="120" ssid = "26">If U; is a pronoun, then find a referent by looking through the S-list left.</S>
			<S sid ="121" ssid = "27">to right for one that matches in gender, number, person, and binding constraints.</S>
			<S sid ="122" ssid = "28">Mark entity as EVOKED.1 2.</S>
			<S sid ="123" ssid = "29">If U; is preceded by an indefinite article, then mark U; as BRAND-NEW..</S>
			<S sid ="124" ssid = "30">3.</S>
			<S sid ="125" ssid = "31">If U; is not preceded by a determiner, then mark U; as UNUSED..</S>
	</SECTION>
	<SECTION title="Else mark U; as ANCHORED BRAND-NEW.. " number = "4">
			<S sid ="126" ssid = "1">6.</S>
			<S sid ="127" ssid = "2">Upon completion of U; remove all entities from the 5-list that were not.</S>
			<S sid ="128" ssid = "3">realized in U;.</S>
			<S sid ="129" ssid = "4">In short, the S-list method continually inserts new entities into the S-list in their proper positions and &quot;cleanses&quot; the list after each utterance to purge entities that are unlikely to be used again in the discourse.</S>
			<S sid ="130" ssid = "5">Pronoun resolution is a simple lookup in the S-list.</S>
			<S sid ="131" ssid = "6">Strube did perform a hand test of the S-list algorithm and the BFP algorithm on three short stories by Hemingway and three articles from the New York Times.</S>
			<S sid ="132" ssid = "7">BFP, with intrasentential centering added, successfully resolved 438 pronouns out of 576 (76%).</S>
			<S sid ="133" ssid = "8">The S-list approach performed much better (85%).</S>
			<S sid ="134" ssid = "9">2.4 Left-Right Centering Algorithm.</S>
			<S sid ="135" ssid = "10">Left-Right Centering (Tetreault 1999) is an algorithm built upon centering theory&apos;s constraints and rules as detailed in Grosz, Joshi, and Weinstein (1995).</S>
			<S sid ="136" ssid = "11">The creation of the LRC algorithm is motivated by BFP&apos;s limitation as a cognitive model in that it makes no provision for incremental resolution of pronouns (Kehler 1997).</S>
			<S sid ="137" ssid = "12">Psycholin­ guistic research supports the claim that listeners process utterances one word at a time.</S>
			<S sid ="138" ssid = "13">Therefore, when a listener hears a pronoun, he or she will try to resolve it immediately; if new information appears that makes the original choice incorrect (such as a violation of binding constraints), the listener will go back and find a correct antecedent.</S>
			<S sid ="139" ssid = "14">Responding to the lack of incremental processing in the BFP model, we have constructed an incremental resolution algorithm that adheres to centering constraints.</S>
			<S sid ="140" ssid = "15">It works by first searching for an antecedent in the current utterance;2 if one is not found, then the previous Cf-lists (starting with the previous utterance) are searched 1 In the original S-list formulation, pronouns are not the only entities that can be marked as EVOKED;.</S>
			<S sid ="141" ssid = "16">nominal anaphora and previously mentioned proper names (to name just two) can also be EVOKED (Strube and Hahn 1999).</S>
			<S sid ="142" ssid = "17">In our implementation, pronouns are the only entities that can fall in this category.</S>
			<S sid ="143" ssid = "18">2 In this project, a sentence is considered an utterance..</S>
			<S sid ="144" ssid = "19">left to right for an antecedent: 1.</S>
			<S sid ="145" ssid = "20">Preprocessing-from previous utterance: Cb(Un1) and Cf(Un1) are.</S>
			<S sid ="146" ssid = "21">available.</S>
			<S sid ="147" ssid = "22">2.</S>
			<S sid ="148" ssid = "23">Process utterance-parse and extract incrementally from U 11 all refer­.</S>
			<S sid ="149" ssid = "24">ences to discourse entities.</S>
			<S sid ="150" ssid = "25">For each pronoun do: (a) Search for an antecedent intrasententially in Cfpartiai(Un)3 that meet feature and binding constraints.</S>
			<S sid ="151" ssid = "26">If one is found, proceed to the next pronoun within utterance.</S>
			<S sid ="152" ssid = "27">Else go to (b).</S>
			<S sid ="153" ssid = "28">(b) Search for an antecedent intersententially in Cf(Un1) that meets feature and binding constraints.</S>
			<S sid ="154" ssid = "29">3.</S>
			<S sid ="155" ssid = "30">Create C£-create Cf-list of Un by ranking discourse entities of Un ac­.</S>
			<S sid ="156" ssid = "31">cording to grammatical function.</S>
			<S sid ="157" ssid = "32">Our implementation used a left-to-right breadth-first walk of the parse tree to approximate sorting by grammat­ ical function.</S>
			<S sid ="158" ssid = "33">It should be noted that while BFP makes use of Rule 2 of centering theory, LRC does not since Rule 2&apos;s role in pronoun resolution is not yet known (see Kehler [1997] for a critique of its use by BFP).</S>
			<S sid ="159" ssid = "34">The preference for searching intrasententially before intersententially is motivated by the fact that large sentences are not broken up into clauses as Kameyama (1998) proposes.</S>
			<S sid ="160" ssid = "35">By looking through the Cf-partial, clause-by-clause centering is roughly ap­ proximated.</S>
			<S sid ="161" ssid = "36">In addition, the antecedents of reflexive pronouns are found by searching Cf-partial right to left because their referents are usually found in the minimal S. There are two important points to be made about centering and pronoun resolu­ tion.</S>
			<S sid ="162" ssid = "37">First, centering is not a pronoun resolution method; the fact that pronouns can be resolved is simply a side effect of the constraints and rules.</S>
			<S sid ="163" ssid = "38">Second, ranking by grammatical role is very naive.</S>
			<S sid ="164" ssid = "39">In a perfect world, the Cf-list would consist of entities ranked by a combination of syntax and semantics.</S>
			<S sid ="165" ssid = "40">In our study, ranking is based solely on syntax.</S>
			<S sid ="166" ssid = "41">3.</S>
			<S sid ="167" ssid = "42">Evaluation of Algorithms.</S>
			<S sid ="168" ssid = "43">3.1 Data.</S>
			<S sid ="169" ssid = "44">All four algorithms were compared on two domains taken from the Penn Treebank annotated corpus (Marcus, Santorini, and Marcinkiewicz 1993).</S>
			<S sid ="170" ssid = "45">The first domain con­ sists of 3,900 utterances (1,694 unquoted pronouns) in New York Times articles provided by Ge, Hale, and Charniak (1998), who annotated the corpus with coreference infor­ mation.</S>
			<S sid ="171" ssid = "46">The corpus consists of 195 different newspaper articles.</S>
			<S sid ="172" ssid = "47">Sentences are fully bracketed and have labels that indicate part of speech and number.</S>
			<S sid ="173" ssid = "48">Pronouns and their antecedent entities are all marked with the same tag to facilitate coreference verification.</S>
			<S sid ="174" ssid = "49">In addition, the subject NP of each S subconstituent is marked.</S>
			<S sid ="175" ssid = "50">The second domain consists of 553 utterances (511 unquoted pronouns) in three fictional texts taken from the Penn Treebank corpus, which we annotated in the same manner as Ge, Hale, and Charniak&apos;s corpus.</S>
			<S sid ="176" ssid = "51">The second domain differs from the first in that the sentences are generally shorter and less complex, and contain more hes and shes.</S>
			<S sid ="177" ssid = "52">3 Cf-partial is a list of all processed discourse entities in Un..</S>
			<S sid ="178" ssid = "53">3.2 Method.</S>
			<S sid ="179" ssid = "54">The evaluation (Byron and Tetreault 1999) consisted of two steps: (1) parsing Penn Treebank utterances and (2) running the four algorithms.</S>
			<S sid ="180" ssid = "55">The parsing stage involved extracting discourse entities from the Penn Treebank utterances.</S>
			<S sid ="181" ssid = "56">Since we were solely concerned with pronouns having NP antecedents, we extracted only NPs.</S>
			<S sid ="182" ssid = "57">For each NP we generated a &quot;filecard&quot; that stored its syntactic information.</S>
			<S sid ="183" ssid = "58">This information included agreement properties, syntactic type, parent nodes, depth in tree, position in utterance, presence or absence of a determiner, gender, coreference tag, utterance number, whether it was quoted, commanding verb, whether it was part of a title, whether it was reflexive, whether it was part of a possessive NP, whether it was in a prepended phrase, and whether it was part of a conjoined sentence.</S>
			<S sid ="184" ssid = "59">The entities were listed in each utterance in order of mention except in the case of conjoined NPs.</S>
			<S sid ="185" ssid = "60">Conjoined entities such as John and Mary were realized as three entities: the singular entities John and Mary and the plural John and Mary.</S>
			<S sid ="186" ssid = "61">The plural entity was placed ahead of the singular ones in the Cf-list, on the basis of research by Gordon et al.</S>
			<S sid ="187" ssid = "62">(1999).</S>
			<S sid ="188" ssid = "63">Conjoined utterances were broken up into their subutterances.</S>
			<S sid ="189" ssid = "64">For example, the utterance United Illuminating is based in New Haven,Conn.,and Northeast is based in Hartford, Conn. was replaced by the two utterances United Illuminating is based in New Haven,Conn. and Northeast is based in Hartford, Conn. This strategy was inspired by Kameyama&apos;s (1998) methods for dealing with complex sentences; it improves the accuracy of each algorithm by 1% to 2%.</S>
			<S sid ="190" ssid = "65">The second stage involved running each algorithm on the parsed forms of the Penn Treebank utterances.</S>
			<S sid ="191" ssid = "66">For all algorithms, we used the same guidelines as Strube and Hahn (1999): no world knowledge was assumed, only agreement criteria (gender, number) and binding constraints were applied.</S>
			<S sid ="192" ssid = "67">Unlike Strube and Hahn, we did not make use of sortal constraints.</S>
			<S sid ="193" ssid = "68">The number of each NP could be extracted from the Penn Treebank annotations, but gender had to be hand-coded.</S>
			<S sid ="194" ssid = "69">A database of all NPs was tagged with their gender (masculine, feminine, neuter).</S>
			<S sid ="195" ssid = "70">NPs such as president or banker were marked as androgynous since it is possible to refer to them with a gendered pronoun.</S>
			<S sid ="196" ssid = "71">Entities within quotes were removed from the evaluation since the S-list algorithm and BFP do not allow resolution of quoted text.</S>
			<S sid ="197" ssid = "72">We depart from Walker&apos;s (1989) and Strube and Hahn&apos;s (1999) evaluations by not defining any discourse segments.</S>
			<S sid ="198" ssid = "73">Walker defines a discourse segment as a paragraph (unless the first sentence of the paragraph has a pronoun in subject position or unless it has a pronoun with no antecedent among the preceding NPs that match syntactic features).</S>
			<S sid ="199" ssid = "74">Instead, we divide our corpora only by discourses (newspaper article or story).</S>
			<S sid ="200" ssid = "75">Once a new discourse is encountered, the history list for each algorithm (be it the Cf-list or S-list) is cleared.</S>
			<S sid ="201" ssid = "76">Using discourse segments should increase the efficiency of all algorithms since it constrains the search space significantly.</S>
			<S sid ="202" ssid = "77">Unlike Walker (1989), we do not account for false positives or error chains; instead, we use a &quot;location&quot;-based evaluation procedure.</S>
			<S sid ="203" ssid = "78">Error chains occur when a pronoun P;2 refers to a pronoun P;, that was resolved incorrectly to entity Ek (where P;2 and P;, evoke the same entity E;).</S>
			<S sid ="204" ssid = "79">So P;2 would corefer incorrectly with Ek· In our evaluation, a coreference is deemed correct if it corefers with an NP that has the same coreference tag.</S>
			<S sid ="205" ssid = "80">So in the above situation, P;2 would be deemed correct since it was matched to an expression that should realize the correct entity.</S>
			<S sid ="206" ssid = "81">3.3 Algorithm Modifications.</S>
			<S sid ="207" ssid = "82">The BFP algorithm had to be modified slightly to compensate for underspecifications in its intrasentential resolution.</S>
			<S sid ="208" ssid = "83">We follow the same method as Strube and Hahn (1999); that is, we first try to resolve pronouns intersententially using the BFP algorithm.</S>
			<S sid ="209" ssid = "84">If there are pronouns left unresolved, we search for an antecedent left to right in the same utterance.</S>
			<S sid ="210" ssid = "85">Strube and Hahn use Kameyama&apos;s (1998) specifications for complex sentences to break up utterances into smaller components.</S>
			<S sid ="211" ssid = "86">We keep the utterances whole (with the exception of splitting conjoined utterances).</S>
			<S sid ="212" ssid = "87">As an aside, the BFP algorithm can be modified (Walker 1989) so that intrasen­ tential antecedents are given a higher preference.</S>
			<S sid ="213" ssid = "88">To quote Walker, the alteration (sug­ gested by Carter [1987]) involves selecting intrasentential candidates &quot;only in the cases where no discourse center has been established or the discourse center has been re­ jected for syntactic or selectional reasons&quot; (page 258).</S>
			<S sid ="214" ssid = "89">Walker applied the modification and was able to boost BFP&apos;s accuracy to 93% correct over the fiction corpus, 84% on Newsweek articles, and 64% on Tasks (up from 90%, 79%, and 49%, respectively).</S>
			<S sid ="215" ssid = "90">BFP with Carter&apos;s modification may seem quite similar to LRC except for two points.</S>
			<S sid ="216" ssid = "91">First, LRC seeks antecedents intrasententially regardless of the status of the discourse center.</S>
			<S sid ="217" ssid = "92">Second, LRC does not use Rule 2 in constraining possible antecedents intersententially, while BFP does so.</S>
			<S sid ="218" ssid = "93">Because the S-list approach incorporates both semantics and syntax in its famil­ iarity ranking scheme, a shallow version that uses only syntax is implemented in this study.</S>
			<S sid ="219" ssid = "94">This means that inferrables are not represented and entities rementioned as NPs may be underrepresented in the ranking.</S>
			<S sid ="220" ssid = "95">Both the BFP and S-list algorithms were modified so that they have the ability to look back through all past Cf/S-lists.</S>
			<S sid ="221" ssid = "96">This puts the two algorithms on equal footing with the Hobbs and LRC algorithms, which allow one to look back as far as possible within the discourse.</S>
			<S sid ="222" ssid = "97">Hobbs (1978) makes use of selectional constraints to help refine the search space for neutral pronouns such as it.</S>
			<S sid ="223" ssid = "98">We do not use selectional constraints in this syntax-only study.</S>
			<S sid ="224" ssid = "99">3.4 Results.</S>
			<S sid ="225" ssid = "100">Two naive algorithms were created to serve as a baseline for results.</S>
			<S sid ="226" ssid = "101">The first, &quot;most recent,&quot; keeps a history list of all entities seen within the discourse unit.</S>
			<S sid ="227" ssid = "102">The most recent entity that matches in gender, number, and binding constraints is selected as the antecedent for the pronoun.</S>
			<S sid ="228" ssid = "103">This method correctly resolves 60% of pronouns in both domains.</S>
			<S sid ="229" ssid = "104">A slightly more complex baseline involves using the LRC algorithm but random­ izing all Cf-lists considered.</S>
			<S sid ="230" ssid = "105">So, in the intrasentential component, the ranking of the entities in Cf-partial is random.</S>
			<S sid ="231" ssid = "106">Previous Cf-lists are also randomized after being pro­ cessed.</S>
			<S sid ="232" ssid = "107">This method actually does well (69%) compared with the &quot;intelligent&quot; algo­ rithms, in part because of its preference for intrasentential entities.</S>
			<S sid ="233" ssid = "108">Tables 2 and 3 include results for the different algorithms over the two domains.</S>
			<S sid ="234" ssid = "109">&quot;Success rate&quot; as defined by Mitkov (2000) is the number of successfully resolved pro­ nouns divided by the total number of pronouns.</S>
			<S sid ="235" ssid = "110">Two variations of LRC are included as further baselines.</S>
			<S sid ="236" ssid = "111">LRCsurf ranks its Cf-list by surface order only.</S>
			<S sid ="237" ssid = "112">LRC ranks the Cf-list by grammatical function.</S>
			<S sid ="238" ssid = "113">LRC-F is the best instantiation of LRC and involves moving entities in a prepended phrase to the back of the Cf-list (which is still ranked by grammatical function).</S>
			<S sid ="239" ssid = "114">LRC-P ranks its entities the same way as LRC-F except that it then moves all pronouns to the head of the Cf-list (maintaining original order).</S>
			<S sid ="240" ssid = "115">This algorithm was meant to be a hybrid of the S-list and LRC algorithms with the hope that performance would be increased by giving weight to pronouns since they would be more likely to continue the backward-looking center.</S>
			<S sid ="241" ssid = "116">Table 2 Pronoun resolution algorithms for New York Times articles.</S>
			<S sid ="242" ssid = "117">Alg orit hm R i g h t S u c c e s s R a t e % Ri gh t In tr a % Ri gh t Int er BF P 1 0 0 4 5 9 . 4 75 .1 48.</S>
			<S sid ="243" ssid = "118">0 Ran do m Cf 1 1 7 5 6 9 . 4 70 .2 66.</S>
			<S sid ="244" ssid = "119">7S list 1 2 1 1 7 1 . 7 74 .1 67.</S>
			<S sid ="245" ssid = "120">5 LR Csu rf 1 2 6 6 7 4 . 7 72 .0 81.</S>
			<S sid ="246" ssid = "121">6 LR C 1 2 6 8 7 4 . 9 72 .0 82.</S>
			<S sid ="247" ssid = "122">0 Ho bbs 1 2 9 8 7 6 . 8 74 .2 82.</S>
			<S sid ="248" ssid = "123">0 LR C-F 1 3 6 2 8 0 . 4 77 .7 87.</S>
			<S sid ="249" ssid = "124">3 LR C-P 1 3 6 2 8 0 . 4 77 .7 87.</S>
			<S sid ="250" ssid = "125">3 Table 3 Pronoun resolution algorithms for fictional texts.</S>
			<S sid ="251" ssid = "126">Alg orit hm R i g h t S u c c e s s R a t e % Ri gh t In tr a % Ri gh t Int er BF P 2 4 1 4 6 . 4 81 .8 43.</S>
			<S sid ="252" ssid = "127">8S list 3 3 7 6 6 . 1 84 .4 56.</S>
			<S sid ="253" ssid = "128">5 Ran dom Cf 3 6 7 7 1 . 1 84 .3 62.</S>
			<S sid ="254" ssid = "129">5 LR Csu rf 3 7 2 7 2 . 1 84 .3 64.</S>
			<S sid ="255" ssid = "130">2 LR C 3 7 2 7 2 . 1 84 .3 64.</S>
			<S sid ="256" ssid = "131">2 LR C-P 3 7 8 7 4 . 0 84 .3 66.</S>
			<S sid ="257" ssid = "132">2 Ho bbs 4 1 4 8 0 . 1 85 .8 75.</S>
			<S sid ="258" ssid = "133">2 LR C-F 4 2 0 8 1 . 1 86 .0 76.</S>
			<S sid ="259" ssid = "134">2 4.</S>
			<S sid ="260" ssid = "135">Discussion.</S>
			<S sid ="261" ssid = "136">For this study, we use McNemar&apos;s test to test whether the difference in performance of two algorithms is significant.</S>
			<S sid ="262" ssid = "137">We adopt the standard statistical convention of p :s:; 0.05 for determining whether the relative performance is indeed significant.</S>
			<S sid ="263" ssid = "138">First, we consider LRC in relation to the classical algorithms: Hobbs, BFP, and S-list.</S>
			<S sid ="264" ssid = "139">We found a significant difference in the performance of all four algorithms (e.g., LRC and S-list: p :s:; 0.00479), though Hobbs and LRC performed the closest in terms of getting the same pronouns right.</S>
			<S sid ="265" ssid = "140">These two algorithms perform similarly for two reasons.</S>
			<S sid ="266" ssid = "141">First, both search for referents intrasententially and then intersententially.</S>
			<S sid ="267" ssid = "142">In the New York Times corpus, over 71% of all pronouns have intrasentential referents, so clearly an algorithm that favors the current utterance will perform better.</S>
			<S sid ="268" ssid = "143">Second, both search their respective data structures in a salience-first manner.</S>
			<S sid ="269" ssid = "144">Intersententially, both examine previous utterances in the same manner: breadth-first based on syntax.</S>
			<S sid ="270" ssid = "145">Intrasententially, Hobbs does slightly better since it first favors antecedents close to the pronoun before searching the rest of the tree.</S>
			<S sid ="271" ssid = "146">LRC favors entities near the head of the sentence under the assumption that they are more salient.</S>
			<S sid ="272" ssid = "147">These algorithms&apos; similarities in intra- and intersentential evaluation are reflected in the similarities in their percentage correct for the respective categories.</S>
			<S sid ="273" ssid = "148">Although S-list performed worse than LRC over the New York Times corpus, it did fare better over the fictional texts.</S>
			<S sid ="274" ssid = "149">This is due to the high density of pronouns in these texts, which S-list would rank higher in its salience list since they are hearer-old.</S>
			<S sid ="275" ssid = "150">It should be restated that a shallow version (syntax only) of the S-list algorithm is implemented here.</S>
			<S sid ="276" ssid = "151">The standing of the BFP algorithm should not be surprising given past studies.</S>
			<S sid ="277" ssid = "152">For example, Strube (1998) found that the S-list algorithm performed at 91% correct on three New York Times articles, while the best version of BFP performed at 81%.</S>
			<S sid ="278" ssid = "153">This 10% difference is reflected in the present evaluation as well.</S>
			<S sid ="279" ssid = "154">The main drawback for BFP was its preference for intersentential resolution.</S>
			<S sid ="280" ssid = "155">Also, BFP, as formally defined, does not have an intrasentential processing mechanism.</S>
			<S sid ="281" ssid = "156">For the purposes of the project, the LRC intrasentential technique was used to resolve pronouns that could not be resolved by the BFP (intersentential) algorithm.</S>
			<S sid ="282" ssid = "157">It is unclear whether this is the optimal intrasentential algorithm for BFP.</S>
			<S sid ="283" ssid = "158">LRC-F is much better than LRC alone considering its improvement of over 5% in the newspaper article domain and over 7% in the fictional domain.</S>
			<S sid ="284" ssid = "159">This increase is discussed in the following section.</S>
			<S sid ="285" ssid = "160">The hybrid algorithm (LRC-P) has the same accuracy rate as LRC-F, though each gets 5 instances right that the other does not.</S>
	</SECTION>
	<SECTION title="Examining Psycholinguistic  Claims of Centering. " number = "5">
			<S sid ="286" ssid = "1">Having established LRC as a fair model of centering given its performance and incre­ mental processing of utterances, we can use it to test empirically whether psycholin­ guistic claims about the ordering of the Cf-list are reflected in an increase in accuracy in resolving pronouns.</S>
			<S sid ="287" ssid = "2">The reasoning behind the following corpus tests is that if the predictions made by psycholinguistic experiments fail to increase performance or even lower performance, then this suggests that the claims may not be useful.</S>
			<S sid ="288" ssid = "3">As Suri, Mc­ Coy, and DeCristofaro (1999, page 180) point out: &quot;the corpus analysis reveals how language is actually used in practice, rather than depending on a small set of dis­ courses presented to the human subjects.&quot;</S>
			<S sid ="289" ssid = "4">In this section, we use our corpus evaluation to provide counterevidence to the claims made about using genitives and prepended phrases to rank the Cf-list, and we propose a new Cf-list ranking based on these results.</S>
			<S sid ="290" ssid = "5">5.1 Moving Prepended Phrases.</S>
			<S sid ="291" ssid = "6">Gordon, Grosz, and Gilliam (1993) carried out five self-paced reading time experiments that provided evidence for the major tenets of centering theory: that the backward­ looking center (Cb) should be realized as a pronoun and that the grammatical subject of an utterance is most likely to be the Cb if possible.</S>
			<S sid ="292" ssid = "7">Their final experiment showed that surface position also plays a role in ranking the Cf-list.</S>
			<S sid ="293" ssid = "8">They observed that entities in surface-initial nonsubject positions in the previous sentence had about the same repeated-name penalty as an entity that had been the noninitial subject of the previous sentence.</S>
			<S sid ="294" ssid = "9">These results can be interpreted to mean that entities in subject position and in prepended phrases (nonsubject surface-initial positions) are equally likely to be the Cb.</S>
			<S sid ="295" ssid = "10">So the claim we wished to test was whether sentence-initial and subject position can serve equally well as the Cb.</S>
			<S sid ="296" ssid = "11">To evaluate this claim, we changed our parser to find the subject of the utterance.</S>
			<S sid ="297" ssid = "12">By tagging the subject, we know what entities constitute the prepended phrase (since they precede the subject).</S>
			<S sid ="298" ssid = "13">We developed two different methods of locating the subject.</S>
			<S sid ="299" ssid = "14">The first simply takes the first NP that is the subject of the first S constituent.</S>
			<S sid ="300" ssid = "15">It is possible that this S constituent is not the top-level S structure and may even be embedded in a prepended phrase.</S>
			<S sid ="301" ssid = "16">This method is called LRC-F since it takes the first subject NP found.</S>
			<S sid ="302" ssid = "17">The second method (LRCS) selects the NP that is the subject of the top-level S structure.</S>
			<S sid ="303" ssid = "18">If one cannot be found, then the system defaults to the first method.</S>
			<S sid ="304" ssid = "19">The result of both tagging methods is that all NPs preceding the chosen subject are marked as being in a prepended phrase.</S>
			<S sid ="305" ssid = "20">Table 4 Prepended phrase movement experiments over New York Times articles.</S>
			<S sid ="306" ssid = "21">Prepended Movement Standard Sort Alg orit hm Nor m P r e Nor m P r e LR C-F 76.2 1% 8 0 . 4 0 % 79.6 3% 7 5 . 5 0 % LR CS 75.9 7% 8 0 . 0 8 % 78.8 1% 7 4 . 8 5 % Eight different corpus trials were carried out involving the two different parsing algorithms (LRC-F and LRCS) and two different ordering modifications: (1) ranking the Cf-list after processing and (2) modifying the order of entities before processing the utterance.</S>
			<S sid ="307" ssid = "22">The standard Cf-list consists of ranking entities by grammatical role and surface order.</S>
			<S sid ="308" ssid = "23">As a result, prepended phrases would still be ranked ahead of the main subject.</S>
			<S sid ="309" ssid = "24">The modified Cf-list consists of ranking the main clause by grammatical role and placing all entities in the prepended phrase after all entities from the main clause.</S>
			<S sid ="310" ssid = "25">The second method involves reordering the utterance before processing.</S>
			<S sid ="311" ssid = "26">This technique was motivated mostly by the order we selected for pronoun resolution: an antecedent is first searched for in the Cf-partial, then in the past Cf-lists, and finally in the entities of the same utterance not in the Cf-partial.</S>
			<S sid ="312" ssid = "27">Pronouns in prepended phrases frequently refer to the subject of the same utterance as well as to entities in the previous utterance.</S>
			<S sid ="313" ssid = "28">Moving the prepended entities after the main clause entities before evaluation achieves the same result as looking in the main clause before the intersentential search.</S>
			<S sid ="314" ssid = "29">Table 4 contains the results of the trials over the New York Times domain.</S>
			<S sid ="315" ssid = "30">&quot;Prepended movement&quot; refers to ranking the Cf-list with prepended entities moved to the end of the main clause; &quot;Standard sort&quot; refers to maintaining the order of the Cf-list.</S>
			<S sid ="316" ssid = "31">&quot;Norm&quot; means that prepended entities were not moved before the utterance was processed.</S>
			<S sid ="317" ssid = "32">&quot;Pre&quot; means that the entities were placed behind the main clause.</S>
			<S sid ="318" ssid = "33">All statistics (within the respective algorithms) were deemed significant relative to each other using McNemar&apos;s test.</S>
			<S sid ="319" ssid = "34">However, it should be noted that between the best performers for LRC-F and LRCS (movement of prepended phrases before and after Cf-list, column 2), the difference in performance is insignificant (p ::; 0.624).</S>
			<S sid ="320" ssid = "35">This indicates that the two algorithms fare the same.</S>
			<S sid ="321" ssid = "36">The conclusion is that if an algorithm prefers the subject and marks entities in prepended phrases as less salient, it will resolve pronouns better.</S>
			<S sid ="322" ssid = "37">5.2 Ranking Complex NPs.</S>
			<S sid ="323" ssid = "38">The second claim we wished to test involved ranking possessor and possessed enti­ ties realized in complex NPs.</S>
			<S sid ="324" ssid = "39">Walker and Prince (1996) developed the complex NP assumption that &quot;In English, when an NP evokes multiple discourse entities, such as a subject NP with a possessive pronoun, we assume that the Cf ordering is from left to right within the higher NP&quot; (page 8).</S>
			<S sid ="325" ssid = "40">So the Cf-list for the utterance Her mother knows Queen Elizabeth would be {her, mother, Elizabeth}.</S>
			<S sid ="326" ssid = "41">Walker and Prince note that the theory is just a hypothesis but motivate its plausibility with a complex example.</S>
			<S sid ="327" ssid = "42">However, a series of psycholinguistic experiments carried out by Gordon et al.</S>
			<S sid ="328" ssid = "43">(1999) refute Walker and Prince&apos;s claim that the entities are ordered left to right.</S>
			<S sid ="329" ssid = "44">Gordon et al. found that subjects had faster reading rates for small discourses in which a pronoun referred to the possessed entity rather than the possessor entity.</S>
			<S sid ="330" ssid = "45">Table 5 Results of evaluating pronoun resolution algorithms for New York Times articles.</S>
			<S sid ="331" ssid = "46">Alg orit hm W P + G e n + P o s LR C-F 8 0.</S>
			<S sid ="332" ssid = "47">0 4 % 7 9 . 9 9 % 7 8 . 4 1 % LR CS 8 0.</S>
			<S sid ="333" ssid = "48">4 0 % 8 0 . 3 4 % 7 8 . 8 3 % LR C 7 6.</S>
			<S sid ="334" ssid = "49">1 5 % 7 6 . 0 3 % 7 4 . 4 7 % Table 6 Results of evaluating pronoun resolution algorithms for Fiction texts.</S>
			<S sid ="335" ssid = "50">Algorithm WP +Gen +Pos LRC-F LRCS LRC 79.73% 81.08% 80.31% 79.58% 81.08% 80.15% 79.42% 80.88% 79.81% Hobbs (1978) also assumes Gordon et al.&apos;s interpretation in his pronoun algorithm.</S>
			<S sid ="336" ssid = "51">He assumes that possessor entities are nested deeper in the parse tree, so when the algorithm does a breadth-first search of the tree, it considers the possessed NP to be the most prominent.</S>
			<S sid ="337" ssid = "52">To see which claim is correct, we altered the Cf-list ranking to put possessed entities before possessor entities.</S>
			<S sid ="338" ssid = "53">The original LRC ordered them left to right as Walker and Prince (WP) suggest.</S>
			<S sid ="339" ssid = "54">Tables 5 and 6 include results for both domains.</S>
			<S sid ="340" ssid = "55">II +gen&quot; indicates that only complex NPs containing genitive pronouns were reversed; II +pos&quot; indicates that all possessive NPs were reversed, matching Gordon et al.&apos;s study.</S>
			<S sid ="341" ssid = "56">The results indicate for both domains that Walker and Prince&apos;s theory works better, though marginally (for all domains and algorithms, significance levels between WP and +gen are under 0.05).</S>
			<S sid ="342" ssid = "57">For the New York Times domain, the difference in the actual number correct between LRCS with WP and LRCS with +pos is 1,362 to 1,337 or 25 pronouns, which is substantial (p :::; 1.4e06) over a corpus of 1,691 pronouns.</S>
			<S sid ="343" ssid = "58">Likewise, for the fictional texts, 1 extra pronoun is resolved incorrectly when using Gordon et al.&apos;s method.</S>
			<S sid ="344" ssid = "59">Looking at the difference in what each algorithm gets right and wrong, it seems that type of referring expression and mention count play a role in which entity should be selected from the complex NP.</S>
			<S sid ="345" ssid = "60">If an entity has been mentioned previously or is realized as a pronoun, it is more likely to be the referent of a following pronoun.</S>
			<S sid ="346" ssid = "61">This would lend support to Strube and Hahn&apos;s S-list and functional centering theories (Strube and Hahn 1996), which maintain that type of referring expression and previous mention influence the salience of each entity with the S-list or Cf-list.</S>
	</SECTION>
	<SECTION title="Conclusions. " number = "6">
			<S sid ="347" ssid = "1">In this paper we first presented a new pronoun resolution algorithm, Left-Right Center­ ing, which adheres to the constraints of centering theory and was inspired by the need to remedy a lack of incremental processing in Brennan, Friedman, and Pollard&apos;s (1987) method.</S>
			<S sid ="348" ssid = "2">Second, we compared LRC&apos;s performance with that of three other leading pronoun resolution algorithms, each one restricted to using only syntactic informa­ tion.</S>
			<S sid ="349" ssid = "3">This comparison is significant in its own right because these algorithms have not been previously compared, in computer-encoded form, on a common corpus.</S>
			<S sid ="350" ssid = "4">Coding all the algorithms allows one to quickly test them on a large corpus and eliminates human error.</S>
			<S sid ="351" ssid = "5">Third, we tried to improve LRC&apos;s performance by incorporating theories on Cf-list construction derived from psycholinguistic experiments.</S>
			<S sid ="352" ssid = "6">Our corpus-based evaluation showed that prepended phrases should not be ranked prominently in the Cf-list as Gordon, Grosz, and Gilliam (1993) suggest.</S>
			<S sid ="353" ssid = "7">Our results also showed that Walker and Prince&apos;s (1996) complex NP assumption performs marginally better than the opposite theory based on experimental results.</S>
			<S sid ="354" ssid = "8">We believe that corpus-based anal­ yses such as this one not only increase performance in resolution algorithms but also can aid in validating the results of psycholinguistic studies, which are usually based on small sequences of utterances.</S>
	</SECTION>
	<SECTION title="Future Work. " number = "7">
			<S sid ="355" ssid = "1">The next step is to research ways of breaking up complex utterances and applying centering to these utterances.</S>
			<S sid ="356" ssid = "2">An overlooked area of research, the incorporation of quoted phrases into centering and pronoun resolution, should be explored.</S>
			<S sid ="357" ssid = "3">Research into how transitions and the backward-looking center can be used in a pronoun res­ olution algorithm should also be carried out.</S>
			<S sid ="358" ssid = "4">Strube and Hahn (1996) developed a heuristic of ranking transition pairs by cost to evaluate different Cf-ranking schemes.</S>
			<S sid ="359" ssid = "5">Perhaps this heuristic could be used to constrain the search for antecedents.</S>
			<S sid ="360" ssid = "6">It should be noted that all the algorithms analyzed in this paper are syntax based (or modified to be syntax based).</S>
			<S sid ="361" ssid = "7">Incorporating semantic information such as sortal constraints would be the next logical development for the system.</S>
			<S sid ="362" ssid = "8">We believe that purely syntax-based resolution algorithms probably have an upper bound of perfor­ mance in the mid 80s and that developing an algorithm that achieves 90% or better accuracy over several domains requires semantic knowledge.</S>
			<S sid ="363" ssid = "9">In short, the results pre­ sented here suggest that purely syntactic methods cannot be pushed much farther, and the upper limit reached can serve as a baseline for approaches that combine syntax and semantics.</S>
			<S sid ="364" ssid = "10">There are several other psycholinguistic experiments that can be verified using our computational corpus-based approach.</S>
			<S sid ="365" ssid = "11">The effects of parallelism and other complex NPs such as plurals still need to be investigated computationally.</S>
	</SECTION>
	<SECTION title="Acknowledgments">
			<S sid ="366" ssid = "12">I am grateful to Barbara Grosz for aiding me in the development of the LRC algorithm and for discussing centering theory issues.</S>
			<S sid ="367" ssid = "13">I am also grateful to Donna Byron, who was responsible for much brainstorming, crosschecking of results, and coding of the Hobbs algorithm.</S>
			<S sid ="368" ssid = "14">I am thankful as well for Jenny Rogers&apos;s work in annotating the fictional texts from the Penn Treebank in the same style used by Ge, Hale, and Charniak (1998).</S>
			<S sid ="369" ssid = "15">Special thanks go to Michael Strube, James Allen, Lenhart Schubert, and Mark Core for advice and brainstorming.</S>
			<S sid ="370" ssid = "16">I would also like to thank Eugene Charniak and Niyu Ge for the annotated, parsed Penn Treebank corpus, which proved invaluable.</S>
			<S sid ="371" ssid = "17">Partial support for the research reported in this paper was provided by the National Science Foundation under Grants IRI90-09018, IRI94-04756, and CDA94-01024 to Harvard University and by DARPA Research Grant F3060298-20133 to the University of Rochester.</S>
	</SECTION>
</PAPER>
