<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">This paper describes an architecture for performing anaphora resolution in a flexible way.</S>
		<S sid ="2" ssid = "2">Systems which con­ form to these guidelines are well­ encapsulated and portable, and can be used to compare anaphora resolu­ tion techniques for new language un­ derstanding applications.</S>
		<S sid ="3" ssid = "3">Our im­ plementation of the architecture in a pronoun resolution testing platform demonstrates the flexibility of the ap­ proach.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number = "1">
			<S sid ="4" ssid = "4">When building natural language understand­ ing systems, choosing the best technique for anaphora resolution is a challenging task.</S>
			<S sid ="5" ssid = "5">The system builder must decide whether to adopt an existing technique or design a new approach.</S>
			<S sid ="6" ssid = "6">A huge variety of techniques are described in the literature, many of them achieving high suc­ cess rates on their own evaluation texts (cf.</S>
			<S sid ="7" ssid = "7">Hobbs 1986; Strube 1998; Mitkov 1998).</S>
			<S sid ="8" ssid = "8">Each technique makes different assumptions about the data available to reference resolution, for ex­ ample, some assume perfect parses, others as­ sume only POS-tagged input, some assume se­ mantic information is available, etc. The chances are high that no published technique will ex­ actly match the data available to a particular sys­ tem&apos;s reference resolution component, so it may The authors thank James Allen for help on this project, as well as the anonymous reviewers for helpful comments on the paper.</S>
			<S sid ="9" ssid = "9">This material is based on work supported by USAF/Rome Labs contract F3060295-l-0025, ONR grant N0001495-l-1088, and Columbia Univ. grant OPG:I307.</S>
			<S sid ="10" ssid = "10">not be apparent which method will work best.</S>
			<S sid ="11" ssid = "11">Choosing a technique is especially problematic for designers of dialogue systems trying to pre­ dict how anaphora resolution techniques devel­ oped for written monologue will perform when adapted for spoken dialogue.</S>
			<S sid ="12" ssid = "12">In an ideal world, the system designer would implement and com­ pare many techniques on the input data available in his system.</S>
			<S sid ="13" ssid = "13">As a good software engineer, he would also ensure that any pronoun resolution code he implements can be ported to future ap­ plications or different language domains without modification.</S>
			<S sid ="14" ssid = "14">The architecture described in this paper was designed to provide just that functionality.</S>
			<S sid ="15" ssid = "15">Anaphora resolution code developed within the architecture is encapsulated to ensure portabil­ ity across parsers, language genres and domains.</S>
			<S sid ="16" ssid = "16">Using these architectural guidelines, a testbed system for comparing pronoun resolution tech­ niques has been developed at the University of Rochester.</S>
			<S sid ="17" ssid = "17">The testbed provides a highly config­ urable environment which uses the same pronoun resolution code regardless of the parser front-end and language type under analysis.</S>
			<S sid ="18" ssid = "18">It can be used, inter alia, to compare anaphora resolution tech­ niques for a given application, to compare new techniques to published baselines, or to compare a particular technique&apos;s performance across lan­ guage types.</S>
	</SECTION>
	<SECTION title="The Architecture. " number = "2">
			<S sid ="19" ssid = "1">2.1 Encapsulation of layers.</S>
			<S sid ="20" ssid = "2">Figure I depicts the organization of the architec­ ture.</S>
			<S sid ="21" ssid = "3">Each of the three layers have different re­ sponsibilities: Layer 1:Supervisor layer controls which Translation and Anaphora resolution modulcs arc active for the current test.</S>
			<S sid ="22" ssid = "4">Semantic type matching for pronouns Figure I: Reference Resolution Architecture • Layer 1: The supervisor controls which modules in Layers 2 and 3 execute.</S>
			<S sid ="23" ssid = "5">In our implementation, the supervisor sets a run­ time switch for each module in layer 2 and 3, and the first instruction of each of those modules checks its runtime flag to see if it is active for the current experiment.</S>
			<S sid ="24" ssid = "6">• Layer 2: Translation reads the input text and creates the main data structure used for reference resolution, called the discourse context (DC).</S>
			<S sid ="25" ssid = "7">The DC consists of discourse entities (DEs) introduced in the text, some of which are anaphoric.</S>
			<S sid ="26" ssid = "8">This layer contains all syntactic and semantic analysis components and all interaction with the surrounding sys­ tem, such as access to a gender database or a lexicon for semantic restrictions.</S>
			<S sid ="27" ssid = "9">All fea­ tures that need to be available to reference resolution are posted to the DC.</S>
			<S sid ="28" ssid = "10">This layer is also responsible for deciding which input constituents create DEs.</S>
			<S sid ="29" ssid = "11">• Layer 3: Anaphora resolution contains a variety of functions for resolving different types of anaphora.</S>
			<S sid ="30" ssid = "12">Responsibilities of this layer include determining what anaphoric phenomena are to be resolved in the current experiment, determining what anaphora res­ olution technique(s) will be used, and de­ termining what updates to make to the DC.</S>
			<S sid ="31" ssid = "13">Even though the modules are independent of the input format, they are still somewhat de­ pendent on the availability of DE features.</S>
			<S sid ="32" ssid = "14">If a feature needed by a particular resolution module was not created in a particular ex­ periment, the module must either do without it or give up and exit.</S>
			<S sid ="33" ssid = "15">This layer&apos;s output is an updated DC with anaphoric elements re solved to their referents.</S>
			<S sid ="34" ssid = "16">If labeled training data is available, this layer is also responsi­ ble for calculating the accuracy of anaphora resolution.</S>
			<S sid ="35" ssid = "17">2.2 Benefits of this.</S>
			<S sid ="36" ssid = "18">design This strict delineation of responsibilities between layers provides the following advantages: • Once a translation layer is written for a specific type of input, all the implemented anaphora resolution techniques are immedi­ ately available and can be compared.</S>
			<S sid ="37" ssid = "19">• Different models of DC construction can be compared using the same underlying refer­ ence resolution modules.</S>
			<S sid ="38" ssid = "20">• It is simple to activate or deactivate each component of the system for a particular ex­ perime nt.</S>
			<S sid ="39" ssid = "21">3 Implementation We used this architecture to implement a testing platform for pronoun resolution.</S>
			<S sid ="40" ssid = "22">Several experi­ ments were run to demonstrate the flexibility of the architecture.</S>
			<S sid ="41" ssid = "23">The purpose of this paper is not to compare the pronoun resolution results for the techniques we implemented, so pronoun resolu­ tion accuracy of particular techniques will not be discussed here.</S>
			<S sid ="42" ssid = "24">1 Instead, our implementation is described to provide some examples of how the architecture can be put to use.</S>
			<SUBSECTION>3.1 Supervisor.</SUBSECTION>
			<S sid ="43" ssid = "25">layer The supervisor layer controls which modules within layers 2 and 3 execute for a particular ex­ periment.</S>
			<S sid ="44" ssid = "26">We created two different supervisor 1 See (Byron and Allen.</S>
			<S sid ="45" ssid = "27">I 999; Tetreault.</S>
			<S sid ="46" ssid = "28">I 999) for results of pronoun resolution experiments run within the testbed.</S>
			<S sid ="47" ssid = "29">modules in the testbed.</S>
			<S sid ="48" ssid = "30">One of them simply reads a configuration file with runtime flags hard-coded by the user.</S>
			<S sid ="49" ssid = "31">This allows the user to explicitly con­ trol which parts of the system execute, and will be used when a final reference resolution techniques is chosen for integration into the TRIPS system parser (Ferguson and Allen, 1998).</S>
			<S sid ="50" ssid = "32">The second supervisor layer was coded as a ge­ netic algorithm (Byron and Allen, 1999).</S>
			<S sid ="51" ssid = "33">In this module, the selection of translation layer modules to execute was hard-coded for the evaluation cor­ pus, but pronoun resolution modules and meth­ ods for combining their results were activated and deactivated by the genetic algorithm.</S>
			<S sid ="52" ssid = "34">Using pro­ noun resolution accuracy as the fitness function, the algorithm learned an optimal combination of pronoun resolution modules.</S>
			<SUBSECTION>3.2 Translation layer.</SUBSECTION>
			<S sid ="53" ssid = "35">Translation layer modules are responsible for all syntactic and semantic analysis of the input text.</S>
			<S sid ="54" ssid = "36">There are a number of design features that must be controlled in this layer, such as how the dis­ course structure affects antecedent accessibility and which surface constituents trigger DEs.</S>
			<S sid ="55" ssid = "37">All these design decisions should be implemented as independent modules so that they can be turned on or off for particular experiments.</S>
			<S sid ="56" ssid = "38">Our experiments created translation modules for two evaluation corpora: written news sto­ ries from the Penn Treebank corpus (Marcus et al., 1993) and spoken task-oriented dialogues from the TRAINS93 corpus (Heeman and Allen, 1995).</S>
			<S sid ="57" ssid = "39">The input format and features added onto DEs from these two corpora are very different, but by encapsulating the translation layer, the same pronoun resolution code can be used for both domains.</S>
			<S sid ="58" ssid = "40">In both of our experiments only simple noun phrases in the surface form triggered DEs.</S>
			<S sid ="59" ssid = "41">Treebank texts contain complete structural parsers, POS tags, and annotation of the antecedents of definite pronouns (added by Ge eta!.</S>
			<S sid ="60" ssid = "42">1998).</S>
			<S sid ="61" ssid = "43">Because of the thorough syntac­ tic information, DEs can be attributed with ex­ plicit phrase structure information.</S>
			<S sid ="62" ssid = "44">This corpus contains unconstrained news stories, so semantic type information is not available.</S>
			<S sid ="63" ssid = "45">The Treebank translator module adds the following features to each DE: 1.</S>
			<S sid ="64" ssid = "46">Whether its surface constituent is contained.</S>
			<S sid ="65" ssid = "47">in reported speech; 2.</S>
			<S sid ="66" ssid = "48">A list of parent nodes containing its surface constituent in the parse tree.</S>
			<S sid ="67" ssid = "49">Each node&apos;s unique identifier encodes the phrase type (i.e. VB, NP, ADJP);</S>
	</SECTION>
	<SECTION title="Whether the surface constituent is in the sec­. " number = "3">
			<S sid ="68" ssid = "1">ond half of a compound sentence;</S>
	</SECTION>
	<SECTION title="The referent&apos;s animacy and gender from a. " number = "4">
			<S sid ="69" ssid = "1">hand-coded agreement-feature database.</S>
			<S sid ="70" ssid = "2">A second translation module was created for a selection of TRAINS93 dialogue transcripts.</S>
			<S sid ="71" ssid = "3">The input was POS-tagged words with no structural analysis.</S>
			<S sid ="72" ssid = "4">Other information, such as basic punc­ tuation and whether each pronoun was in a main or subordinate clause, had previously been hand­ annotated onto the transcripts.</S>
			<S sid ="73" ssid = "5">We also created an interface to the semantic type hierarchy within the Trains system and added semantic information to the DEs.</S>
			<S sid ="74" ssid = "6">Common DE attributes for both corpora: 1.</S>
			<S sid ="75" ssid = "7">Plural or singular numeric agreement;.</S>
			<S sid ="76" ssid = "8">2.</S>
			<S sid ="77" ssid = "9">Whether the entity is contained in the subject.</S>
			<S sid ="78" ssid = "10">of the matrix clause; 3.</S>
			<S sid ="79" ssid = "11">Linear position of the surface constituent;.</S>
			<S sid ="80" ssid = "12">4.</S>
			<S sid ="81" ssid = "13">Whether its surface constituent is definite or.</S>
			<S sid ="82" ssid = "14">indefinite;</S>
	</SECTION>
	<SECTION title="Whether its surface constituent is contained. " number = "5">
			<S sid ="83" ssid = "1">in quoted speech;</S>
	</SECTION>
	<SECTION title="For pronoun DEs, the id of the correct an­. " number = "6">
			<S sid ="84" ssid = "1">tecedent (used for evaluation).</S>
			<S sid ="85" ssid = "2">3.3 Anaphora resolution layer.</S>
			<S sid ="86" ssid = "3">Modules within this layer can be coded to resolve a variety of anaphoric phenomena in a variety of ways.</S>
			<S sid ="87" ssid = "4">For example, a particular experiment may be concerned only with resolving pronouns or it might also require determination of coreference between definite noun phrases.</S>
			<S sid ="88" ssid = "5">This layer is rem­ iniscent of the independent anaphora resolution modules in the Lucy system (Rich and LuperFoy, 1988), except that modules in that system were not designed to be easily turned on or off.</S>
			<S sid ="89" ssid = "6">For our testbed, we implemented a variety of pronoun resolution techniques.</S>
			<S sid ="90" ssid = "7">Each technique I Table I: Pronoun resolution modules used in our experiments can run in isolation or with the addition of meta­ modules that combine the output of multiple tech­ niques.</S>
			<S sid ="91" ssid = "8">We implemented meta-modules to in­ terface to the genetic algorithm driver and to combine different salience factors into an over­ all score (similar to (Carbonell and Brown, 1988; Mitkov, 1998)).</S>
			<S sid ="92" ssid = "9">Table 1 describes the pronoun resolution techniques implemented at this point, and shows whether they are activated for the Treebank and the TRAINS93 experiments.</S>
			<S sid ="93" ssid = "10">Al­ though each module could run for both experi­ ments without error, if the features a particular module uses in the DE were not available, we simply deactivated the module.</S>
			<S sid ="94" ssid = "11">When we mi­ grate the TRIPS system to a new domain this year, all these pronoun resolution methods will be available for comparison.</S>
			<S sid ="95" ssid = "12">4 Summary.</S>
			<S sid ="96" ssid = "13">This paper has described a framework for ref­ erence resolution that separates details of the syntactic/semantic interpretation process from anaphora resolution in a plug-and-play architec­ ture.</S>
			<S sid ="97" ssid = "14">The approach is not revolutionary, it sim­ ply demonstrates how to apply known software engineering techniques to the reference resolu­ tion component of a natural language understand­ ing system.</S>
			<S sid ="98" ssid = "15">The framework enables compari­ son of baseline techniques across corpora and al­ lows for easy modification of an implemented system when the sources of information available to anaphora resolution change.</S>
			<S sid ="99" ssid = "16">The architecture facilitates experimentation on different mixtures of discourse context and anaphora resolution al­ gorithms.</S>
			<S sid ="100" ssid = "17">Modules written within this framework are portable across domains and language gen­ res.</S>
	</SECTION>
</PAPER>
